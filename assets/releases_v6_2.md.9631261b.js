import{_ as p,a as c,b as i,c as l,d as r,e as u,f as k,g as d}from"./chunks/BlazorTemplate.88969001.js";import{_ as m}from"./chunks/logo.19a0c91e.js";import{_ as g,a as h,b as f,c as y}from"./chunks/litestream-project-templates.98216416.js";import{_ as v}from"./chunks/litestream-costs.b9fedbab.js";import{_ as w,a as b,b as x}from"./chunks/sftp.4de46bbd.js";import{_ as q}from"./chunks/dashboard-features.f31dceb5.js";import{_ as S,a as T,b as _,c as R,d as A,e as D,f as I,g as C,h as L,i as P,j as E,k as B,l as O,m as V,n as M,o as U,p as j,q as z,r as F,s as W}from"./chunks/profiling-custom-meta.1015ee93.js";import{_ as N}from"./chunks/profiling-CreateBooking-CommandAfter.2d634025.js";import{_ as H}from"./chunks/profiling-redis-CommandAfter.e40ef79a.js";import{_ as K,a as Q,b as J,c as G}from"./chunks/validation-category-create.70a4aca3.js";import{_ as $}from"./chunks/validation-category.c9f431cd.js";import{_ as Y,a as X}from"./chunks/locode-tags-filter.487e57fe.js";import{I as e}from"./chunks/iconify.2272db1b.js";import{o as Z,c as nn,d as n,e as t,u as o,a as s,b as a}from"./app.2aea72c0.js";var sn="/assets/studio-home.6fecea4a.png";const an=n("link",{rel:"stylesheet",href:"/css/release.css"},null,-1),tn={class:"my-8 ml-20 flex flex-col items-center"},en=n("h2",{class:"border-none text-4xl sm:text-5xl md:text-6xl tracking-tight font-extrabold"},[n("span",{class:"text-purple-600 mr-6"},"Blazor"),n("span",{style:{color:"#44A8B3"}},"Tailwind")],-1),on=s('<p>We&#39;ve had great feedback from our existing Boostrap <a href="/templates-blazor">Blazor WASM template</a>, its highly <a href="https://youtu.be/TIgjMf_vtCI" target="_blank" rel="noopener noreferrer">productive dev model</a> and pre-rendering solution for achieving <a href="https://docs.servicestack.net/templates-blazor#improving-startup-performance" target="_blank" rel="noopener noreferrer">instant Startup performance</a> which has seen it become more popular than all our other <a href="http://jamstacks.net" target="_blank" rel="noopener noreferrer">jamstacks.net</a> templates combined.</p><p>As a result we&#39;ve continued to invest in our Blazor support and have created a new <a href="https://github.com/NetCoreTemplates/blazor-tailwind" target="_blank" rel="noopener noreferrer">blazor-tailwind</a> project template to take advantage of Tailwind&#39;s modern utility-first CSS design system to create beautiful, instant-loading Blazor WASM Apps.</p><a href="https://blazor-tailwind.jamstacks.net"><div class="block flex justify-center shadow hover:shadow-lg rounded py-1"><img class="" src="'+c+'"></div><div class="pt-4 text-center"> blazor-tailwind.jamstacks.net </div></a><h2 id="tailwind-components" tabindex="-1">Tailwind Components <a class="header-anchor" href="#tailwind-components" aria-hidden="true">#</a></h2><p><a href="https://tailwindcss.com" target="_blank" rel="noopener noreferrer">Tailwind</a> has quickly become the best modern CSS framework we&#39;ve used to create scalable, <a href="https://tailwindcss.com/#mobile-first" target="_blank" rel="noopener noreferrer">mobile-first responsive</a> websites built upon a beautiful expert-crafted constraint-based <a href="https://tailwindcss.com/#constraint-based" target="_blank" rel="noopener noreferrer">Design System</a> that enabled effortless reuse of a growing suite of <a href="https://tailwindcomponents.com" target="_blank" rel="noopener noreferrer">Free Community</a> and professionally-designed <a href="https://tailwindui.com" target="_blank" rel="noopener noreferrer">Tailwind UI Component Libraries</a> which has proven invaluable in quickly creating beautiful websites &amp; docs that have benefited all our new modern <a href="http://jamstacks.net" target="_blank" rel="noopener noreferrer">jamstacks.net</a> templates.</p><p><a href="https://tailwindui.com" target="_blank" rel="noopener noreferrer"><img src="'+i+'" alt=""></a></p>',6),pn=n("div",{class:"my-16 px-4 sm:px-6"},[n("div",{class:"text-center"},[n("h1",{class:"text-4xl sm:text-5xl md:text-6xl tracking-tight font-extrabold text-gray-900"},[n("span",{class:"block"},[a(" Creating Beautiful "),n("span",{class:"text-purple-600"},"Blazor Apps")]),n("span",{style:{color:"#44A8B3"},class:"block"},"with Tailwind")])]),n("p",{class:"mx-auto mt-5 max-w-prose text-xl text-gray-500"}," Preview the highly productive development model of the new Blazor Tailwind template showing how easy it is to utilize beautifully designed components "),n("div",{class:"my-8"},[n("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/3gD_MMcYI-4",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})])],-1),cn=s('<div class="relative bg-white py-4"><div class="mx-auto max-w-md px-4 text-center sm:max-w-3xl sm:px-6 lg:max-w-7xl lg:px-8"><p class="mt-2 text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl">Loads instantly with great SEO</p><p class="mx-auto mt-5 max-w-prose text-xl text-gray-500"> All Blazor WASM templates <a href="https://blazor-tailwind.jamstacks.net/docs/prerender">incorporate prerendering</a> to achieve their <a href="https://blazor-tailwind.jamstacks.net">instant load times</a> that greatly benefits the built-in markdown pages with great SEO </p></div></div><a href="https://blazor-tailwind.jamstacks.net/docs/prerender"><div class="block flex justify-center shadow hover:shadow-lg rounded py-1"><img class="" src="'+l+`"></div></a><p>Pre-rendering works by replacing the <a href="https://blazor-tailwind.jamstacks.net/docs/prerender#increasing-perceived-performance" target="_blank" rel="noopener noreferrer">Blazor WASM loading page</a> with an equivalent looking HTML page dynamically generated in JavaScript which renders the same Blazor App&#39;s Chrome, rendered using the same shared navigation defined in JavaScript to render the App&#39;s Top &amp; Sidebar navigation links in a simple CSV format:</p><div class="language-js"><pre><code><span class="token constant">TOP</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    $0.40 /mo,        /docs/hosting
    Prerendering,     /docs/prerender
    Deployments,      /docs/deploy
</span><span class="token template-punctuation string">\`</span></span>
<span class="token constant">SIDEBAR</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    Counter,          /counter,       /img/nav/counter.svg
    Todos,            /todomvc,       /img/nav/todomvc.svg
    Bookings CRUD,    /bookings-crud, /img/nav/bookings-crud.svg
    Call Hello,       /hello$,        /img/nav/hello.svg
    Call HelloSecure, /hello-secure,  /img/nav/hello-secure.svg
    Fetch data,       /fetchdata,     /img/nav/fetchdata.svg
</span><span class="token template-punctuation string">\`</span></span>
</code></pre></div><div class="relative bg-white py-4"><div class="mx-auto max-w-md px-4 text-center sm:max-w-3xl sm:px-6 lg:max-w-7xl lg:px-8"><h2 class="text-base font-semibold uppercase tracking-wider text-indigo-600">Getting Started</h2><p class="mt-2 text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl">Create a new Blazor WASM Tailwind App</p><p class="mx-auto mt-5 max-w-prose text-xl text-gray-500"> Customize and Download a new Tailwind Blazor WASM project with your preferred project name: </p></div></div>`,5),ln=n("p",null,[a("Alternatively you can create & download a new Blazor Project with the "),n("a",{href:"/dotnet-new"},"x dotnet tool"),a(":")],-1),rn=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x new blazor-tailwind ProjectName")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),un=s(`<div class="relative bg-white py-4 mt-12"><div class="mx-auto max-w-md px-4 text-center sm:max-w-3xl sm:px-6 lg:max-w-7xl lg:px-8"><p class="mt-2 text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl">Blazor Components</p><p class="mx-auto mt-5 max-w-prose text-xl text-gray-500"> Rich, themable UI Component Library with declarative contextual Validation </p></div></div><p>To maximize productivity the template utilizes the <strong>ServiceStack.Blazor</strong> library containing integrated functionality for Blazor including an optimal JSON API HttpClient Factory, API-enabled base components and a rich library of Tailwind &amp; Bootstrap UI Input components with integrated contextual validation support of ServiceStack&#39;s <a href="/error-handling">structured Error responses</a> heavily utilized throughout each project template.</p><h3 id="blazor-tailwind-ui-components" tabindex="-1">Blazor Tailwind UI Components <a class="header-anchor" href="#blazor-tailwind-ui-components" aria-hidden="true">#</a></h3><p>The Built-in UI Components enable a clean &amp; productive dev model, which as of this release include:</p><table><thead><tr><th>Component</th><th>Description</th></tr></thead><tbody><tr><td><code>&lt;TextInput&gt;</code></td><td>Text Input control for string properties</td></tr><tr><td><code>&lt;DateTimeInput&gt;</code></td><td>Date Input control for Date properties</td></tr><tr><td><code>&lt;CheckboxInput&gt;</code></td><td>Checkbox Input control for Boolean properties</td></tr><tr><td><code>&lt;SelectInput&gt;</code></td><td>Select Dropdown for properties with finite list of values like Enums</td></tr><tr><td><code>&lt;TextAreaInput&gt;</code></td><td>Text Input control for large strings</td></tr><tr><td><code>&lt;DynamicInput&gt;</code></td><td>Dynamic component utilizing the appropriate above Input controls in Auto Forms</td></tr><tr><td><code>&lt;AlertSuccess&gt;</code></td><td>Displaying successful notification feedback</td></tr><tr><td><code>&lt;ErrorSummary&gt;</code></td><td>Displaying error summary message when no contextual field validation is available</td></tr><tr><td><code>&lt;FileUpload&gt;</code></td><td>Used with <code>FilesUploadFeature</code> and <code>UploadTo</code> attribute to upload files</td></tr></tbody></table><p>The Tailwind &amp; Bootstrap components share the same functionally equivalent base classes that can be easily swapped when switching CSS frameworks by updating its namespace in your App&#39;s <code>_Imports.razor</code>.</p><div class="language-csharp"><pre><code>@<span class="token keyword">using</span> ServiceStack<span class="token punctuation">.</span>Blazor<span class="token punctuation">.</span>Components<span class="token punctuation">.</span>Tailwind
<span class="token comment">//@using ServiceStack.Blazor.Components.Bootstrap</span>
</code></pre></div><h4 id="themable" tabindex="-1">Themable <a class="header-anchor" href="#themable" aria-hidden="true">#</a></h4><p>Should it be needed, their decoupled design also allows easy customization by running the included <a href="https://github.com/NetCoreTemplates/blazor-tailwind/blob/main/MyApp.Client/Shared/Components/README.ss" target="_blank" rel="noopener noreferrer">README.ss</a> executable documentation to copy each controls <strong>Razor</strong> UI markup locally into your project, enabling easy customization of all UI input controls.</p><h3 id="bookings-crud-example" tabindex="-1">Bookings CRUD Example <a class="header-anchor" href="#bookings-crud-example" aria-hidden="true">#</a></h3><p>To demonstrate ServiceStack&#39;s clean &amp; highly productive Blazor dev model, we&#39;ll walk through implementing the <a href="/autoquery-crud-bookings">AutoQuery Bookings CRUD</a> example in Blazor.</p><p>Since we&#39;re using <a href="/autoquery-crud">AutoQuery CRUD</a> we only need to define the Request DTO with the input fields we want the user to populate in our <code>Booking</code> RDBMS table in <a href="https://github.com/NetCoreTemplates/blazor-tailwind/blob/main/MyApp.ServiceModel/Bookings.cs" target="_blank" rel="noopener noreferrer">Bookings.cs</a>:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Tag</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;bookings&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Create a new Booking&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/bookings&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateHasRole</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Employee&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoApply</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Behavior<span class="token punctuation">.</span>AuditCreate<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateBooking</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICreateDb<span class="token punctuation">&lt;</span>Booking<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>IdResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Name this Booking is for&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">RoomType</span> RoomType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateGreaterThan</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> RoomNumber <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateGreaterThan</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Cost <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> BookingStartDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> BookingEndDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type <span class="token operator">=</span> <span class="token string">&quot;textarea&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Notes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Where we make use of <a href="/declarative-validation">Declarative Validation</a> attributes to define the custom validation rules for this API.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>[Tag]</code>, <code>[Description]</code> and <code>[Input]</code> attributes are optional to markup how this API appears in ServiceStack&#39;s built-in <a href="/api-explorer.html#details-tab">API Explorer</a> and <a href="/locode/declarative">Locode UIs</a></p></div><h3 id="blazor-wasm-app" tabindex="-1">Blazor WASM App <a class="header-anchor" href="#blazor-wasm-app" aria-hidden="true">#</a></h3><p>Thanks to ServiceStack&#39;s <a href="/physical-project-structure">Recommended Project Structure</a> no any additional classes are needed as we&#39;re able to bind UI Controls directly to our typed server <code>CreateBooking</code> Request DTO used to define the API in <a href="https://github.com/NetCoreTemplates/blazor-tailwind/blob/main/MyApp.Client/Pages/BookingsCrud/Create.razor" target="_blank" rel="noopener noreferrer">BookingsCrud/Create.razor</a>:</p><div class="language-csharp"><pre><code><span class="token operator">&lt;</span><span class="token class-name">form</span> @onsubmit<span class="token operator">=</span><span class="token string">&quot;_ =&gt; OnSubmit()&quot;</span> @onsubmit<span class="token punctuation">:</span>preventDefault<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">CascadingValue</span> Value<span class="token operator">=</span>@api<span class="token punctuation">.</span>Error<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span>@CssUtils<span class="token punctuation">.</span><span class="token function">ClassNames</span><span class="token punctuation">(</span><span class="token string">&quot;shadow overflow-hidden sm:rounded-md bg-white&quot;</span><span class="token punctuation">,</span> @<span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;relative px-4 py-5 bg-white sm:p-6&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token class-name">CloseButton</span> OnClose<span class="token operator">=</span><span class="token string">&quot;close&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>fieldset<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>legend <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;text-base font-medium text-gray-900 text-center mb-4&quot;</span><span class="token operator">&gt;</span>New Booking<span class="token operator">&lt;</span><span class="token operator">/</span>legend<span class="token operator">&gt;</span>

            <span class="token operator">&lt;</span><span class="token class-name">ErrorSummary</span> Except<span class="token operator">=</span>@VisibleFields <span class="token operator">/</span><span class="token operator">&gt;</span>

            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;grid grid-cols-6 gap-6&quot;</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;col-span-6 sm:col-span-3&quot;</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>TextInput @bind<span class="token operator">-</span>Value<span class="token operator">=</span><span class="token string">&quot;request.Name&quot;</span> <span class="token class-name">required</span> placeholder<span class="token operator">=</span><span class="token string">&quot;Name for this booking&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;col-span-6 sm:col-span-3&quot;</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>SelectInput @bind<span class="token operator">-</span>Value<span class="token operator">=</span><span class="token string">&quot;request.RoomType&quot;</span> Options<span class="token operator">=</span>@<span class="token punctuation">(</span>Enum<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetValues</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RoomType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">&gt;</span> 
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;col-span-6 sm:col-span-3&quot;</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token class-name">TextInput</span> type<span class="token operator">=</span><span class="token string">&quot;number&quot;</span> @bind<span class="token operator">-</span>Value<span class="token operator">=</span><span class="token string">&quot;request.RoomNumber&quot;</span> min<span class="token operator">=</span><span class="token string">&quot;0&quot;</span> required <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;col-span-6 sm:col-span-3&quot;</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token class-name">TextInput</span> type<span class="token operator">=</span><span class="token string">&quot;number&quot;</span> @bind<span class="token operator">-</span>Value<span class="token operator">=</span><span class="token string">&quot;request.Cost&quot;</span> min<span class="token operator">=</span><span class="token string">&quot;0&quot;</span> required <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;col-span-6 sm:col-span-3&quot;</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>DateTimeInput @bind<span class="token operator">-</span>Value<span class="token operator">=</span><span class="token string">&quot;request.BookingStartDate&quot;</span> required <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;col-span-6 sm:col-span-3&quot;</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>DateTimeInput @bind<span class="token operator">-</span>Value<span class="token operator">=</span><span class="token string">&quot;request.BookingEndDate&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    
                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;col-span-6&quot;</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>TextAreaInput @bind<span class="token operator">-</span>Value<span class="token operator">=</span><span class="token string">&quot;request.Notes&quot;</span> placeholder<span class="token operator">=</span><span class="token string">&quot;Notes about this booking&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>fieldset<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>CascadingValue<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>

@code <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Parameter</span></span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token return-type class-name">EventCallback<span class="token punctuation">&lt;</span>IdResponse<span class="token punctuation">&gt;</span></span> done <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Parameter</span></span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> @<span class="token keyword">class</span> <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token class-name">CreateBooking</span> request <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        BookingStartDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Hide Error Summary Messages for Visible Fields which displays contextual validation errors</span>
    <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> VisibleFields <span class="token operator">=&gt;</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>RoomType<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>RoomNumber<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>BookingStartDate<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>BookingEndDate<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Cost<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Notes<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">ApiResult<span class="token punctuation">&lt;</span>IdResponse<span class="token punctuation">&gt;</span></span> api <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">OnSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        api <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ApiAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>Succeeded<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> done<span class="token punctuation">.</span><span class="token function">InvokeAsync</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>Response<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            request <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">await</span> done<span class="token punctuation">.</span><span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Calling ServiceStack APIs requires no additional code-gen or boilerplate where the populated Request DTO can be sent as-is using the <a href="/csharp-client#high-level-api-and-apiasync-methods">JsonApiClient Api methods</a> which returns an encapsulated successful API or structured error response in its typed <code>ApiResult&lt;T&gt;</code>.</p><p>The UI validation binding uses Blazor&#39;s <code>&lt;CascadingValue&gt;</code> to propagate any <code>api.error</code> responses down to the child Input components.</p><p>That&#39;s all there&#39;s to it, we use <a href="https://tailwindcss.com/docs/grid-template-columns" target="_blank" rel="noopener noreferrer">Tailwind&#39;s CSS Grid classes</a> to define our UI layout which shows each control in its own row for mobile UIs or 2 fields per row in resolutions larger than the <a href="https://tailwindcss.com/docs/responsive-design" target="_blank" rel="noopener noreferrer">Tailwind&#39;s sm: responsive breakpoint</a> to render our beautiful Bookings Form:</p><div class="mx-auto max-w-screen-md text-center py-8"><a href="https://blazor-tailwind.jamstacks.net/bookings-crud"><img src="`+r+'"></a></div><p>Which utilizes both client and server validation upon form submission, displaying UX friendly contextual errors under each field when they violate any server <a href="https://docs.servicestack.net/declarative-validation" target="_blank" rel="noopener noreferrer">declarative validation</a> or Client UI <strong>required</strong> rules:</p><div class="mx-auto max-w-screen-md text-center py-8"><a href="https://blazor-tailwind.jamstacks.net/bookings-crud"><img src="'+u+'"></a></div><h3 id="new-fileupload-control" tabindex="-1">New FileUpload Control <a class="header-anchor" href="#new-fileupload-control" aria-hidden="true">#</a></h3><p>We&#39;ve also extracted the File Upload UI component used in our <a href="/locode/files-blazor">File Blazor Demo</a> into a reusable Blazor component you can utilize in your own apps, here&#39;s what it looks like on <a href="https://file.locode.dev" target="_blank" rel="noopener noreferrer">file.locode.dev</a>:</p><p><img src="'+k+`" alt=""></p><p>It&#39;s a simple control that takes advantage of ServiceStack&#39;s declarative <a href="/locode/files">Managed File Uploads</a> support to effortlessly enable multiple file uploads that can be declaratively added to any Request DTO, which only requires setting 2 properties:</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>Request</td><td>Request DTO object instance populated with into to be sent to your endpoint</td></tr><tr><td>FilePropertyName</td><td>The name of the property that is used to reference your file, used with the <code>[UploadTo]</code> attribute</td></tr></tbody></table><h4 id="example-usage" tabindex="-1">Example usage <a class="header-anchor" href="#example-usage" aria-hidden="true">#</a></h4><p>Below is an AutoQuery CRUD API example that references an upload location defined when configuring the <a href="/locode/files-upload-filesystem.html">FileUploadFeature Plugin</a>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateMyDtoWithFileUpload</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICreateDb<span class="token punctuation">&lt;</span>MyDtoWithFileUpload<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>IdResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">UploadTo</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FilePath <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> OtherData <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryFileUpload</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryDb<span class="token punctuation">&lt;</span>MyDtoWithFileUpload<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDtoWithFileUpload</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FilePath <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> OtherData <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>When calling this API, the Managed File Uploads feature will upload the HTTP File Upload included in the API request to the configured <strong>fs</strong> upload location and populate the uploaded path to the <code>FilePath</code> Request DTO property.</p><p>The Blazor <code>FileUpload</code> Control handles the <a href="/locode/files.html#uploading-files-from-c">C# File Upload API Request</a> by providing the Request DTO instance to send and the DTO property the File Upload should populate:</p><div class="language-razor"><pre><code><span class="token directive"><span class="token keyword">@page</span> <span class="token csharp language-csharp"><span class="token string">&quot;/file-upload&quot;</span></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>FileUploadPage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileUpload</span> <span class="token attr-name">Request</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>request<span class="token punctuation">&quot;</span></span> <span class="token attr-name">FilePropertyName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>CreateMyDtoWithFileUpload<span class="token punctuation">.</span>FilePath<span class="token punctuation">)</span></span></span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token block"><span class="token keyword">@code</span> <span class="token csharp language-csharp"><span class="token punctuation">{</span>

    <span class="token comment">// Any additional values should be populated </span>
    <span class="token comment">// on the request object before the upload starts.</span>
    <span class="token class-name">CreateMyDtoWithFileUpload</span> request <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        OtherData <span class="token operator">=</span> <span class="token string">&quot;Test&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></span></span>
</code></pre></div><p><img src="`+d+'" alt=""></p><p>The <code>FilePropertyName</code> matches the property name that is annotated by the <code>UploadTo</code> attribute. The <code>Request</code> is the instance of the Request DTO.</p><h2 id="litestream" class="mx-auto max-w-screen-md text-center py-8 border-none"><a href="https://litestream.io"><img src="'+m+'"></a></h2><p>One of our primary goals with ServiceStack is to deliver great value and performance, attributes which are exemplified in our modern <a href="http://jamstacks.net" target="_blank" rel="noopener noreferrer">jamstacks.net</a> templates which are maximally designed to deliver the best performance possible in a .NET App by adopting a <a href="https://jamstack.org" target="_blank" rel="noopener noreferrer">Jamstack architecture</a>, enabling redundant hosting of their decoupled UI&#39;s on inexpensive CDN edge caches - the most optimal place to deliver the best performance.</p><p>This also happens to be the cheapest to place to host their static files, taking load away from expensive .NET App Servers and move them to free Cloudflare or GitHub CDNs, which our Jamstack Live Demos take advantage of to enable their <a href="https://jamstacks.net/posts/hosting" target="_blank" rel="noopener noreferrer"><strong>$0.40 /mo</strong> TCO</a> for hosting their .NET Docker Apps which are only needed to serve the JSON APIs used to power their Jamstack UIs.</p><h3 id="expensive-managed-databases" tabindex="-1">Expensive Managed Databases <a class="header-anchor" href="#expensive-managed-databases" aria-hidden="true">#</a></h3><p>Having achieved the best architecture for delivering max value and performance, the last expensive vital component used in most Web Apps is hosting of their expensive managed databases. Despite most RDBMS&#39;s being OSS and free of licensing costs, major cloud companies continue to charge artificially high hosting costs to provide redundant hosting of App data. The effect of which adds an artificial barrier to entry discouraging new Indie developers from building &amp; hosting their dream Apps that could form self sustaining business models that should ideally be accessible to anyone with access to a Computer with the Internet.</p><p>If we solve this, Individual developers can take advantage of our <a href="https://servicestack.net/free" target="_blank" rel="noopener noreferrer">Free Licenses</a> for experimenting and iterating on building their dream Apps for a few $&#39;s a month, instead of their prohibitive recommended setup costing $100&#39;s /month.</p><div id="litestream-interest" class="relative bg-white py-4 mt-12"><div class="mx-auto max-w-md px-4 text-center sm:max-w-3xl sm:px-6 lg:max-w-7xl lg:px-8"><p class="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl">Introducing Litestream</p></div></div><p>Our <a href="https://jamstacks.net" target="_blank" rel="noopener noreferrer">Jamstack live demos</a> have been able to avoid these expensive costs by being configured with <a href="https://www.sqlite.org" target="_blank" rel="noopener noreferrer">SQLite</a> by default, which OrmLite lets you easily change to use your <a href="/ormlite/installation">preferred RDBMS</a>. But when storing live customer data you&#39;ll want to ensure you have redundant backups to protect against data loss and why we were excited to learn about <a href="https://litestream.io" target="_blank" rel="noopener noreferrer">Litestream</a> for enabling effortless replicas &amp; restores to a number of <a href="https://litestream.io/guides/" target="_blank" rel="noopener noreferrer">popular storage providers</a>.</p><p>Litestream is being developed by <a href="https://twitter.com/benbjohnson" target="_blank" rel="noopener noreferrer">@benbjohnson</a>, the creator of the popular the popular <a href="https://github.com/boltdb/bolt" target="_blank" rel="noopener noreferrer">BoltDB NoSQL embeddable DB</a>, used in a number of critical software components like <a href="https://www.ibm.com/cloud/learn/etcd" target="_blank" rel="noopener noreferrer">etcd</a> to manage critical information distributed systems need, most notably, the configuration, state and metadata for <a href="https://kubernetes.io" target="_blank" rel="noopener noreferrer">Kubernetes</a>.</p><p>Thankfully Ben saw the potential for SQLite as a better replacement of BoltDB as a dependency-free application database and went about resolving the primary issue preventing SQLite from being used in production server-side Apps.</p><h3 class="text-3xl"><a href="https://litestream.io/blog/why-i-built-litestream/#the-problem-litestream-solves"> The problem Litestream solves </a></h3><div class="pl-16 py-9"><div class="text-gray-500 font-serif text-9xl -mb-16">\u201C</div><blockquote class="text-gray-900 font-serif text-xl italic"><p> I built Litestream to bring back sanity to application development. Litestream is a tool that runs in a separate process and continuously replicates a SQLite database to Amazon S3. You can get up and running with a few lines of configuration. Then you can set-it-and-forget-it and get back to writing code. </p><p class="mt-8"> You might think this sounds expensive to continuously write to cloud storage that provides 99.99% uptime and 99.999999999% durability but it\u2019s astoundingly cheap. Typical costs are only about $1 per month. Litestream is free and open-source too so there\u2019s never a license to pay for. </p></blockquote><div class="mt-4 text-gray-600">- Ben Johnson</div></div><p>We&#39;re excited about the inexpensive cost, minimal infrastructure dependencies and simplified hosting complexity of this new approach that we quickly set out to provide integrated support for Litestream.</p>',50),kn=n("div",{class:"my-16 px-4 sm:px-6"},[n("div",{class:"text-center"},[n("h3",{id:"litestream-video",class:"text-4xl sm:text-5xl md:text-6xl tracking-tight font-extrabold text-gray-900"}," Safely run DB Apps on a single server at low cost ")]),n("p",{class:"mx-auto mt-5 max-w-prose text-xl text-gray-500"}," Simple & Fast! Litestream reliably runs most Apps, fast on a single server, with continuous backups to cheap managed storage. "),n("div",{class:"my-8"},[n("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/WXRwT7ayc1Y",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})])],-1),dn=s('<section class="my-10 text-center"><div class="container"><div class="pb-8"><h3 id="litestream-how" class="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl"><span class="block xl:inline">How it works</span></h3><p class="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl"> Litestream is run as a <a href="https://litestream.io/guides/docker/">sidecar Docker container</a>, activated on each deployment to handle restoring &amp; replicating changes from its configured storage </p></div><img src="'+g+'"></div></section><h3 id="boringly-simple" tabindex="-1">Boringly Simple <a class="header-anchor" href="#boringly-simple" aria-hidden="true">#</a></h3><p>Litestream&#39;s implementation is beautiful in its simplicity which doesn&#39;t require any libraries or custom builds of SQLite, it works as an external process transparent to your application that taps into SQLite&#39;s journaling features to handle replicating changes to its configured storage provider:</p><div class="pl-16 py-9"><div class="text-gray-500 font-serif text-9xl -mb-16">\u201C</div><blockquote class="text-gray-900 font-serif text-xl italic"><p> The most important thing you should understand about Litestream is that it&#39;s just SQLite. Your application uses standard SQLite, with whatever your standard SQLite libraries are. We&#39;re not parsing your queries or proxying your transactions, or even adding a new library dependency. We&#39;re just taking advantage of the journaling and concurrency features SQLite already has, in a tool that runs alongside your application. For the most part, your code can be oblivious to Litestream&#39;s existence. </p><p class="mt-8"> Or, think of it this way: you can build a Remix application backed by Litestream-replicated SQLite, and, while it&#39;s running, crack open the database using the standard <b>sqlite3</b> REPL and make some changes. It&#39;ll just work. You can read more about <a href="https://litestream.io/how-it-works/">how this works here</a>. </p></blockquote><div class="mt-4 text-gray-600">- Ben Johnson</div></div><h3 id="the-right-time-for-server-side-sqlite" tabindex="-1">The Right Time for Server-Side SQLite <a class="header-anchor" href="#the-right-time-for-server-side-sqlite" aria-hidden="true">#</a></h3><p>Over the years CPUs, memory, &amp; disks have become orders of magnitude faster &amp; cheaper which now sees NVMe SSDs being able to read an entire 1 GB database in &lt;1 second, what&#39;s not getting faster is the speed of light and the latency it takes for data to travel between networked components that&#39;s further exacerbated by the necessary layers of network switches, firewalls, and application protocols undertaken in each HTTP Request.</p><p>Whilst modern RDBMS&#39;s are finely-tuned modern miracles, the one thing they don&#39;t have any control over is the latency between its distributed components. A latency SQLite doesn&#39;t have courtesy of being built right in to your application process which sees per-query latency&#39;s drop down to 10-20 microseconds - a <strong>50-100x</strong> improvement over intra-region RDBMS queries.</p><p>In addition to applications benefiting from latency-free queries, they also become much simpler to manage, replacing entire infrastructure dependencies and n-tier architectures with a transparent sidecar process that continuously monitors and performs per-second backups to AWS S3, Azure Blob Storage &amp; SFTP providing resilient, cost effective point-in-time restore functionality.</p><p>Best of all storing bytes is a boringly simple solved problem AWS guarantees with <a href="https://aws.amazon.com/s3/storage-classes/" target="_blank" rel="noopener noreferrer">11 9&#39;s durability</a>, a marked improvement over the <a href="https://aws.amazon.com/rds/sla/" target="_blank" rel="noopener noreferrer">3 9&#39;s guarantee</a> when their first tier SLA kicks in for its managed RDS instances.</p><div class="mt-16 mx-auto max-w-7xl px-4"><div class="text-center"><h3 class="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl"><span class="block xl:inline">Reduce Complexity &amp; Save Costs</span></h3><p class="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl"> Avoid expensive managed RDBMS servers, reduce deployment complexity, eliminate infrastructure dependencies &amp; save order of magnitude costs vs production hosting </p></div><img src="'+v+'"></div><h3 id="commercially-supported-thanks-to-fly-io" tabindex="-1">Commercially supported thanks to <a href="http://Fly.io" target="_blank" rel="noopener noreferrer">Fly.io</a> <a class="header-anchor" href="#commercially-supported-thanks-to-fly-io" aria-hidden="true">#</a></h3><p>Whilst SQLite enjoys enviable reliability with one of the <a href="https://www.sqlite.org/testing.html" target="_blank" rel="noopener noreferrer">most thoroughly tested</a> code-bases on earth, it&#39;s usage in server production databases is still nascent given there hasn&#39;t been a tool that works as seamlessly as Litestream to enable transparent replication &amp; restores. On the surface Litestream appears to be great boring technology, beautiful in its simplicity but we only started seriously considering it for server production apps after it graduated from OSS project to a commercially supported product when Ben joined <a href="http://Fly.io" target="_blank" rel="noopener noreferrer">Fly.io</a> to <a href="https://fly.io/blog/all-in-on-sqlite-litestream/" target="_blank" rel="noopener noreferrer">work on Litestream full-time</a>.</p><p>Already being excited in its potential, this was enough to immediately start work on our support for Litestream, creating load tests calling ServiceStack <a href="/autoquery">AutoQuery APIs</a> querying SQLite + Litestream to test the viability for ourselves which we we&#39;re pleasantly surprised to see it&#39;s performance and cost savings held up under load:</p><section class="my-10 text-center"><div class="container"><div class=""><h3 id="savings-at-scale" class="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl"><span class="block xl:inline">Savings at Scale</span></h3><p class="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl"> SQLite directly benefits from improving hardware&#39;s faster CPUs and SSDs with superior locality to comfortably handle most App&#39;s needs. </p></div><img src="'+h+'"></div></section><p>We share Ben&#39;s enthusiasm and thoughts on <a href="https://fly.io/blog/all-in-on-sqlite-litestream/#you-should-take-this-option-more-seriously" target="_blank" rel="noopener noreferrer">SQLite has become a viable option</a> for Server-side production App databases that can handle most App needs. Litestream&#39;s architecture <a href="https://fly.io/blog/all-in-on-sqlite-litestream/#small-fast-reliable-globally-distributed-choose-any-four" target="_blank" rel="noopener noreferrer">does have limitations</a> where it&#39;s only suitable for single-node applications, its effortless replication will let you scale out your reads to read-only replicas, but your writes need to be either sharded or limited to a single Application.</p><p>In effect, instead of managing Kubernetes clusters you&#39;ll need to scale up <a href="https://m.signalvnoise.com/the-majestic-monolith/" target="_blank" rel="noopener noreferrer">Majestic Monolith&#39;s</a>, a practice some high-performance sites like <a href="https://www.hanselminutes.com/847/engineering-stack-overflow-with-roberta-arcoverde" target="_blank" rel="noopener noreferrer">StackOverflow have adopted</a> who instead of caching hot pages, have evaluated it was better to give their SQL Server 1.5TB RAM. An architectural overview of servers used to handle their impressive load:</p><ul><li>2B page views /month</li><li>6000 req /sec</li><li>9 servers @ 5/10% capacity</li><li>1.5 TB RAM SQL Server</li></ul><p>So whilst scaling up is an option, SQLite&#39;s no-frills core SQL featureset allows for easy migrations should you wish to migrate to micro services in future, a task effortless in <a href="/ormlite/">OrmLite</a> which provides an implementation agnostic abstraction for the most popular RDBMS&#39;s.</p><section class="text-center"><div class="container"><div class=""><h3 id="effortless-migrations" class="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl"><span class="block xl:inline">Effortless Migrations</span></h3><p class="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl"> No Lock-in. Migrate off whenever you want. <br> <br> Using SQLite with <a href="https://docs.servicestack.net/ormlite/">OrmLite&#39;s</a> fast, typed APIs lets you easily migrate to any of its <a href="https://docs.servicestack.net/ormlite/installation">supported RDBMS</a> with just configuration, no other code changes required. </p></div><div class="flex justify-center pb-8 my-8"><img src="'+f+'" class="max-w-screen-md"></div></div></section><p>The beauty of Litestream is that it happily runs in the background transparent to your application who doesn&#39;t need to make any changes to take advantage of it, the way to enable it is by including Litestream along with your app&#39;s deployment workflow and running it as a dedicated <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar" target="_blank" rel="noopener noreferrer">sidecar container</a> where it restores and watches for updates to your SQLite database, replicating those changes to your configured storage.</p><section class="my-20 text-center"><div class="container"><div class=""><h3 id="litestream-apps" class="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl"><span class="block xl:inline">Create Litestream Apps</span></h3><p class="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl"> To make it easy, we&#39;ve created <a href="/github-action-templates">GitHub Action</a> Docker Compose configurations for each of Litestream&#39;s popular Storage options: </p></div></div></section><section class="my-20 text-center"><div class="flex"><div class="flex flex-1 flex-col"><a href="https://servicestack.net/litestream#Name=MyApp&amp;Mix=x-litestream-aws"><img src="'+w+'" alt="AWS S3" class="w-52"></a><span class="block text-2xl font-medium text-gray-900"> S3 Simple Storage Service </span></div><div class="flex flex-1 flex-col"><a href="https://servicestack.net/litestream#Name=MyApp&amp;Mix=x-litestream-azure"><img src="'+b+'" alt="Azure Blob Storage" class="w-52"></a><span class="block text-2xl font-medium text-gray-900"> Azure Blob Storage </span></div><div class="flex flex-1 flex-col"><a href="https://servicestack.net/litestream#Name=MyApp&amp;Mix=x-litestream-sftp"><img src="'+x+'" alt="SFTP" class="w-52"></a><span class="block text-2xl font-medium text-gray-900"> SSH File Transfer Protocol </span></div></div><div class="mt-10"><p class="max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl"> That you can mix with any modern C# jamstacks.net Project Templates: </p><a href="https://servicestack.net/litestream#create"><img src="'+y+'" class="max-w-prose"></a></div></section><p>Alternatively as the <a href="/github-action-templates">Docker compose</a> configurations are delivered as <a href="/mix-tool">mix</a> configurations, they can also be applied to existing projects, e.g:</p>',23),mn=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x mix litestream-aws")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),gn=s('<p>Since Litestream is tied to deployment, hosting environment &amp; preferred configured storage, we&#39;ve created a matrix of configurations to cover each of the supported templates and storage preferences.</p><table><thead><tr><th>Project Template</th><th>AWS S3</th><th>Azure Blob Storage</th><th>SFTP (generic)</th></tr></thead><tbody><tr><td><strong>web</strong></td><td>litestream-aws</td><td>litestream-azure</td><td>litestream-sftp</td></tr><tr><td><strong>blazor-tailwind</strong></td><td>blazor-litestream-aws</td><td>blazor-litestream-azure</td><td>blazor-litestream-sftp</td></tr><tr><td><strong>blazor-wasm</strong></td><td>blazor-litestream-aws</td><td>blazor-litestream-azure</td><td>blazor-litestream-sftp</td></tr><tr><td><strong>vue-ssg</strong></td><td>jamstack-litestream-aws</td><td>jamstack-litestream-azure</td><td>jamstack-litestream-sftp</td></tr><tr><td><strong>vue-vite</strong></td><td>jamstack-litestream-aws</td><td>jamstack-litestream-azure</td><td>jamstack-litestream-sftp</td></tr><tr><td><strong>nextjs</strong></td><td>jamstack-litestream-aws</td><td>jamstack-litestream-azure</td><td>jamstack-litestream-sftp</td></tr></tbody></table><h3 id="github-action-workflow" tabindex="-1">GitHub Action Workflow <a class="header-anchor" href="#github-action-workflow" aria-hidden="true">#</a></h3><p>These GitHub Action configurations are an effortless way to create and deploy new Applications within minutes, which only need to be filled in with your environment&#39;s access credentials configured in your <a href="/litestream-templates.html#github-action-workflow">projects GitHub Action Secrets</a>.</p><h2 id="admin-ui" tabindex="-1">Admin UI <a class="header-anchor" href="#admin-ui" aria-hidden="true">#</a></h2><p>Another primary focus of this release was developing a new suite of Admin UI&#39;s providing a number of productivity features to Manage Users, DB Validation Rules and gain unprecedented insights into Live running Apps with in-depth Request Logging &amp; Profiling where you&#39;ll be able to observe your App&#39;s behavior in real-time.</p><p>The <a href="/admin-ui">Admin UI</a> is built into all ServiceStack Apps, accessible to <a href="/debugging#admin-role">Admin Users</a> from:</p><div class="text-center pb-3"><h3 class="text-4xl text-indigo-800">/admin-ui</h3></div><h3 id="dashboard" tabindex="-1">Dashboard <a class="header-anchor" href="#dashboard" aria-hidden="true">#</a></h3><p>On first access you&#39;ll be greeted with the re-designed dashboard showing high-level overview stats on the number of APIs your App has as well as internal stats counters that were previously only accessible from code, now they&#39;re being surfaced right on your Dashboard where they can provide valuable insights into the health of different features at a glance:</p><p><img src="'+q+'" alt=""></p><h4 id="advertized-features" tabindex="-1">Advertized features <a class="header-anchor" href="#advertized-features" aria-hidden="true">#</a></h4><p>As Admin is a capability-based UI it only shows the stats and features your App has enabled. To aid in discovery the dashboard now includes a light switch of available Admin features with a link to <a href="/admin-ui-features">Admin UI Feature Docs</a>, providing a summary of each Admin UI component and instructions on how to enable them.</p><p>Lets explore some of the new Admin UI components added in this release:</p><h2 id="request-logging-profiling" tabindex="-1">Request Logging &amp; Profiling <a class="header-anchor" href="#request-logging-profiling" aria-hidden="true">#</a></h2><p>The new Request Logging &amp; Profiling UIs bring an invaluable new level of observability into your App, from being able to quickly inspect and browse incoming requests, to tracing their behavior from their generated events in the new <a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.diagnosticsource?view=net-6.0" target="_blank" rel="noopener noreferrer">Diagnostic Source</a> capabilities added all throughout ServiceStack, which both power the new UIs and enables new introspectability from code where you can now to tap in to inspect &amp; debug when each diagnostic event occurs.</p>',16),hn=n("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/LgQHTSHSk1g",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""},null,-1),fn=n("p",null,[a("The quickest way to enable access to these new features is to "),n("a",{href:"/mix-tool"},"mix"),a(" in the profiling configuration:")],-1),yn=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x mix profiling")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),vn=s(`<p>Which will add the <a href="/modular-startup">Modular Startup</a> configuration to your Host project that registers both Request Logging &amp; Profiling features when running your App in <a href="/debugging#debugmode">DebugMode</a> (i.e. Development):</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureProfiling</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostingStartup</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">ConfigureAppHost</span><span class="token punctuation">(</span>host <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            host<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">AddIfDebug</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RequestLogsFeature</span> <span class="token punctuation">{</span>
                EnableResponseTracking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            host<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">AddIfDebug</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProfilingFeature</span> <span class="token punctuation">{</span>
                IncludeStackTrace <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The default configuration looks at providing useful information during development, where the response request bodies are captured in the Request Logger and the StackTrace is captured on the important events where they can be useful.</p><h3 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h3><p>Depending on your App you&#39;ll want to change these defaults, e.g. if you&#39;re persisting the request logs using the <a href="/request-logger#csv-request-logger">CSV Request Logger</a> or <a href="/request-logger#redis-request-logger">Redis Request Logger</a> it may not be feasible to <strong>capture all API responses</strong> if they&#39;re very large.</p><p>If enabled, <strong>StackTraces</strong> are captured in these important events:</p><ul><li><strong>ServiceStack:</strong> Before a Service Gateway Request is sent</li><li><strong>OrmLite:</strong> Opening a connection or rolling back a transaction</li><li><strong>Redis:</strong> Opening a connection, auto retrying a failed command, renting &amp; returning clients from a redis manager pool</li></ul><p>The latter of which is useful when resolving <a href="/redis/troubleshooting">concurrent usage issues</a>.</p><p>As it adds overhead, profiling should only be added when used, e.g. during development or when needing to debug production issues. Although you may always want to capture request logs depending on how important it is to maintain an audit of completed API requests. Should it be needed, both Logging &amp; Profiling plugins offer several configuration options to control the type, info &amp; events captured.</p><p>Whichever features you have registered will dynamically appear in the Admin UI&#39;s sidebar for quick navigation:</p><p><img src="`+S+'" alt=""></p><h3 id="request-logging-ui" tabindex="-1">Request Logging UI <a class="header-anchor" href="#request-logging-ui" aria-hidden="true">#</a></h3><p>Clicking on <strong>Logging</strong> navigates to the Request Logging UI which displays each API request processed in a grid of useful summary information showing high-level information for each HTTP API request:</p><p><img src="'+T+'" alt=""></p><p>This screenshot shows an example of a non-authenticated user navigating to a protected page before signing in then querying and submitting a new Booking in the <a href="/autoquery-crud-bookings">AutoQuery CRUD Bookings Demo</a> using <a href="/locode/">Locode&#39;s</a> Auto UI, in which we can see error API Responses are highlighted in <strong>red</strong> and redirects highlighted in <strong>yellow</strong>.</p><p>The top navigation controls which results are displayed with:</p><ul><li><strong>Has Errors</strong> - Show only requests with errors</li><li><strong>Has Response</strong> - Show only requests with response bodies</li><li><strong>Reset Filters Icon</strong> - Clear all filters (ESC)</li><li><strong>Left/Right Icons</strong> - Navigate to previous/next pages (LEFT/RIGHT)</li><li><strong>Refresh Icon</strong> - Reload the latest results</li></ul><p>This same user workflow is also captured in the Profiling UI in much finer granularity, capturing all the events performed by APIs:</p><p><img src="'+_+'" alt=""></p><p>Clicking on an entry previews it in more detail, e.g. clicking on the first <strong>/api/QueryBookings</strong> will show the API Request and Response made:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+R+'"></div><p>By default it shows the Request and Response DTOs in JSON, but clicking on preview often shows a more human-friendly view:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+A+'"></div><p>A useful feature from having a dedicated UX-friendly UI is enabling quick navigation where each <strong>blue</strong> link will display results filtered to all matching requests, whilst the <strong>trace request</strong> link will navigate to the Profiling UI showing all diagnostic events performed within that request.</p><p>In addition to Request &amp; Response DTOs, the Logging UI also shows all captured HTTP information including HTTP Request Headers with any Cookies being extracted into its own view for better readability as well as decoded JWT payload from the <strong>ss-tok</strong> cookie when using <a href="/jwt-authprovider">JWT Auth</a> with non-encrypted JWT defaults.</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+D+'"></div><p>Lets now take a look at the failed <strong>CreateBooking</strong> request to see what went wrong:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+I+'"></div><p>Ok, so the Admin User (identified from JWT info) tried to create an empty booking which was rejected by its server declarative validation rules which sees these context validation errors surfaced into Locode&#39;s UI:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+C+'"></div><p>We can then see this was quickly rectified in the next request with a successful Booking submitted:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+L+'"></div><p>Clicking on <strong>trace request</strong> we can see all the diagnostic events performed in this API request within the <strong>RequestBefore</strong> and <strong>RequestAfter</strong> events which took <strong>0.07s</strong> to complete.</p><h2 id="profiling-ui" tabindex="-1">Profiling UI <a class="header-anchor" href="#profiling-ui" aria-hidden="true">#</a></h2><p>Following diagnostic conventions you&#39;ll typically see 2 entries for each event, created before and after each action, measuring the duration and capturing the last event before any error occurred.</p><p><img src="'+P+'" alt=""></p><h3 id="sql-profiling" tabindex="-1">SQL Profiling <a class="header-anchor" href="#sql-profiling" aria-hidden="true">#</a></h3><p>Clicking on an entry will show more useful contextual information captured for each event, e.g. if you click on OrmLite&#39;s <strong>CommandAfter</strong> event you&#39;ll be able to see the generated SQL + Params executed by OrmLite:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+N+'"></div><p>The profiling detail view also contains <strong>blue</strong> links to filter matching diagnostic events and showing useful information like the <strong>Thread</strong>, <strong>User</strong> this command was executed by as well as the <strong>duration</strong> and <strong>timestamp</strong> when it occurred.</p><h3 id="redis-profiling" tabindex="-1">Redis Profiling <a class="header-anchor" href="#redis-profiling" aria-hidden="true">#</a></h3><p>Redis simpler commands are captured in a list of arguments:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+H+'"></div><h3 id="purchase-api-events-example" tabindex="-1">Purchase API Events Example <a class="header-anchor" href="#purchase-api-events-example" aria-hidden="true">#</a></h3><p>Surfacing the high-level events of your service implementations provides a new observability perspective that&#39;s harder to infer from trying to follow the details in the code.</p><p>For example our <a href="https://account.servicestack.net/buy/BUS" target="_blank" rel="noopener noreferrer">Order Page</a> generated over <strong>150+ events</strong> capturing all the SQL commands to store order, subscription, customer, payment information and generated License and Order confirmation emails, HttpClient integration requests with Stripe and MQ requests for sending emails in a <a href="/background-mq">Background MQ Worker thread</a>.</p><p><img src="'+E+'" alt=""></p><h3 id="httpclient-profiling" tabindex="-1">HttpClient Profiling <a class="header-anchor" href="#httpclient-profiling" aria-hidden="true">#</a></h3><p>HttpClient profiling is implemented a little differently then other events in that it builds on the existing HttpClient diagnostic events so it&#39;s able to capture general usage of .NET&#39;s HttpClient, which is how it&#39;s able to capture our <a href="/stripe">integration with Stripe</a>:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+B+'"></div><h3 id="jsonapiclient-profiling" tabindex="-1">JsonApiClient Profiling <a class="header-anchor" href="#jsonapiclient-profiling" aria-hidden="true">#</a></h3><p>Although we&#39;re able to provide richer profiling for our .NET 6+ <a href="/csharp-client#jsonapiclient">JsonApiClient</a> which has access to typed Request DTOs for submitting API Requests:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+O+'"></div><p>As well as Response DTOs returned in API Responses:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+V+'"></div><p>We also can examine API Error responses in richer detail, e.g:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+M+'"></div><h3 id="mq-profiling" tabindex="-1">MQ Profiling <a class="header-anchor" href="#mq-profiling" aria-hidden="true">#</a></h3><p>Since they execute APIs on an entirely different endpoint and worker threads, MQ Requests are tracked independently from HTTP APIs starting their own diagnostic Activity which enables being able to trace all events generated from an MQ Request. Here&#39;s an example used to handle sending customer emails:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+U+'"></div><h3 id="service-gateway-profiling" tabindex="-1">Service Gateway Profiling <a class="header-anchor" href="#service-gateway-profiling" aria-hidden="true">#</a></h3><p>The <a href="/service-gateway">Service Gateway</a> leverages ServiceStack&#39;s message-based design to enable loosely-coupled service integrations enabling systems to split into Microservices without needing to change any of the internal services consuming them. As they&#39;re not RPC invocations their messages are introspectable and can be observed in the Profiling UI:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+j+`"></div><h3 id="profile-custom-info" tabindex="-1">Profile Custom Info <a class="header-anchor" href="#profile-custom-info" aria-hidden="true">#</a></h3><p>We&#39;ve made it easy to add a custom tracking field with the same functionality as the primary fields where they can be sorted and filtered. This could be used to attach a <strong>Tenant Id</strong> to the profiling information by providing a Label and Resolver function to resolve it, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProfilingFeature</span> <span class="token punctuation">{</span>
    TagLabel <span class="token operator">=</span> <span class="token string">&quot;Tenant&quot;</span><span class="token punctuation">,</span>
    TagResolver <span class="token operator">=</span> req <span class="token operator">=&gt;</span> <span class="token function">MyResolveTenant</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Where it will be displayed in all profiling results, e.g:</p><p><img src="`+z+'" alt=""></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The number and order of fields can be customized in <code>SummaryFields</code> collection in <code>ProfilingFeature</code></p></div><p>This custom info also appears in the detail page as a link which can be used to filter events with the same tenant id:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="'+F+`"></div><h3 id="profile-custom-metadata" tabindex="-1">Profile Custom Metadata <a class="header-anchor" href="#profile-custom-metadata" aria-hidden="true">#</a></h3><p>You&#39;re also able to capture custom information for different events and have them appear in the detail page, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProfilingFeature</span> <span class="token punctuation">{</span>
    DiagnosticEntryFilter <span class="token operator">=</span> <span class="token punctuation">(</span>entry<span class="token punctuation">,</span> evt<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>evt <span class="token keyword">is</span> <span class="token class-name">RequestDiagnosticEvent</span> requestEvent<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> req <span class="token operator">=</span> requestEvent<span class="token punctuation">.</span>Request<span class="token punctuation">;</span>
            entry<span class="token punctuation">.</span>Meta <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span><span class="token string">&quot;RemoteIp&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>RemoteIp<span class="token punctuation">,</span>
                <span class="token punctuation">[</span><span class="token string">&quot;Referrer&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>UrlReferrer<span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">[</span><span class="token string">&quot;Language&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">GetHeader</span><span class="token punctuation">(</span>HttpHeaders<span class="token punctuation">.</span>AcceptLanguage<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Where it will be populated in the <strong>Meta</strong> section arguments:</p><div class="block flex justify-center items-center"><img class="max-w-screen-md" src="`+W+`"></div><h3 id="access-diagnostic-events-in-code" tabindex="-1">Access Diagnostic Events in Code <a class="header-anchor" href="#access-diagnostic-events-in-code" aria-hidden="true">#</a></h3><p>In addition to powering the profiling UI, the diagnostic events added throughout ServiceStack can be observed in code to tap in and inspect when these diagnostic events occur. It follows the standard Diagnostic Source model where you specify which listeners you want observed in <code>OnNext(DiagnosticListener)</code> that you can then access in <code>OnNext(KeyValuePair&lt;string,object&gt;)</code>.</p><p>Microsoft&#39;s Diagnostic Events like HttpClient uses anonymous classes making them unnecessarily difficult to access, which can be made easier by using our <a href="/reflection-utils#converting-instances-from-an-object-dictionary">Reflection Utils ToObjectDictionary()</a>.</p><p>As they offer better utility, we&#39;ve opted to use idiomatic strong types and string constants instead where they&#39;re better accessible from C#.</p><p>You can use this skeleton class for a quick way to get started showing how to subscribe to all ServiceStack Diagnostic Sources and the event names and types to handle all profiling events:</p><div class="language-csharp"><pre><code><span class="token comment">// Register your Diagnostic Observer</span>
<span class="token class-name"><span class="token keyword">var</span></span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyDiagnosticObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> subscription <span class="token operator">=</span> DiagnosticListener<span class="token punctuation">.</span>AllListeners<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">MyDiagnosticObserver</span> <span class="token punctuation">:</span> 
    <span class="token type-list"><span class="token class-name">IObserver<span class="token punctuation">&lt;</span>DiagnosticListener<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> 
    <span class="token class-name">IObserver<span class="token punctuation">&lt;</span>KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>IDisposable<span class="token punctuation">&gt;</span></span> subscriptions <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Specify which Profiling Events you want to observe */</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> IObserver<span class="token operator">&lt;</span>DiagnosticListener<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">OnNext</span><span class="token punctuation">(</span><span class="token class-name">DiagnosticListener</span> diagnosticListener<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>diagnosticListener<span class="token punctuation">.</span>Name <span class="token keyword">is</span> <span class="token class-name">Diagnostics<span class="token punctuation">.</span>Listeners<span class="token punctuation">.</span>ServiceStack</span>         
         <span class="token operator">||</span> diagnosticListener<span class="token punctuation">.</span>Name <span class="token keyword">is</span> <span class="token class-name">Diagnostics<span class="token punctuation">.</span>Listeners<span class="token punctuation">.</span>OrmLite</span>
         <span class="token operator">||</span> diagnosticListener<span class="token punctuation">.</span>Name <span class="token keyword">is</span> <span class="token class-name">Diagnostics<span class="token punctuation">.</span>Listeners<span class="token punctuation">.</span>Redis</span>
         <span class="token operator">||</span> diagnosticListener<span class="token punctuation">.</span>Name <span class="token keyword">is</span> <span class="token class-name">Diagnostics<span class="token punctuation">.</span>Listeners<span class="token punctuation">.</span>Client</span>
         <span class="token operator">||</span> diagnosticListener<span class="token punctuation">.</span>Name <span class="token keyword">is</span> <span class="token class-name">Diagnostics<span class="token punctuation">.</span>Listeners<span class="token punctuation">.</span>HttpClient</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> subscription <span class="token operator">=</span> diagnosticListener<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            subscriptions<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Handle Profiling Events */</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnNext</span><span class="token punctuation">(</span><span class="token class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> kvp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/** ServiceStack */</span>
        <span class="token comment">/*** Request */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>ServiceStack<span class="token punctuation">.</span>WriteRequestBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RequestDiagnosticEvent</span> reqBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>ServiceStack<span class="token punctuation">.</span>WriteRequestAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RequestDiagnosticEvent</span> reqAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>ServiceStack<span class="token punctuation">.</span>WriteRequestError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RequestDiagnosticEvent</span> reqError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        
        <span class="token comment">/*** Gateway */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>ServiceStack<span class="token punctuation">.</span>WriteGatewayBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RequestDiagnosticEvent</span> gatewayBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>ServiceStack<span class="token punctuation">.</span>WriteGatewayAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RequestDiagnosticEvent</span> gatewayAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>ServiceStack<span class="token punctuation">.</span>WriteGatewayError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RequestDiagnosticEvent</span> gatewayError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        
        <span class="token comment">/*** MQ */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>ServiceStack<span class="token punctuation">.</span>WriteMqRequestBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">MqRequestDiagnosticEvent</span> mqReqBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>ServiceStack<span class="token punctuation">.</span>WriteMqRequestAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">MqRequestDiagnosticEvent</span> mqReqAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>ServiceStack<span class="token punctuation">.</span>WriteMqRequestError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">MqRequestDiagnosticEvent</span> mqReqError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>ServiceStack<span class="token punctuation">.</span>WriteMqRequestPublish <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">MqRequestDiagnosticEvent</span> mqReqPublish<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        
        <span class="token comment">/** Client */</span>    
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Client<span class="token punctuation">.</span>WriteRequestBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">HttpClientDiagnosticEvent</span> clientBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Client<span class="token punctuation">.</span>WriteRequestAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">HttpClientDiagnosticEvent</span> clientAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Client<span class="token punctuation">.</span>WriteRequestError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">HttpClientDiagnosticEvent</span> clientError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        
        <span class="token comment">/** HttpClient */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>HttpClient<span class="token punctuation">.</span>OutStart<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> kvp<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToObjectDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>HttpClient<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> kvp<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToObjectDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>HttpClient<span class="token punctuation">.</span>OutStop<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
             <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> kvp<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToObjectDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>HttpClient<span class="token punctuation">.</span>Response<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> kvp<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToObjectDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/** OrmLite */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteCommandBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> dbBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteCommandAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> dbAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteCommandError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> dbError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        
        <span class="token comment">/*** OrmLite Connections */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteConnectionOpenBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> dbOpenBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteConnectionOpenAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> dbOpenAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteConnectionOpenError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> dbOpenError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteConnectionCloseBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> dbCloseBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteConnectionCloseAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> dbCloseAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteConnectionCloseError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> dbCloseError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>        
        
        <span class="token comment">/*** OrmLite Transactions */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteTransactionOpen <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> commitOpen<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteTransactionCommitBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> commitBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteTransactionCommitAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> commitAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteTransactionCommitError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> commitError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteTransactionRollbackBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> rollbackBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteTransactionRollbackAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> rollbackAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>OrmLite<span class="token punctuation">.</span>WriteTransactionRollbackError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">OrmLiteDiagnosticEvent</span> rollbackError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>

        <span class="token comment">/** Redis */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WriteCommandBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WriteCommandRetry <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisRetry<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WriteCommandAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WriteCommandError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>        
        
        <span class="token comment">/*** Redis Connections */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WriteConnectionOpenBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisOpenBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WriteConnectionOpenAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisOpenAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WriteConnectionOpenError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisOpenError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WriteConnectionCloseBefore <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisCloseBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WriteConnectionCloseAfter <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisCloseAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WriteConnectionCloseError <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisCloseError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>        
        
        <span class="token comment">/*** Redis Pools */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WritePoolRent <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisPoolBefore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kvp<span class="token punctuation">.</span>Key <span class="token operator">==</span> Diagnostics<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>Redis<span class="token punctuation">.</span>WritePoolReturn <span class="token operator">&amp;&amp;</span> kvp<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">RedisDiagnosticEvent</span> redisPoolAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> IObserver<span class="token operator">&lt;</span>DiagnosticListener<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">OnCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        subscriptions<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subscriptions<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> IObserver<span class="token operator">&lt;</span>DiagnosticListener<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">OnError</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnError</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="request-logs-configuration" tabindex="-1">Request Logs Configuration <a class="header-anchor" href="#request-logs-configuration" aria-hidden="true">#</a></h3><p>The <a href="/request-logger">Request Logs</a> feature has a number of configuration options controlling which requests are logged and the level of logging captured about them.</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">RequestLogsFeature</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// Limit API access to users in role</span>
    <span class="token class-name"><span class="token keyword">string</span></span> AccessRole <span class="token operator">=</span> RoleNames<span class="token punctuation">.</span>Admin<span class="token punctuation">;</span>

    <span class="token comment">// RequestLogs service Route, default is /requestlogs</span>
    <span class="token class-name"><span class="token keyword">string</span></span> AtRestPath <span class="token operator">=</span> <span class="token string">&quot;/requestlogs&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// Size of memory logger circular buffer</span>
    <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> Capacity<span class="token punctuation">;</span>

    <span class="token comment">// Turn On/Off Session Tracking</span>
    <span class="token class-name"><span class="token keyword">bool</span></span> EnableSessionTracking<span class="token punctuation">;</span>

    <span class="token comment">// Turn On/Off Logging of Raw Request Body, default is Off</span>
    <span class="token class-name"><span class="token keyword">bool</span></span> EnableRequestBodyTracking<span class="token punctuation">;</span>

    <span class="token comment">// Turn On/Off Raw Request Body Tracking per-request</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>IRequest<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> RequestBodyTrackingFilter<span class="token punctuation">;</span>

    <span class="token comment">// Turn On/Off Tracking of Responses</span>
    <span class="token class-name"><span class="token keyword">bool</span></span> EnableResponseTracking <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// Turn On/Off Tracking of Responses per-request</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>IRequest<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> ResponseTrackingFilter<span class="token punctuation">;</span>
    
    <span class="token comment">// Turn On/Off Tracking of Exceptions</span>
    <span class="token class-name"><span class="token keyword">bool</span></span> EnableErrorTracking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment">// Don&#39;t log matching requests</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>IRequest<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> SkipLogging<span class="token punctuation">;</span>

    <span class="token comment">// Change the RequestLogger provider. Default is InMemoryRollingRequestLogger</span>
    <span class="token class-name">IRequestLogger</span> RequestLogger<span class="token punctuation">;</span>

    <span class="token comment">// Don&#39;t log requests of these types. By default RequestLog&#39;s are excluded</span>
    <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> ExcludeRequestDtoTypes<span class="token punctuation">;</span>

    <span class="token comment">// Don&#39;t log request body&#39;s for services with sensitive information.</span>
    <span class="token comment">// By default Auth and Registration requests are hidden.</span>
    <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> HideRequestBodyForRequestDtoTypes<span class="token punctuation">;</span>
    
    <span class="token comment">// Don&#39;t log Response DTO Types</span>
    <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> ExcludeResponseTypes<span class="token punctuation">;</span>

    <span class="token comment">// Limit logging to only Service Requests</span>
    <span class="token class-name"><span class="token keyword">bool</span></span> LimitToServiceRequests <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Customize Request Log Entry</span>
    <span class="token class-name">Action<span class="token punctuation">&lt;</span>IRequest<span class="token punctuation">,</span> RequestLogEntry<span class="token punctuation">&gt;</span></span> RequestLogFilter<span class="token punctuation">;</span>

    <span class="token comment">// Ignore logging and serializing these Request DTOs</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span> IgnoreTypes<span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Use custom Ignore Request DTO predicate</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> IgnoreFilter <span class="token operator">=</span> DefaultIgnoreFilter<span class="token punctuation">;</span>

    <span class="token comment">// Default take, if none is specified</span>
    <span class="token class-name"><span class="token keyword">int</span></span> DefaultLimit <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token comment">// Change what DateTime to use for the current Date (defaults to UtcNow)</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">&gt;</span></span> CurrentDateFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="profiling-configuration" tabindex="-1">Profiling Configuration <a class="header-anchor" href="#profiling-configuration" aria-hidden="true">#</a></h3><p>The <code>ProfilingFeature</code> offers similar functionality in specifying which sources to observe and profiling events to capture as well as options for customizing the Profiling UI, e.g you can limit generating &amp; capturing diagnostic events to just <a href="/ormlite/">OrmLite</a> and <a href="/redis/">Redis</a> with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProfilingFeature</span> <span class="token punctuation">{</span>
    Profile <span class="token operator">=</span> ProfileSource<span class="token punctuation">.</span>OrmLite <span class="token operator">|</span> ProfileSource<span class="token punctuation">.</span>Redis
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>For further configuration options see the documented plugin below:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Flags</span></span><span class="token punctuation">]</span>
<span class="token keyword">enum</span> <span class="token class-name">ProfileSource</span>
<span class="token punctuation">{</span>
    None         <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    ServiceStack <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>
    Client       <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
    Redis        <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>
    OrmLite      <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span>
    All          <span class="token operator">=</span> ServiceStack <span class="token operator">|</span> Client <span class="token operator">|</span> OrmLite <span class="token operator">|</span> Redis<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ProfilingFeature</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Limit API access to users in role</span>
    <span class="token class-name"><span class="token keyword">string</span></span> AccessRole <span class="token operator">=</span> RoleNames<span class="token punctuation">.</span>Admin<span class="token punctuation">;</span>

    <span class="token comment">// Which features to Profile, default all</span>
    <span class="token class-name">ProfileSource</span> Profile <span class="token operator">=</span> ProfileSource<span class="token punctuation">.</span>All<span class="token punctuation">;</span>

    <span class="token comment">// Size of circular buffer of profiled events</span>
    <span class="token class-name"><span class="token keyword">int</span></span> Capacity <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>

    <span class="token comment">// Don&#39;t log requests of these types. By default Profiling/Metadata requests are excluded</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span> ExcludeRequestDtoTypes <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Don&#39;t log requests from these path infos prefixes</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> ExcludeRequestPathInfoStartingWith <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Turn On/Off Tracking of Responses per-request</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>IRequest<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> ExcludeRequestsFilter<span class="token punctuation">;</span>

    <span class="token comment">// Don&#39;t log request body&#39;s for services with sensitive information.</span>
    <span class="token comment">// By default Auth and Registration requests are hidden.</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span> HideRequestBodyForRequestDtoTypes <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Don&#39;t log Response DTO Types</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span> ExcludeResponseTypes <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Turn On/Off Tracking of Responses per-request</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>IRequest<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> ResponseTrackingFilter<span class="token punctuation">;</span>
    
    <span class="token comment">// Whether to include CallStack StackTrace </span>
    <span class="token class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> IncludeStackTrace<span class="token punctuation">;</span>

    <span class="token comment">// Attach custom data to request profiling summary fields</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>IRequest<span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> TagResolver<span class="token punctuation">;</span>
    
    <span class="token comment">// Label to show for custom tag</span>
    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> TagLabel<span class="token punctuation">;</span>
    
    <span class="token comment">// The properties displayed in Profiling UI results grid</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> SummaryFields<span class="token punctuation">;</span>
    
    <span class="token comment">// Default take, if none is specified</span>
    <span class="token class-name"><span class="token keyword">int</span></span> DefaultLimit <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Customize DiagnosticEntry that gets captured</span>
    <span class="token class-name">Action<span class="token punctuation">&lt;</span>DiagnosticEntry<span class="token punctuation">,</span> DiagnosticEvent<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> DiagnosticEntryFilter<span class="token punctuation">;</span>

    <span class="token comment">// Maximum char/byte length of string response body</span>
    <span class="token class-name"><span class="token keyword">int</span></span> MaxBodyLength <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="db-validation" tabindex="-1">DB Validation <a class="header-anchor" href="#db-validation" aria-hidden="true">#</a></h2><p>The DB Validation feature leverages the existing <a href="/declarative-validation">Declarative Validation</a> infrastructure where it enables dynamically managing Request DTO Type and Property Validators from a RDBMS data source which immediately takes effect at runtime and can be optionally cached where they&#39;ll only need to be re-hydrated from the database after modification.</p>`,92),wn=n("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/W5OJAlOxH98",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""},null,-1),bn=n("p",null,[a("This feature can be easily added to existing host projects with the "),n("a",{href:"/mix-tool"},"mix"),a(" command:")],-1),xn=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x mix validation-source")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),qn=s(`<p>Which will add the <a href="/modular-startup">Modular Startup</a> validation configuration to your project, utilizing your existing configured database:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">assembly</span><span class="token punctuation">:</span> <span class="token class-name">HostingStartup</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyApp<span class="token punctuation">.</span>ConfigureValidation</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>

<span class="token keyword">namespace</span> <span class="token namespace">MyApp</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureValidation</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostingStartup</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// Add support for dynamically generated db rules</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> builder
        <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>services <span class="token operator">=&gt;</span> services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IValidationSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteValidationSource</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HostContext<span class="token punctuation">.</span>LocalCache<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ConfigureAppHost</span><span class="token punctuation">(</span>appHost <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// Create \`ValidationRule\` table if it doesn&#39;t exist in AppHost.Configure() or Modular Startup</span>
            appHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IValidationSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which the built-in <a href="/validation.html#validation-feature">Validation Feature</a> detects before registering the <code>GetValidationRules</code> and <code>ModifyValidationRules</code> management APIs and enables the DB Validation Admin UI:</p><div class="block p-4 rounded shadow"><img src="`+K+`"></div><h3 id="pre-populating-validation-rules" tabindex="-1">Pre-populating Validation Rules <a class="header-anchor" href="#pre-populating-validation-rules" aria-hidden="true">#</a></h3><p>A minimum set of validation rules can be enforced by adding them on Startup, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> validationSource <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IValidationSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
validationSource<span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
validationSource<span class="token punctuation">.</span><span class="token function">SaveValidationRules</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ValidateRule<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidateRule</span> <span class="token punctuation">{</span> Type<span class="token operator">=</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>CreateTable<span class="token punctuation">)</span><span class="token punctuation">,</span> Validator <span class="token operator">=</span> <span class="token string">&quot;NoRefTableReferences&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidateRule</span> <span class="token punctuation">{</span> Type<span class="token operator">=</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>MyRequest<span class="token punctuation">)</span><span class="token punctuation">,</span> Field<span class="token operator">=</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>MyRequest<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">,</span> Validator <span class="token operator">=</span> <span class="token string">&quot;NotNull&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidateRule</span> <span class="token punctuation">{</span> Type<span class="token operator">=</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>MyRequest<span class="token punctuation">)</span><span class="token punctuation">,</span> Field<span class="token operator">=</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>MyRequest<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">,</span> Validator <span class="token operator">=</span> <span class="token string">&quot;InclusiveBetween(13,100)&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This can also be used to support alternative data sources by pre-populating validation rules in an <code>MemoryValidationSource</code>, although the recommendation would be to implement <a href="https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/ValidationRule.cs" target="_blank" rel="noopener noreferrer">IValidationSourceAdmin</a> to get the full features of the Admin Validation UI.</p><h3 id="validation-ui" tabindex="-1">Validation UI <a class="header-anchor" href="#validation-ui" aria-hidden="true">#</a></h3><p>We can start adding validation rules after selecting the API we want to add them to, tag groups provide a quick view popup allowing APIs to be selected with just a mouse, whilst groups with a large number of APIs can benefit from the Autocomplete textbox results filter.</p><div class="block p-4 rounded shadow"><img src="`+$+'"></div><p>The quick links help navigating between related AutoQuery APIs that allows jumping between different APIs with the same Data Model.</p><p>In the validation editor you&#39;ll be able to create <strong>Type</strong> and <strong>Property</strong> Validation Rules that either make use of an existing <strong>Validator</strong> or you can enter a custom <a href="https://sharpscript.net" target="_blank" rel="noopener noreferrer">#Script</a> expression that validates to <code>true</code>. The DB Validationo UI is smart and will list all built-in and Custom Script Methods returning <code>ITypeValidator</code> or <code>IPropertyValidator</code> that&#39;s registered in the remote instance. The pre-defined list of validators are displayed in a list of &quot;quick pick&quot; buttons that enables fast adding/editing of validation rules.</p><h3 id="verified-rules" tabindex="-1">Verified Rules <a class="header-anchor" href="#verified-rules" aria-hidden="true">#</a></h3><p>The <code>ModifyValidationRules</code> API used to save validation rules performs a number of checks to ensure any Validation rules are accurate including executing the validator to make sure it returns the appropriate validator type and checking the syntax on any <strong>Script</strong> validation rules to ensure it&#39;s valid.</p><div class="block p-4 rounded shadow"><img src="'+Q+'"></div><div class="mt-4 block p-4 rounded shadow"><img src="'+J+'"></div><p>The <code>ModifyValidationRules</code> back-end API also takes care of invalidating the validation rule cache so that any saved Validators are immediately applied.</p><p>Despite being sourced from a DB, after the first access the validation rules are cached in memory where they&#39;d have similar performance profile to validators declaratively added on Request DTOs in code.</p><p>After you add your validation rules they&#39;ll be immediately enforced when calling the API, e.g. in <a href="/api-explorer">API Explorer</a> or <a href="/locode/">Locode</a>. Be mindful of what Validation Rule you&#39;re adding to which DTO, e.g. a validation rule added to <strong>CreateCategory</strong> API will <strong>only be applied</strong> when <strong>creating</strong> entities, e,g. not for full entity or partial field updates.</p><div class="mt-4 block p-4 rounded shadow"><img src="'+G+'"></div><h2 id="retiring-studio" tabindex="-1">Retiring Studio <a class="header-anchor" href="#retiring-studio" aria-hidden="true">#</a></h2><p>With DB Validation support now added, we&#39;ve completed the reimplementation of Studio Desktop App features within the ServiceStack library itself and its built-in <a href="/locode/">Locode</a>, <a href="/api-explorer">API Explorer</a> and <a href="/admin-ui">Admin UIs</a>.</p><p><img src="'+sn+'" alt=""></p><p>Whilst Studio enabled managing multiple instances of ServiceStack from a single Desktop App, the UI not being served from the same Web App hindered development as it couldn&#39;t use integrated browser auth and forced needing to manage multiple authentication sessions for each site and required proxying every request to attach the auth info. It&#39;s App Metadata also had to remain backwards-compatible to support multiple versions of ServiceStack which inhibited progress.</p><p>In contrast our new built-in UIs offer far superior development velocity and better utility for users which can reuse existing authenticated sessions, as a result we&#39;re retiring ServiceStack Studio and focusing development of all new UI features to the existing built-in UIs.</p><p><strong>ServiceStack v6.1.0</strong> will the last version of ServiceStack and <strong>app v6.0.4</strong> will be the last <code>app</code> tool version that will be able to run Studio:</p>',27),Sn=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"dotnet tool install --global app --version 6.0.4")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),Tn=s('<h2 id="locode" tabindex="-1">Locode <a class="header-anchor" href="#locode" aria-hidden="true">#</a></h2><h3 id="pre-populated-reference-data" tabindex="-1">Pre-populated Reference Data <a class="header-anchor" href="#pre-populated-reference-data" aria-hidden="true">#</a></h3><p>As we look for ways to improve productivity in Locode now pre-populates referential data from navigated references, e.g. when creating a new Job Application after navigating to a <a href="https://talent.locode.dev/locode/QueryJob" target="_blank" rel="noopener noreferrer">Job&#39;s Applications in Talent Blazor</a> it uses this context to pre-populate the Job it&#39;s filtered by:</p><p><img src="'+Y+'" alt=""></p><h3 id="support-for-large-apps" tabindex="-1">Support for Large Apps <a class="header-anchor" href="#support-for-large-apps" aria-hidden="true">#</a></h3><p>The built-in capability-based UI&#39;s are powered from your APIs metadata, as more of our Customers start to make use of these new UIs in their workflow we&#39;ve had reports from some customers with <a href="https://forums.servicestack.net/t/api-explorer-hangs-on-large-service-layer/10743" target="_blank" rel="noopener noreferrer">Large Apps (550+ APIs)</a> that the UIs started to hang their browsers when it tried to process the <strong>9.5MB</strong> of generated metadata.</p><p>To support Larger Apps we&#39;ve added the ability to restrict the metadata and UIs to only related APIs in <a href="/api-design#group-services-by-tag">user-defined Tag Groups</a> by adding <code>?IncludeTypes</code> to the URL, e.g:</p><p><strong>/ui/?IncludeTypes={tag}</strong></p><p>This follows the Include Types pattern where you can view multiple tag groups with:</p><p><strong>/ui/?IncludeTypes={tag1},{tag2}</strong></p><p>This feature is supported in all built-in UIs and is now integrated on the <strong>/metadata</strong> page where if you select a tag the API Explorer link will be updated with <strong>?IncludeTypes={tag}</strong>:</p><p><img src="'+X+`" alt=""></p><p>Where you&#39;ll now be able to open API Explorer restricted to APIs with that tag without needing to manually craft the URL.</p><h3 id="localize-metadata" tabindex="-1">Localize Metadata <a class="header-anchor" href="#localize-metadata" aria-hidden="true">#</a></h3><p>To assist with with creating Localized Locode UIs, all user-defined descriptive text is now routed through to your AppHost&#39;s <code>ResolveLocalizedString()</code> method which you can use to return a localized string for the current request, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ResolveLocalizedString</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name">IRequest</span> request <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> request <span class="token operator">!=</span> <span class="token keyword">null</span> 
        <span class="token punctuation">?</span> <span class="token function">MyResolveLocalizedString</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span>HttpHeaders<span class="token punctuation">.</span>AcceptLanguage<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> text<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="simplified-apiform-apis" tabindex="-1">Simplified ApiForm APIs <a class="header-anchor" href="#simplified-apiform-apis" aria-hidden="true">#</a></h2><p>The new <code>ApiForm</code> APIs have added more ergonomic overloads when submitting mixed Request DTO + Form Data requests where the API URL now able to be inferred from the Request DTO, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token function">JsonApiClient</span><span class="token punctuation">(</span>BaseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultipartFormDataContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddFile</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>MultipartRequest<span class="token punctuation">.</span>ProfileUrl<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;profile.png&quot;</span><span class="token punctuation">,</span> imageStream<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddFile</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>MultipartRequest<span class="token punctuation">.</span>ResumeUrl<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">&quot;resume.pd&quot;</span><span class="token punctuation">,</span>   resumeStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultipartRequest</span> <span class="token punctuation">{</span>
    Id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    String <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span>
    Contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Contact</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;First&quot;</span><span class="token punctuation">,</span> LastName <span class="token operator">=</span> <span class="token string">&quot;Last&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> api <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">ApiForm</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="postfileswithrequest-uses-preferred-http-method" tabindex="-1">PostFilesWithRequest uses preferred HTTP Method <a class="header-anchor" href="#postfileswithrequest-uses-preferred-http-method" aria-hidden="true">#</a></h2><p>The <a href="/csharp-client#multiple-file-uploads">PostFilesWithRequest</a> APIs for uploading files in addition to Request DTOs now uses your <a href="/api-design#all-apis-have-a-preferred-default-method">APIs preferred HTTP Method</a> if defined, so you can now use these APIs to make <strong>PUT</strong> and <strong>PATCH</strong> File Upload + Requset DTO requests.</p>`,21),Nn='{"title":"ServiceStack v6.2","description":"","frontmatter":{"title":"ServiceStack v6.2"},"headers":[{"level":2,"title":"Tailwind Components","slug":"tailwind-components"},{"level":3,"title":"Blazor Tailwind UI Components","slug":"blazor-tailwind-ui-components"},{"level":3,"title":"Bookings CRUD Example","slug":"bookings-crud-example"},{"level":3,"title":"Blazor WASM App","slug":"blazor-wasm-app"},{"level":3,"title":"New FileUpload Control","slug":"new-fileupload-control"},{"level":3,"title":"Expensive Managed Databases","slug":"expensive-managed-databases"},{"level":3,"title":"Boringly Simple","slug":"boringly-simple"},{"level":3,"title":"The Right Time for Server-Side SQLite","slug":"the-right-time-for-server-side-sqlite"},{"level":3,"title":"Commercially supported thanks to Fly.io","slug":"commercially-supported-thanks-to-fly-io"},{"level":3,"title":"GitHub Action Workflow","slug":"github-action-workflow"},{"level":2,"title":"Admin UI","slug":"admin-ui"},{"level":3,"title":"Dashboard","slug":"dashboard"},{"level":2,"title":"Request Logging & Profiling","slug":"request-logging-profiling"},{"level":3,"title":"Configuration","slug":"configuration"},{"level":3,"title":"Request Logging UI","slug":"request-logging-ui"},{"level":2,"title":"Profiling UI","slug":"profiling-ui"},{"level":3,"title":"SQL Profiling","slug":"sql-profiling"},{"level":3,"title":"Redis Profiling","slug":"redis-profiling"},{"level":3,"title":"Purchase API Events Example","slug":"purchase-api-events-example"},{"level":3,"title":"HttpClient Profiling","slug":"httpclient-profiling"},{"level":3,"title":"JsonApiClient Profiling","slug":"jsonapiclient-profiling"},{"level":3,"title":"MQ Profiling","slug":"mq-profiling"},{"level":3,"title":"Service Gateway Profiling","slug":"service-gateway-profiling"},{"level":3,"title":"Profile Custom Info","slug":"profile-custom-info"},{"level":3,"title":"Profile Custom Metadata","slug":"profile-custom-metadata"},{"level":3,"title":"Access Diagnostic Events in Code","slug":"access-diagnostic-events-in-code"},{"level":3,"title":"Request Logs Configuration","slug":"request-logs-configuration"},{"level":3,"title":"Profiling Configuration","slug":"profiling-configuration"},{"level":2,"title":"DB Validation","slug":"db-validation"},{"level":3,"title":"Pre-populating Validation Rules","slug":"pre-populating-validation-rules"},{"level":3,"title":"Validation UI","slug":"validation-ui"},{"level":3,"title":"Verified Rules","slug":"verified-rules"},{"level":2,"title":"Retiring Studio","slug":"retiring-studio"},{"level":2,"title":"Locode","slug":"locode"},{"level":3,"title":"Pre-populated Reference Data","slug":"pre-populated-reference-data"},{"level":3,"title":"Support for Large Apps","slug":"support-for-large-apps"},{"level":3,"title":"Localize Metadata","slug":"localize-metadata"},{"level":2,"title":"Simplified ApiForm APIs","slug":"simplified-apiform-apis"},{"level":2,"title":"PostFilesWithRequest uses preferred HTTP Method","slug":"postfileswithrequest-uses-preferred-http-method"}],"relativePath":"releases/v6_2.md"}',_n={},Hn=Object.assign(_n,{__name:"v6_2",setup(Rn){return(An,Dn)=>(Z(),nn("div",null,[an,n("div",tn,[n("div",null,[t(o(e),{icon:"simple-icons:blazor",class:"w-40 h-40 text-purple-600 mr-8"}),t(o(e),{icon:"logos:tailwindcss-icon",class:"w-44 h-44"})]),en]),on,pn,cn,t(p,{repo:"NetCoreTemplates/blazor-server",repo2:"NetCoreTemplates/blazor-tailwind",class:"pb-8"}),ln,rn,un,kn,dn,mn,gn,hn,fn,yn,vn,wn,bn,xn,qn,Sn,Tn]))}});export{Nn as __pageData,Hn as default};
