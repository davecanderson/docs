import"./chunks/iconify.2272db1b.js";import{_ as b}from"./chunks/ApiReference.8128d97b.js";import{m as q}from"./chunks/metadata.46b41fb9.js";import{Z as h,r as l,D as p,o as w,c as _,e as s,q as o,d as e,a as u,b as t}from"./app.2aea72c0.js";const v=e("link",{rel:"stylesheet",href:"/css/tailwind-components.css"},null,-1),A=u(`<p>The <code>Combobox</code> component provides an Autocomplete Input optimized for searching a List of string values, Key Value Pairs or Object Dictionary, e.g:</p><div class="language-ts"><pre><code><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;grid grid-cols-12 gap-6&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Combobox id<span class="token operator">=</span><span class="token string">&quot;Strings&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;col-span-4&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;strings&quot;</span> <span class="token operator">:</span>values<span class="token operator">=</span><span class="token string">&quot;[&#39;Alpha&#39;,&#39;Bravo&#39;,&#39;Charlie&#39;]&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Combobox id<span class="token operator">=</span><span class="token string">&quot;Object&quot;</span>  <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;col-span-4&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;objects&quot;</span> <span class="token operator">:</span>options<span class="token operator">=</span><span class="token string">&quot;{ A:&#39;Alpha&#39;, B:&#39;Bravo&#39;, C:&#39;Charlie&#39; }&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Combobox id<span class="token operator">=</span><span class="token string">&quot;Pairs&quot;</span>   <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;col-span-4&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;pairs&quot;</span>   label<span class="token operator">=</span><span class="token string">&quot;Multiple from Pairs&quot;</span> multiple
    <span class="token operator">:</span>entries<span class="token operator">=</span><span class="token string">&quot;[{key:&#39;A&#39;,value:&#39;Alpha&#39;}, {key:&#39;B&#39;,value:&#39;Bravo&#39;}, {key:&#39;C&#39;,value:&#39;Charlie&#39;}]&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre></div>`,2),C={class:"not-prose grid grid-cols-12 gap-6"},x=e("p",null,[t("Which supports populating both a single string value or multiple strings in an Array with "),e("strong",null,"multiple"),t(" property.")],-1),V=u(`<p>Combobox components can also be used in <a href="/vue/gallery/autoform">Auto Form Components</a> on <code>string</code> or string collection properties with the <code>[Input(Type=&quot;combobox&quot;)]</code> <a href="/locode/declarative#ui-metadata-attributes">declarative UI Attribute</a> on C# Request DTOs, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComboBoxExamples</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>ComboBoxExamples<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IPost</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;combobox&quot;</span><span class="token punctuation">,</span> Options <span class="token operator">=</span> <span class="token string">&quot;{ allowableValues:[&#39;Alpha&#39;,&#39;Bravo&#39;,&#39;Charlie&#39;] }&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> SingleClientValues <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;combobox&quot;</span><span class="token punctuation">,</span> Options <span class="token operator">=</span> <span class="token string">&quot;{ allowableValues:[&#39;Alpha&#39;,&#39;Bravo&#39;,&#39;Charlie&#39;] }&quot;</span><span class="token punctuation">,</span> Multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> MultipleClientValues <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;combobox&quot;</span><span class="token punctuation">,</span> EvalAllowableValues <span class="token operator">=</span> <span class="token string">&quot;[&#39;Alpha&#39;,&#39;Bravo&#39;,&#39;Charlie&#39;]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> SingleServerValues <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;combobox&quot;</span><span class="token punctuation">,</span> EvalAllowableValues <span class="token operator">=</span> <span class="token string">&quot;AppData.AlphaValues&quot;</span><span class="token punctuation">,</span> Multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> MultipleServerValues <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;combobox&quot;</span><span class="token punctuation">,</span> EvalAllowableEntries <span class="token operator">=</span> <span class="token string">&quot;{ A:&#39;Alpha&#39;, B:&#39;Bravo&#39;, C:&#39;Charlie&#39; }&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> SingleServerEntries <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;combobox&quot;</span><span class="token punctuation">,</span> EvalAllowableEntries <span class="token operator">=</span> <span class="token string">&quot;AppData.AlphaDictionary&quot;</span><span class="token punctuation">,</span> Multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> MultipleServerEntries <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which can then be rendered with:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AutoForm</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ComboBoxExamples<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div>`,4),f=u(`<p><strong>Combobox Options</strong></p><p>Each property shows a different way of populating the Combobox&#39;s optional values, they can be populated from a JavaScript Object literal using <code>Options</code> or on the server with a <a href="https://sharpscript.net" target="_blank" rel="noopener noreferrer">#Script Expression</a> where they can be populated from a static list or from a C# class as seen in the examples referencing <code>AppData</code> properties:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppData</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> AlphaValues <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> AlphaDictionary <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> AlphaKeyValuePairs <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which are populated on in the AppHost on Startup with:</p><div class="language-csharp"><pre><code>ScriptContext<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>AppData<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppData</span>
<span class="token punctuation">{</span>
    AlphaValues <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;Alpha&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bravo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Charlie&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    AlphaDictionary <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Alpha&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Bravo&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    AlphaKeyValuePairs <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Alpha&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Bravo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Which can alternatively be populated from a dynamic source like an RDBMS table.</p><p>As C# Dictionaries have an undetermined sort order, you can use a <code>List&lt;KeyValuePair&lt;string, string&gt;&gt;</code> instead when you need to display an ordered list of Key/Value pairs.</p>`,7),M='{"title":"Combobox Component","description":"","frontmatter":{"title":"Combobox Component"},"headers":[],"relativePath":"vue/gallery/combobox.md"}',B={},O=Object.assign(B,{__name:"combobox",setup(T){const{setMetadata:g}=h();g(q);const r=l(),i=l(),k=l([]);return(S,n)=>{const d=p("Breadcrumb"),m=p("Breadcrumbs"),c=p("Combobox",!0),y=p("AutoForm");return w(),_("div",null,[v,s(m,{class:"not-prose my-4","home-href":"/vue/"},{default:o(()=>[s(d,{href:"/vue/gallery/"},{default:o(()=>[t("gallery")]),_:1}),s(d,null,{default:o(()=>[t("Combobox")]),_:1})]),_:1}),A,e("div",C,[s(c,{id:"Strings",class:"col-span-4",modelValue:r.value,"onUpdate:modelValue":n[0]||(n[0]=a=>r.value=a),values:["Alpha","Bravo","Charlie"]},null,8,["modelValue"]),s(c,{id:"Object",class:"col-span-4",modelValue:i.value,"onUpdate:modelValue":n[1]||(n[1]=a=>i.value=a),options:{A:"Alpha",B:"Bravo",C:"Charlie"}},null,8,["modelValue"]),s(c,{id:"Pairs",class:"col-span-4",modelValue:k.value,"onUpdate:modelValue":n[2]||(n[2]=a=>k.value=a),label:"Multiple from Pairs",multiple:"",entries:[{key:"A",value:"Alpha"},{key:"B",value:"Bravo"},{key:"C",value:"Charlie"}]},null,8,["modelValue"])]),x,s(b,{component:"Combobox"},{default:o(()=>[t("Auto Forms")]),_:1}),V,s(y,{type:"ComboBoxExamples",class:"not-prose mb-4"}),f])}}});export{M as __pageData,O as default};
