import{_ as s,o as n,c as a,a as e}from"./app.2aea72c0.js";const y='{"title":"Client/Server Request Compression","description":"","frontmatter":{"slug":"compression"},"headers":[{"level":2,"title":"Client/Server Request Compression","slug":"client-server-request-compression"},{"level":2,"title":"[CompressResponse] Attribute","slug":"compressresponse-attribute"},{"level":2,"title":"Static File Compression","slug":"static-file-compression"},{"level":2,"title":"Brotli Compression","slug":"brotli-compression"},{"level":3,"title":"Brotli disabled for Firefox","slug":"brotli-disabled-for-firefox"}],"relativePath":"compression.md"}',t={},o=e(`<h2 id="client-server-request-compression" tabindex="-1">Client/Server Request Compression <a class="header-anchor" href="#client-server-request-compression" aria-hidden="true">#</a></h2><p>In addition to <a href="/http-caching#server-caching">optimized cached Server Responses</a> you can also elect to compress HTTP Requests in any C#/.NET Service Clients by specifying the Compression Type you wish to use, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RequestCompressionType <span class="token operator">=</span> CompressionTypes<span class="token punctuation">.</span>GZip<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonHttpClient</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RequestCompressionType <span class="token operator">=</span> CompressionTypes<span class="token punctuation">.</span>Deflate<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Request</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Where sending any HTTP Request containing a Request Body (e.g. POST/PUT) will send a compressed Request body to the Server where it&#39;s now able to be transparently decompressed and deserialized into your Request DTO.</p><h2 id="compressresponse-attribute" tabindex="-1"><code>[CompressResponse]</code> Attribute <a class="header-anchor" href="#compressresponse-attribute" aria-hidden="true">#</a></h2><p>You can now selectively choose which Services should be compressed with the new <code>[CompressResponse]</code> attribute to compress responses for clients which support compression, which can be applied to most Response Types, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CompressResponse</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompressedServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressDto</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CompressExamplesResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressString</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressBytes</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">.</span><span class="token function">ToUtf8Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressStream</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">.</span><span class="token function">ToUtf8Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressFile</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResult</span><span class="token punctuation">(</span>VirtualFileSources<span class="token punctuation">.</span><span class="token function">GetFile</span><span class="token punctuation">(</span><span class="token string">&quot;/foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressAnyHttpResult</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CompressExamplesResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// DTO</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResult</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// string</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResult</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">.</span><span class="token function">ToUtf8Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bytes</span>
        <span class="token comment">//etc</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>using <code>[CompressResponse]</code> is unnecessary when returning <a href="/http-caching">cached responses</a> as ServiceStack automatically caches and returns the most optimal Response - typically compressed bytes for clients that supports compression</p></div><h2 id="static-file-compression" tabindex="-1">Static File Compression <a class="header-anchor" href="#static-file-compression" aria-hidden="true">#</a></h2><p>ServiceStack can also be configured to compress static files with specific file extensions that are larger than specific size with the new opt-in Config options below:</p><div class="language-csharp"><pre><code><span class="token function">SetConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HostConfig</span> <span class="token punctuation">{</span>
    CompressFilesWithExtensions <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// (optional), only compress .js or .css files &gt; 10k</span>
    CompressFilesLargerThanBytes <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When more fine-grained logic is needed you can override <code>ShouldCompressFile()</code> in your AppHost to choose which static files you want to compress on a per-file basis, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ShouldCompressFile</span><span class="token punctuation">(</span><span class="token class-name">IVirtualFile</span> file<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">ShouldCompressFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">||</span> file<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;large.csv&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="when-to-enable-static-file-compression" tabindex="-1">When to enable Static File Compression <a class="header-anchor" href="#when-to-enable-static-file-compression" aria-hidden="true">#</a></h4><p>It&#39;s more optimal to configure static file compression on the native Web Server that&#39;s hosting your ServiceStack App than in managed code. You can use <a href="http://www.telerik.com/fiddler" target="_blank" rel="noopener noreferrer">Fiddler</a> to check if your Web Server (e.g. IIS) is already compressing static files in which case you won&#39;t want to configure ServiceStack to do it.</p><p>No compression is added when running ServiceStack in a self-host, which will benefit from enabling Static File Compression.</p><h2 id="brotli-compression" tabindex="-1">Brotli Compression <a class="header-anchor" href="#brotli-compression" aria-hidden="true">#</a></h2><p><strong>.NET 6</strong> Apps have access to is .NET Core&#39;s <code>BrotliStream</code> which is fully supported throughout ServiceStack, e.g. in Cached &amp; Compressed Responses as well as sending compressed Request payloads in Service Clients.</p><p>The Brotli implementation is encapsulated within ServiceStack&#39;s compression abstractions whose implementations are contained within:</p><ul><li><strong>BrotliCompressor</strong> - Brotli (br)</li><li><strong>DeflateCompressor</strong> - Deflate (deflate)</li><li><strong>GZipCompressor</strong> - GZIP (gzip)</li></ul><p>Which all implement the same substitutable interface:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IStreamCompressor</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> Encoding <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">Compress</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name">Encoding<span class="token punctuation">?</span></span> encoding <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">Compress</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">Stream</span> <span class="token function">Compress</span><span class="token punctuation">(</span><span class="token class-name">Stream</span> outputStream<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> leaveOpen<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Decompress</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> zipBuffer<span class="token punctuation">,</span> <span class="token class-name">Encoding<span class="token punctuation">?</span></span> encoding <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token return-type class-name">Stream</span> <span class="token function">Decompress</span><span class="token punctuation">(</span><span class="token class-name">Stream</span> zipBuffer<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> leaveOpen<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">DecompressBytes</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> zipBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>That are managed with <code>StreamCompressors</code> in the <strong>ServiceStack.Client</strong> package:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StreamCompressors</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Is there a compressor registered with this encoding?   </span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">SupportsEncoding</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// return the registered IStreamCompressor implementation for for this</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IStreamCompressor<span class="token punctuation">?</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Assert there exists a IStreamCompressor for this encoding</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IStreamCompressor</span> <span class="token function">GetRequired</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Register a new compressor for a specific encoding (defaults: gzip, deflate, br*) .NET6+</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> encoding<span class="token punctuation">,</span> <span class="token class-name">IStreamCompressor</span> compressor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Remove compression support for this encoding</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Containing pre-registered implementations of all popular Brotli, Deflate &amp; gzip HTTP Compression algorithms so there&#39;s typically no need to add any yourself.</p><p>The preferred compression implementation for a request can be retrieved with <code>IRequest.GetCompressor()</code> which determines the implementation to use based on the overridable <code>GetCompressionType(IRequest request)</code> method in your AppHost.</p><h3 id="brotli-disabled-for-firefox" tabindex="-1">Brotli disabled for Firefox <a class="header-anchor" href="#brotli-disabled-for-firefox" aria-hidden="true">#</a></h3><p>Brotli is currently not returned for Firefox browsers (by <strong>UserAgent</strong> detection in <code>AppHost.GetCompressionType()</code>) which for a yet to be determined reason is the only modern browser that doesn&#39;t support .NET&#39;s <code>BrotliStream</code> output. We&#39;ll continue to investigate and remove the restriction when resolved.</p>`,28),p=[o];function c(l,i,r,u,k,d){return n(),a("div",null,p)}var h=s(t,[["render",c]]);export{y as __pageData,h as default};
