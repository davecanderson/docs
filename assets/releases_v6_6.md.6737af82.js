import{_ as w}from"./chunks/mjs-intellisense.7d2acf14.js";import{I as e}from"./chunks/iconify.2272db1b.js";import{_ as b}from"./chunks/VueTailwindTemplates.474d377f.js";import{_ as q}from"./chunks/VueComponentGallery.3bc82364.js";import{f as g,o as c,c as l,A as h,r as v,u as a,C as x,D as d,e as s,q as m,b as i,E as S,B as _,d as n,Z as j,a as p}from"./app.2aea72c0.js";import"./chunks/data.783f420d.js";import{m as T}from"./chunks/metadata.46b41fb9.js";var A="/assets/js-modules-dev-console.6aad9839.png",C="/assets/js-modules-bookings-crud.e3529d05.png",I="/assets/js-modules-bookings-crud-update.cafc7cd2.png",P="/assets/mjs-update-reference-vs.53e48ae3.png",M="/assets/mjs-update-reference-rider.183c50d9.png",V="/assets/edit-contact-validation.8628c2aa.png",R="/assets/file-input-single.f2e4987f.png",D="/assets/file-input-multiple.11beb2ca.png",J="/assets/autoeditform-updatecontact.b5abd13e.png",E="/assets/taginput-examples.ca418786.png",z="/assets/autocomplete-examples.49bc938e.png";const F=g({__name:"Hello",props:{name:null},setup(u){return(t,k)=>(c(),l("b",null,"Hello, "+h(u.name)+"!",1))}}),B=g({__name:"Counter",setup(u){let t=v(1);return(k,o)=>(c(),l("b",{onClick:o[0]||(o[0]=r=>x(t)?t.value++:t++)},"Counter "+h(a(t)),1))}}),H=n("div",{class:"p-8"},"Hello @servicestack/vue!",-1),N=g({__name:"Plugin",setup(u){const t=v(!1);return(k,o)=>{const r=d("PrimaryButton"),f=d("ModalDialog");return c(),l("div",null,[s(r,{onClick:o[0]||(o[0]=y=>t.value=!0)},{default:m(()=>[i("Open Modal")]),_:1}),t.value?(c(),S(f,{key:0,onDone:o[1]||(o[1]=y=>t.value=!1)},{default:m(()=>[H]),_:1})):_("",!0)])}}}),O=n("link",{rel:"stylesheet",href:"/css/not-prose.css"},null,-1),U=n("link",{rel:"stylesheet",href:"/css/release.css"},null,-1),W=p('<p>We&#39;re got a feature-packed JavaScript focus release that embraces <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer">JavaScript modules</a> support in modern browsers to enable a simplified rapid development experience without the disadvantages that have plagued Single Page Apps (SPA) development up till now.</p><h3 id="javascript-modules" tabindex="-1">JavaScript Modules <a class="header-anchor" href="#javascript-modules" aria-hidden="true">#</a></h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer">JavaScript modules</a> have revolutionized the way we write and structure code in modern browsers which provide a number of advantages including better code organization and reuse, improved maintainability, and increased modularity and scalability which has seen it become a popular choice for building complex, scalable web applications.</p><p>With modules, developers can create small, focused pieces of code that can be easily imported and used in other parts of their application without needing to rely on any complex tooling. This results in a cleaner, more organized codebase that is easier to maintain over time.</p><h2 id="modern-vue-js-tailwind-net-apps" tabindex="-1">Modern Vue.js Tailwind .NET Apps <a class="header-anchor" href="#modern-vue-js-tailwind-net-apps" aria-hidden="true">#</a></h2><p>Our new templates builds upon JS Modules with a number of new integrated features to maximize productivity and performance for this revolutionary new approach to Web App development that offers new dramatically simplified and friction-free development experience without the need to rely on any heavy npm build tools - which we believe offers the best mix of productivity and simplicity available today.</p><p>Spearheaded by our exciting new <strong>@servicestack/vue</strong> <a href="/vue/">Vue.js Tailwind Components</a>, we&#39;ve created a number of new Vue.js Tailwind project templates preconfigured with a minimal set of libraries to make you immediately productive out-of-the-box.</p>',7),L={id:"vue-templates",class:"mt-12 flex flex-col items-center"},G=n("div",{class:"relative bg-white py-4"},[n("div",{class:"mx-auto max-w-md px-4 text-center sm:max-w-3xl sm:px-6 lg:max-w-7xl lg:px-8"},[n("p",{class:"mt-2 text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl"},"Vue.js Tailwind Templates")])],-1),$=p('<h2 id="vue-js-tailwind-live-demos" tabindex="-1">Vue.js Tailwind Live Demos <a class="header-anchor" href="#vue-js-tailwind-live-demos" aria-hidden="true">#</a></h2><p>All Razor Pages and MVC templates utilize the JS Modules support in modern browsers to avoid any needing any npm build system, for access to more advanced npm library features and to learn about Jamstack CDN and SSG benefits checkout <a href="/templates-jamstack">Jamstack Templates docs</a>.</p><div class="not-prose mt-8 grid grid-cols-2 gap-4"><a class="block group border hover:border-indigo-700" href="https://vue-mjs.web-templates.io"><img class="p-2" src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/vue-mjs.png"><div class="bg-gray-50 text-gray-600 font-semibold group-hover:bg-indigo-700 group-hover:text-white text-center py-2">vue-mjs.web-templates.io</div></a><a class="block group border hover:border-indigo-700" href="https://razor-tailwind.web-templates.io"><img class="p-2" src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/razor-tailwind.png"><div class="bg-gray-50 text-gray-600 font-semibold group-hover:bg-indigo-700 group-hover:text-white text-center py-2">razor-tailwind.web-templates.io</div></a><a class="block group border hover:border-indigo-700" href="https://mvc-tailwind.web-templates.io"><img class="p-2" src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/mvc-tailwind.png"><div class="bg-gray-50 text-gray-600 font-semibold group-hover:bg-indigo-700 group-hover:text-white text-center py-2">mvc-tailwind.web-templates.io</div></a><a class="block group border hover:border-indigo-700" href="https://vue-vite.jamstacks.net"><img class="p-2 max-h-[301px]" src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/vue-vite.png"><div class="bg-gray-50 text-gray-600 font-semibold group-hover:bg-indigo-700 group-hover:text-white text-center py-2">vue-vite.jamstacks.net</div></a><a class="block group border hover:border-indigo-700" href="https://vue-ssg.jamstacks.net"><img class="p-2" src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/vue-ssg.png"><div class="bg-gray-50 text-gray-600 font-semibold group-hover:bg-indigo-700 group-hover:text-white text-center py-2">vue-ssg.jamstacks.net</div></a><a class="block group border hover:border-indigo-700" href="https://web-tailwind.web-templates.io"><img class="p-2" src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/web-tailwind.png"><div class="bg-gray-50 text-gray-600 font-semibold group-hover:bg-indigo-700 group-hover:text-white text-center py-2">web-tailwind.web-templates.io</div></a></div><p>To help choosing which template to start with, here&#39;s a quick summary of their differences:</p><ul><li><strong>vue-mjs</strong> - Flagship Vue.mjs template complete with <a href="/ormlite/">OrmLite</a>, <a href="/autoquery">AutoQuery</a>, <a href="https://htmx.org/attributes/hx-boost/" target="_blank" rel="noopener noreferrer">boosted htmx</a> links &amp; <a href="https://vue-mjs.web-templates.io/blog/prerendering" target="_blank" rel="noopener noreferrer">static pre-rendered blogs</a></li><li><strong>razor-tailwind</strong> - Simpler Razor Pages Template without a configured DB or static pre-rendered blogs</li><li><strong>mvc-tailwind</strong> - Want to use MVC Identity Auth and Entity Framework</li><li><strong>web-tailwind</strong> - Empty tailwind template who don&#39;t want to use Razor Pages or MVC</li><li><strong>vue-vite</strong> - Want to use TypeScript in a simpler JAMStack Vite SPA App</li><li><strong>vue-ssg</strong> - Want to use TypeScript in an advanced JAMStack Vite SSG App</li></ul><p>For a more in-depth look we&#39;ve created an overview covering the differences between the Razor Pages &amp; MVC templates:</p>',6),Q=n("div",{class:"flex justify-center"},[n("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/SyppvQB7IPs",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:""})],-1),Z=n("h3",{id:"vue-js-bootstrap-razor-pages-template",tabindex:"-1"},[i("Vue.js Bootstrap Razor Pages Template "),n("a",{class:"header-anchor",href:"#vue-js-bootstrap-razor-pages-template","aria-hidden":"true"},"#")],-1),Y=n("p",null,"For devs preferring Bootstrap, we've also created a new Razor Pages template integrated with JS Modules:",-1),K={class:"flex justify-center"},X=n("div",{class:"not-prose flex justify-center"},[n("a",{class:"block max-w-xl group border hover:border-indigo-700",href:"https://razor-pages.web-templates.io"},[n("img",{class:"p-2",src:"https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/razor-pages.png"}),n("div",{class:"bg-gray-50 text-gray-600 font-semibold group-hover:bg-indigo-700 group-hover:text-white text-center py-2"},"razor-pages.web-templates.io")])],-1),nn=n("p",null,"Install with:",-1),sn=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x new razor-pages MyApp")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),an=p(`<h2 id="js-modules-quick-look" tabindex="-1">JS Modules Quick Look <a class="header-anchor" href="#js-modules-quick-look" aria-hidden="true">#</a></h2><p>We&#39;ll take a quick glimpse on some of the power of JS Modules with the introduction of our new <strong>JS Module ES6 class DTOs</strong> feature, where you&#39;ll be able to walk up to any ServiceStack v6.6+ Web App, import some external modules independent from the rest of the page, then call end-to-end typed APIs without using any pre existing JS libraries or build tools in sight!</p><p>The Blazor Server live demo at <a href="https://blazor-server.jamstacks.net" target="_blank" rel="noopener noreferrer">blazor-server.jamstacks.net</a> is a good one to try this on given it&#39;s built on an entirely different server rendered technology stack. To try it out press <code>F12</code> to open a dev console then paste in the sample code below:</p><div class="language-js"><pre><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&#39;beforeend&#39;</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div style=&quot;position:fixed;right:1em;top:5em&quot;&gt;
    &lt;input type=&quot;text&quot; id=&quot;txtName&quot;&gt;
    &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;
&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

<span class="token keyword">const</span> ServiceStack <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;https://unpkg.com/@servicestack/client@2/dist/servicestack-client.mjs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> dtos <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;/types/mjs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> JsonApiClient<span class="token punctuation">,</span> on<span class="token punctuation">,</span> $1 <span class="token punctuation">}</span> <span class="token operator">=</span> ServiceStack
<span class="token keyword">const</span> client <span class="token operator">=</span> JsonApiClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;#txtName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">keyup</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">dtos<span class="token punctuation">.</span>Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span>el<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">$1</span><span class="token punctuation">(</span><span class="token string">&#39;#result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> api<span class="token punctuation">.</span>response<span class="token punctuation">.</span>result
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>After the browser asynchronously loads the modules you should see a working text input which calls its <a href="https://blazor-server.jamstacks.net/ui/Hello" target="_blank" rel="noopener noreferrer">Hello API</a> on each key press:</p><p><a href="https://blazor-server.jamstacks.net"><div class="my-8 mx-auto max-w-xl block flex justify-center shadow hover:shadow-lg rounded py-1"><img class="p-4" src="`+A+`"></div></a></p><h3 id="dynamically-loading-multiple-js-modules" tabindex="-1">Dynamically Loading Multiple JS Modules <a class="header-anchor" href="#dynamically-loading-multiple-js-modules" aria-hidden="true">#</a></h3><p>Ok that&#39;s cool, but let&#39;s see how far we can go with it and introduce the new <a href="/vue/">Vue.js Tailwind Components</a> into the mix to see how close we can get to recreating some of this Blazor Server App&#39;s functionality.</p><p>Lets head over to the Bookings page and Sign In:</p><p><a class="block text-2xl text-center py-4 font-semibold" href="https://blazor-server.jamstacks.net/secure/bookings" target="_blank">blazor-server.jamstacks.net/secure/bookings</a></p><p>Then press <code>F12</code> to open the dev console again to paste and run the code below:</p><div class="language-js"><pre><code><span class="token keyword">const</span> im <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
im<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;importmap&#39;</span><span class="token punctuation">;</span>
im<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://unpkg.com/vue@3/dist/vue.esm-browser.prod.js&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;@servicestack/client&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://unpkg.com/@servicestack/client@2/dist/servicestack-client.min.mjs&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;@servicestack/vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://unpkg.com/@servicestack/vue@3/dist/servicestack-vue.min.mjs&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span>

<span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ServiceStack <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@servicestack/client&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ServiceStackVue <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@servicestack/vue&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> dtos <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;/types/mjs&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> BookingsApp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  &lt;div class=&quot;sm:max-w-fit p-4 m-4&quot;&gt;
    &lt;h3 class=&quot;ml-4 text-center text-2xl font-medium&quot;&gt;Vue.js Bookings&lt;/h3&gt;
    &lt;AutoCreateForm v-if=&quot;create&quot; type=&quot;CreateBooking&quot; @done=&quot;done&quot; @save=&quot;done&quot; /&gt;
    &lt;AutoEditForm v-else-if=&quot;edit&quot; type=&quot;UpdateBooking&quot; deleteType=&quot;DeleteBooking&quot; v-model=&quot;edit&quot; 
      @done=&quot;done&quot; @save=&quot;done&quot; @delete=&quot;done&quot; /&gt;
    &lt;OutlineButton @click=&quot;reset({ create:true })&quot;&gt;New Booking&lt;/OutlineButton&gt;
    &lt;DataGrid :items=&quot;bookings&quot; type=&quot;Booking&quot; 
      selected-columns=&quot;id,name,roomType,roomNumber,cost,bookingStartDate,bookingEndDate,couponId&quot; 
      :header-titles=&quot;{roomNumber:&#39;Room No&#39;,bookingStartDate:&#39;Start Date&#39;,bookingEndDate:&#39;End Date&#39;,couponId:&#39;Voucher&#39;}&quot;
      :visible-from=&quot;{ name:&#39;xl&#39;, bookingStartDate:&#39;sm&#39;, bookingEndDate:&#39;xl&#39;, couponId:&#39;xl&#39; }&quot;
      @row-selected=&quot;editId = editId == $event.id ? null : $event.id&quot; :is-selected=&quot;row =&gt; editId == row.id&quot; /&gt;
  &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
    <span class="token keyword">const</span> <span class="token punctuation">{</span> useClient<span class="token punctuation">,</span> useAuth<span class="token punctuation">,</span> useFormatters <span class="token punctuation">}</span> <span class="token operator">=</span> ServiceStackVue
    <span class="token keyword">const</span> <span class="token punctuation">{</span> QueryBookings <span class="token punctuation">}</span> <span class="token operator">=</span> dtos

    <span class="token keyword">const</span> create <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> editId <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> edit <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> bookings <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> currency <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFormatters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryBookings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bookings<span class="token punctuation">.</span>value <span class="token operator">=</span> api<span class="token punctuation">.</span>response<span class="token punctuation">.</span>results <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">onMounted</span><span class="token punctuation">(</span>refresh<span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token parameter">args<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      create<span class="token punctuation">.</span>value <span class="token operator">=</span> args<span class="token punctuation">.</span>create <span class="token operator">??</span> <span class="token boolean">false</span>
      editId<span class="token punctuation">.</span>value <span class="token operator">=</span> args<span class="token punctuation">.</span>editId <span class="token operator">??</span> <span class="token keyword">undefined</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">watch</span><span class="token punctuation">(</span>editId<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>editId<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryBookings</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> editId<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          edit<span class="token punctuation">.</span>value <span class="token operator">=</span> api<span class="token punctuation">.</span>response<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      edit<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">{</span> create<span class="token punctuation">,</span> editId<span class="token punctuation">,</span> edit<span class="token punctuation">,</span> bookings<span class="token punctuation">,</span> reset<span class="token punctuation">,</span> done<span class="token punctuation">,</span> currency <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>BookingsApp<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;client&#39;</span><span class="token punctuation">,</span> ServiceStack<span class="token punctuation">.</span>JsonApiClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ServiceStackVue<span class="token punctuation">.</span>default<span class="token punctuation">)</span>
<span class="token keyword">await</span> ServiceStackVue<span class="token punctuation">.</span><span class="token function">useMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&#39;beforeend&#39;</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Give it a moment to load all the modules and you should see a shiny new freshly baked Vue.js data grid infiltrating the Blazor Server App!</p><div class="mb-16"><a href="https://blazor-server.jamstacks.net/secure/bookings" target="_blank"><img class="w-[1330px] -ml-40" style="max-width:none;" src="`+C+'"></a></div><p>This isn&#39;t just cosmetic, it&#39;s a full CRUD Bookings App with responsive formatted <a href="/vue/gallery/datagrid">DataGrid</a> columns, API-enabled <a href="/vue/gallery/autoform">AutoForm</a> components powered by the App&#39;s <a href="/vue/use-metadata">API Metadata</a> with populated Enum drop downs, optimal number, date &amp; checkbox inputs and validation binding:</p><div class="mt-16"><a href="https://blazor-server.jamstacks.net/secure/bookings" target="_blank"><img class="my-8 w-[1330px] -ml-40" style="max-width:none;" src="'+I+`"></a></div><p>It doesn&#39;t have all the features of the <a href="https://blazor-gallery.servicestack.net/gallery/autoquerygrid" target="_blank" rel="noopener noreferrer">Blazor AutoQueryGrid</a> component yet, but with a splash of code to load a few modules and create a custom Vue 3 reactive component, we can get most of the functionality without any of the heavy build tools complexity of a Blazor App or traditional npm SPA App and their matrix of dependencies.</p><h3 id="best-mix-of-productivity-vs-simplicity" tabindex="-1">Best mix of Productivity vs Simplicity <a class="header-anchor" href="#best-mix-of-productivity-vs-simplicity" aria-hidden="true">#</a></h3><p>From a pragmatic standpoint we believe JS Modules offers the best mix of productivity and simplicity, that can be progressively added to enhance server rendered Razor Pages with interactive reactive components without imposing its technical choices and bloating its other pages which are free to choose whichever libraries are best to implement its features.</p><h3 id="various-webapp-dto-options" tabindex="-1">Various WebApp DTO Options <a class="header-anchor" href="#various-webapp-dto-options" aria-hidden="true">#</a></h3><p>The only requirement for this to work is that the libraries are written as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer">JS Modules</a> which is a popular build target, but given we want to enable a typed and build-tools free future we&#39;ve added a new <strong>.mjs</strong> <a href="/add-servicestack-reference">Add ServiceStack Reference</a> endpoint at <strong>/types/mjs</strong> to return your APIs DTOs in annotated ES6 class JS Module. To see where they benefit, lets quickly go over the existing options:</p><h3 id="common-js-es3-dtos" tabindex="-1">Common.js ES3 DTOs <a class="header-anchor" href="#common-js-es3-dtos" aria-hidden="true">#</a></h3><p>Our existing <a href="/javascript-add-servicestack-reference">JavaScript Add ServiceStack Reference</a> support returns your API DTOs in <strong>ES3</strong> Common JS format, i.e. the default Target of TypeScript, in order to generate JS that&#39;s also compatible with older, out-dated browsers from 1999, that looks like:</p><div class="language-js"><pre><code><span class="token keyword">var</span> Hello <span class="token operator">=</span> <span class="token comment">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token parameter">init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Hello</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getTypeName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Hello</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Hello</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">createResponse</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Hello<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>Hello <span class="token operator">=</span> Hello<span class="token punctuation">;</span>

<span class="token keyword">var</span> HelloResponse <span class="token operator">=</span> <span class="token comment">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">HelloResponse</span><span class="token punctuation">(</span><span class="token parameter">init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> HelloResponse<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>HelloResponse <span class="token operator">=</span> HelloResponse<span class="token punctuation">;</span>
</code></pre></div><p>This does enable a similar build-free dev experience which lets you easily include your APIs DTOs in a page along with an <a href="/servicestack-client-umd">Embedded UMD @servicestack/client</a> to start making API calls, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/js/require.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/js/servicestack-client.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/types/js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">var</span> <span class="token punctuation">{</span> JsonServiceClient<span class="token punctuation">,</span> Hello <span class="token punctuation">}</span> <span class="token operator">=</span> exports

<span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">callHello</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> r<span class="token punctuation">.</span>result
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>But it offers no type-checking or intelli-sense assistance during development, luckily we can <a href="/servicestack-client-umd#rich-intelli-sense-support">enable static analysis</a> support by including <a href="/typescript-add-servicestack-reference">TypeScript dtos.ts</a> in the same project which smart IDEs like <a href="https://www.jetbrains.com/rider/" target="_blank" rel="noopener noreferrer">JetBrains Rider</a> will find to light up assistance.</p><h3 id="typescript-dtos" tabindex="-1">TypeScript DTOs <a class="header-anchor" href="#typescript-dtos" aria-hidden="true">#</a></h3><p>The TypeScript DTOs capture the most Type Information about your API DTOs in generic TypeScript classes:</p><div class="language-ts"><pre><code><span class="token comment">// @Route(&quot;/hello&quot;)</span>
<span class="token comment">// @Route(&quot;/hello/{Name}&quot;)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">implements</span> <span class="token class-name">IReturn<span class="token operator">&lt;</span>HelloResponse<span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>init<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Hello<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>Object <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">createResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HelloResponse</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> result<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>init<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>HelloResponse<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>Object <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which is still the best option to use in our <a href="/templates-jamstack">JAMStack TypeScript templates</a> where the DTOs integrate with the rest of your App&#39;s TypeScript code-base and its npm build tools takes care to transform it into its configured downlevel JS target bundles.</p><p>The primary issue being that Browsers can&#39;t run them natively, so developing in TypeScript typically requires an npm build system to do the transformation which adds complexity and results in slower iterative dev cycles.</p><h3 id="js-module-es6-class-dtos" tabindex="-1">JS Module ES6 class DTOs <a class="header-anchor" href="#js-module-es6-class-dtos" aria-hidden="true">#</a></h3><p>The new ES6 classes combines the best of both worlds to enable a productive type-safe development model during development but can also be referenced as-is in JS Module scripts and run natively in browsers without any build tools!</p><p>To achieve this the ES6 classes are annotated with <a href="https://jsdoc.app" target="_blank" rel="noopener noreferrer">JSDoc</a> type hints in comments which enjoys broad support in IDEs and tools like TypeScript where it can be used to <a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html" target="_blank" rel="noopener noreferrer">provide type information in JavaScript files</a>, which looks like:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token comment">/** @param {{name?:string}} [init] */</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token comment">/** @type {string} */</span>
    name<span class="token punctuation">;</span>
    <span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;Hello&#39;</span> <span class="token punctuation">}</span>
    <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;GET&#39;</span> <span class="token punctuation">}</span>
    <span class="token function">createResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HelloResponse</span> <span class="token punctuation">{</span>
    <span class="token comment">/** @param {{result?:string,responseStatus?:ResponseStatus}} [init] */</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token comment">/** @type {string} */</span>
    result<span class="token punctuation">;</span>
    <span class="token comment">/** @type {?ResponseStatus} */</span>
    responseStatus<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which our JS Apps can immediately use by referencing the <strong>/types/mjs</strong> endpoint directly:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;/types/mjs&#39;</span>
<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>That for better IDE intelli-sense during development, we can save to disk with:</p>`,39),tn=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"npm run dtos")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),en=p(`<p>Where it enables IDE static analysis when calling Typed APIs from JavaScript:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;/mjs/dtos.mjs&#39;</span>
</code></pre></div><p><img src="`+w+'" alt=""></p><h3 id="mjs-add-servicestack-reference" tabindex="-1">.mjs Add ServiceStack Reference <a class="header-anchor" href="#mjs-add-servicestack-reference" aria-hidden="true">#</a></h3><p>The new JS Modules DTOs is now a first-class <a href="https://servicestack.net/service-reference" target="_blank" rel="noopener noreferrer">Add ServiceStack Reference language</a> supported language complete with IDE integration in the latest VS .NET and JetBrains IDEs extensions:</p><div class="not-prose mt-8 grid grid-cols-2 gap-4"><a class="block bg-neutral-900 group border border-neutral-800 hover:border-indigo-700" href="https://marketplace.visualstudio.com/items?itemName=Mythz.ServiceStackVS"><div class="bg-neutral-700 text-white font-semibold group-hover:bg-indigo-700 text-center py-2">VS.NET</div><img class="" src="'+P+'"></a><a class="block bg-neutral-900 group border border-neutral-800 hover:border-indigo-700" href="https://plugins.jetbrains.com/plugin/17295-servicestack"><div class="bg-neutral-700 text-white font-semibold group-hover:bg-indigo-700 text-center py-2">JetBrains Rider</div><img class="" src="'+M+`"></a></div><p>Including support in the latest <a href="/dotnet-tool">dotnet tool</a> for creating new <strong>.mjs</strong> Add ServiceStack References:</p><div class="language-bash"><pre><code>$ x mjs https://localhost:5001
</code></pre></div><p>And updating them:</p><div class="language-bash"><pre><code>x mjs
</code></pre></div><p>But the best thing about JS Module DTOs is using them in the exciting new node_modules free world enabled in the new Vue.js templates!</p><h2 id="multi-page-apps" tabindex="-1">Multi Page Apps <a class="header-anchor" href="#multi-page-apps" aria-hidden="true">#</a></h2>`,12),pn={id:"multi-page-apps","data-hide":"h2#multi-page-apps","data-id":"MultiPageApps"},on=n("div",{class:"relative bg-white py-4"},[n("div",{class:"mx-auto max-w-md px-4 text-center sm:max-w-3xl sm:px-6 lg:max-w-7xl lg:px-8"},[n("p",{class:"mt-2 text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl"},"Back to Multi Page Apps"),n("p",{class:"mx-auto mt-5 max-w-prose text-xl text-gray-500"}," Discover the productive build tools free world of modern JS Module MPAs")])],-1),cn={class:"flex justify-around"},ln={"data-id":"icon-js",class:"sm:float-left mr-4 w-24 h-24",style:{"margin-top":"0"},xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 630 630"},un=n("rect",{width:"630",height:"630",fill:"#f7df1e"},null,-1),rn=n("path",{d:"m423.2 492.19c12.69 20.72 29.2 35.95 58.4 35.95 24.53 0 40.2-12.26 40.2-29.2 0-20.3-16.1-27.49-43.1-39.3l-14.8-6.35c-42.72-18.2-71.1-41-71.1-89.2 0-44.4 33.83-78.2 86.7-78.2 37.64 0 64.7 13.1 84.2 47.4l-46.1 29.6c-10.15-18.2-21.1-25.37-38.1-25.37-17.34 0-28.33 11-28.33 25.37 0 17.76 11 24.95 36.4 35.95l14.8 6.34c50.3 21.57 78.7 43.56 78.7 93 0 53.3-41.87 82.5-98.1 82.5-54.98 0-90.5-26.2-107.88-60.54zm-209.13 5.13c9.3 16.5 17.76 30.45 38.1 30.45 19.45 0 31.72-7.61 31.72-37.2v-201.3h59.2v202.1c0 61.3-35.94 89.2-88.4 89.2-47.4 0-74.85-24.53-88.81-54.075z"},null,-1),kn=[un,rn],dn=p('<p>JavaScript has progressed significantly in recent times where many of the tooling &amp; language enhancements that we used to rely on external tools for is now available in modern browsers alleviating the need for complex tooling and npm dependencies that have historically plagued modern web development.</p><p>The good news is that the complex npm tooling that was previously considered mandatory in modern JavaScript App development can be considered optional as we can now utilize modern browser features like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener noreferrer">async/await</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer">JavaScript Modules</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import" target="_blank" rel="noopener noreferrer">dynamic imports</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap" target="_blank" rel="noopener noreferrer">import maps</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide" target="_blank" rel="noopener noreferrer">modern language features</a> for a sophisticated development workflow without the need for any npm build tools.</p><h3 id="bringing-simplicity-back" tabindex="-1">Bringing Simplicity Back <a class="header-anchor" href="#bringing-simplicity-back" aria-hidden="true">#</a></h3><p>The new Razor Vue.mjs templates focuses on simplicity and eschews many aspects that has complicated modern JavaScript development, specifically:</p><ul><li>No npm <strong>node_modules</strong> or build tools</li><li>No client side routing</li><li>No heavy client state</li></ul><p>Effectively abandoning the traditional SPA approach in lieu of a simpler <a href="https://docs.astro.build/en/concepts/mpa-vs-spa/" target="_blank" rel="noopener noreferrer">MPA</a> development model using Razor Pages for Server Rendered content with any interactive UIs progressively enhanced with JavaScript.</p><h4 id="freedom-to-use-any-js-library" tabindex="-1">Freedom to use any JS library <a class="header-anchor" href="#freedom-to-use-any-js-library" aria-hidden="true">#</a></h4><p>Avoiding the SPA route ends up affording more flexibility on which JS libraries each page can use as without heavy bundled JS blobs of all JS used in the entire App, it&#39;s free to only load the required JS each page needs to best implement its required functionality, which can be any JS library, preferably utilizing ESM builds that can be referenced from a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer">JavaScript Module</a>, taking advantage of the module system native to modern browsers able to efficiently download the declarative matrix of dependencies each script needs.</p><h3 id="best-libraries-for-progressive-multi-page-apps" tabindex="-1">Best libraries for progressive Multi Page Apps <a class="header-anchor" href="#best-libraries-for-progressive-multi-page-apps" aria-hidden="true">#</a></h3><p>By default the Razor Vue.js templates includes a collection of libraries we believe offers the best modern development experience in Progressive MPA Web Apps, specifically:</p>',10),gn={"data-id":"icon-tailwind"},mn=n("h3",{id:"tailwind",tabindex:"-1"},[i("Tailwind "),n("a",{class:"header-anchor",href:"#tailwind","aria-hidden":"true"},"#")],-1),hn=n("p",{"data-id":"h3-tailwind"},[n("a",{href:"https://tailwindcss.com/docs/installation"},"Tailwind CLI"),i(" enables a responsive, utility-first CSS framework for creating maintainable CSS at scale without the need for any CSS preprocessors like Sass, which is configured to run from an npx script to avoid needing any node_module dependencies. ")],-1),vn={"data-id":"icon-vue"},fn=p(`<h3 id="vue-3" tabindex="-1">Vue 3 <a class="header-anchor" href="#vue-3" aria-hidden="true">#</a></h3><p><a href="https://vuejs.org/guide/introduction.html" target="_blank" rel="noopener noreferrer">Vue</a> is a popular Progressive JavaScript Framework that makes it easy to create interactive Reactive Components whose <a href="https://vuejs.org/api/composition-api-setup.html" target="_blank" rel="noopener noreferrer">Composition API</a> offers a nice development model without requiring any pre-processors like JSX.</p><p>Where creating a component is as simple as:</p><div class="language-js"><pre><code><span class="token keyword">const</span> Hello <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;b&gt;Hello, {{name}}!&lt;/b&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span>String <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,4),yn={"data-id":"Hello",class:"text-center"},wn=p(`<p>Or a simple reactive example:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;b @click=&quot;count++&quot;&gt;Counter {{count}}&lt;/b&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,2),bn={"data-id":"Counter",class:"text-center"},qn=p(`<p>These components can be mounted using the standard <a href="https://vuejs.org/api/application.html#app-mount" target="_blank" rel="noopener noreferrer">Vue 3 mount</a> API, but to make it easier we&#39;ve added additional APIs for declaratively mounting components to pages using the <code>data-component</code> and <code>data-props</code> attributes, especially useful for embedding Vue components in Markdown content, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Hello<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-props</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ name: &#39;Vue 3&#39; }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Alternatively they can be programmatically added using the custom <code>mount</code> method in <code>api.mjs</code>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;/mjs/api.mjs&quot;</span>
<span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#counter&#39;</span><span class="token punctuation">,</span> Counter<span class="token punctuation">)</span>
</code></pre></div><div></div><p>Both methods create components with access to all your Shared Components and any 3rd Party Plugins which we can preview in this example that uses <strong>@servicestack/vue&#39;s</strong> <a href="/vue/gallery/navigation#primarybutton">PrimaryButton </a> and <a href="/vue/gallery/modals">ModalDialog</a> components:</p><div></div><div></div><div class="language-js"><pre><code><span class="token keyword">const</span> Plugin <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
        &lt;PrimaryButton @click=&quot;show=true&quot;&gt;Open Modal&lt;/PrimaryButton&gt;
        &lt;ModalDialog v-if=&quot;show&quot; @done=&quot;show=false&quot;&gt;
            &lt;div class=&quot;p-8&quot;&gt;Hello @servicestack/vue!&lt;/div&gt;
        &lt;/ModalDialog&gt;
    &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> show <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> show <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div></div><div></div>`,11),xn={"data-id":"Plugin",class:"text-center not-prose"},Sn=n("h3",null,"Vue.js Tailwind Components Library",-1),_n=n("p",{"data-id":"intro-servicestack-vue"},[n("a",{href:"https://github.com/ServiceStack/servicestack-vue"},"@servicestack/vue"),i(" is our growing Vue 3 Tailwind component library with a number of rich Tailwind components useful in .NET Web Apps, including DataGrids, Auto Forms and Input Components with integrated contextual validation binding.")],-1),jn=n("div",{"data-id":"yt-YIa0w6whe2U",class:"pb-8"},[n("p",{class:"mx-auto my-4 text-xl text-gray-500 text-center"},"For a quick preview of the fast dev workflow of using these components in a Razor Pages App, checkout:"),n("div",{class:"flex justify-center"},[n("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/YIa0w6whe2U",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:""})])],-1),Tn=p(`<p><strong>@servicestack/vue</strong> is our cornerstone library for enabling a highly productive dev model across our <a href="/templates-vue">Vue.js Tailwind Project templates</a> that we&#39;ll be continuing to invest in to build a richer component library unlocking greater productivity - watch this space!</p><h3 id="servicestack-client" tabindex="-1">@servicestack/client <a class="header-anchor" href="#servicestack-client" aria-hidden="true">#</a></h3><p><a href="/javascript-client">@servicestack/client</a> is our generic JS/TypeScript client library which enables a terse, typed API for using your App&#39;s typed DTOs from the built-in <a href="/javascript-add-servicestack-reference">JavaScript ES6 Classes</a> support to enable an effortless end-to-end Typed development model for calling your APIs <strong>without any build steps</strong>, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txtName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>result<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> JsonApiClient<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> on <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@servicestack/client&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;/types/mjs&#39;</span>

<span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;#txtName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">keyup</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> client <span class="token operator">=</span> JsonApiClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span>el<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">$1</span><span class="token punctuation">(</span><span class="token string">&#39;#result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> api<span class="token punctuation">.</span>response<span class="token punctuation">.</span>result
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>For better IDE intelli-sense during development, save the annotated Typed DTOs to disk with:</p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> run dtos
</code></pre></div><p>That can be referenced instead to unlock your IDE&#39;s static analysis type-checking and intelli-sense benefits during development:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;/js/dtos.mjs&#39;</span>
client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>You&#39;ll typically use all these libraries in your <strong>API-enabled</strong> components as seen in the <a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/wwwroot/mjs/components/HelloApi.mjs" target="_blank" rel="noopener noreferrer">HelloApi.mjs</a> component on the <a href="https://vue-mjs.web-templates.io" target="_blank" rel="noopener noreferrer">home page</a> which calls its <a href="https://vue-mjs.web-templates.io/ui/Hello" target="_blank" rel="noopener noreferrer">Hello API</a> on each key press:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/vue&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../dtos.mjs&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token comment">/*html*/</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;flex flex-wrap justify-center&quot;&gt;
        &lt;TextInput v-model=&quot;name&quot; @keyup=&quot;update&quot; /&gt;
        &lt;div class=&quot;ml-3 mt-2 text-lg&quot;&gt;{{ result }}&lt;/div&gt;
    &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span>value <span class="token operator">=</span> api<span class="token punctuation">.</span>response<span class="token punctuation">.</span>result
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> update<span class="token punctuation">,</span> result <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>We&#39;ll also go through and explain other features used in this component:</p><h4 id="html" tabindex="-1"><code>/*html*/</code> <a class="header-anchor" href="#html" aria-hidden="true">#</a></h4><p>Although <a href="https://vue-mjs.web-templates.io/blog/rider" target="_blank" rel="noopener noreferrer">not needed in Rider</a> (which can automatically infer HTML in strings), the <code>/*html*/</code> type hint is used to instruct tooling like the <a href="https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html" target="_blank" rel="noopener noreferrer">es6-string-html</a> VS Code extension to provide syntax highlighting and an enhanced authoring experience for HTML content in strings.</p><h3 id="useclient" tabindex="-1">useClient <a class="header-anchor" href="#useclient" aria-hidden="true">#</a></h3><p><a href="/vue/use-client">useClient()</a> provides managed APIs around the <code>JsonServiceClient</code> instance, registered in Vue App&#39;s with:</p><div class="language-js"><pre><code><span class="token keyword">let</span> client <span class="token operator">=</span> JsonApiClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;client&#39;</span><span class="token punctuation">,</span> client<span class="token punctuation">)</span>
</code></pre></div><p>Which maintains contextual information around your API calls like <strong>loading</strong> and <strong>error</strong> states, used by <code>@servicestack/vue</code> components to enable its auto validation binding. Other functionality includes:</p><div class="language-js"><pre><code><span class="token keyword">let</span> <span class="token punctuation">{</span> 
    api<span class="token punctuation">,</span>            <span class="token comment">// Send a typed API request and return results in an ApiResult&lt;TResponse&gt;</span>
    apiVoid<span class="token punctuation">,</span>        <span class="token comment">// Send a typed API request and return empty response in a void ApiResult</span>
    apiForm<span class="token punctuation">,</span>        <span class="token comment">// Send a FormData API request and return results in an ApiResult&lt;TResponse&gt;</span>
    apiFormVoid<span class="token punctuation">,</span>    <span class="token comment">// Send a FormData API request and return empty response in a void ApiResult</span>
    loading<span class="token punctuation">,</span>        <span class="token comment">// Maintain loading state whilst API Request is in transit</span>
    error<span class="token punctuation">,</span>          <span class="token comment">// Maintain API Error response in reactive Ref&lt;ResponseStatus&gt;</span>
    setError<span class="token punctuation">,</span>       <span class="token comment">// Set API error state with summary or field validation error</span>
    addFieldError<span class="token punctuation">,</span>  <span class="token comment">// Add field error to API error state</span>
    unRefs          <span class="token comment">// Returns a dto with all Refs unwrapped</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><h4 id="seterror" tabindex="-1">setError <a class="header-anchor" href="#seterror" aria-hidden="true">#</a></h4><p><code>setError</code> can be used to populate client-side validation errors which the <a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/wwwroot/Pages/SignUp.mjs" target="_blank" rel="noopener noreferrer">SignUp.mjs</a> component uses to report an invalid submissions when passwords don&#39;t match:</p><div class="language-js"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">.</span>value <span class="token operator">!==</span> confirmPassword<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fieldName</span><span class="token operator">:</span><span class="token string">&#39;confirmPassword&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">&#39;Passwords do not match&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="form-validation" tabindex="-1">Form Validation <a class="header-anchor" href="#form-validation" aria-hidden="true">#</a></h3><p>All <code>@servicestack/vue</code> Input Components support contextual validation binding that&#39;s typically populated from API <a href="/error-handling">Error Response DTOs</a> but can also be populated from client-side validation as done above.</p><h4 id="explicit-error-handling" tabindex="-1">Explicit Error Handling <a class="header-anchor" href="#explicit-error-handling" aria-hidden="true">#</a></h4><p>This populated <code>ResponseStatus</code> DTO can either be manually passed into each component&#39;s <strong>status</strong> property as done in <a href="https://vue-mjs.web-templates.io/TodoMvc" target="_blank" rel="noopener noreferrer">/TodoMvc</a>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TodoMvc-template<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mb-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text-input</span> <span class="token attr-name">:status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>store.error<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>What needs to be done?<span class="token punctuation">&quot;</span></span>
                    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>store.newTodo<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>store.addTodo()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text-input</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- ... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Where if you try adding an empty Todo the <code>CreateTodo</code> API will fail and populate its <code>store.error</code> reactive property with the APIs Error Response DTO which the <code>&lt;TextInput /&gt;</code> component checks to display any field validation errors adjacent to the HTML Input with matching <code>id</code> fields:</p><div class="language-js"><pre><code><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">/** @type {Todo[]} */</span>
    <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">newTodo</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">error</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>newTodo <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreateTodo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>newTodo <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>newTodo <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">else</span> 
            <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> api<span class="token punctuation">.</span>error
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="implicit-error-handling" tabindex="-1">Implicit Error Handling <a class="header-anchor" href="#implicit-error-handling" aria-hidden="true">#</a></h4><p>More often you&#39;ll want to take advantage of the implicit validation support in <code>useClient()</code> which makes its state available to child components, alleviating the need to explicitly pass it in each component as seen in razor-tailwind&#39;s <a href="https://github.com/NetCoreTemplates/razor-tailwind/blob/main/MyApp/wwwroot/Pages/Contacts.mjs" target="_blank" rel="noopener noreferrer">Contacts.mjs</a> <code>Edit</code> component for its <a href="https://razor-tailwind.web-templates.io/Contacts" target="_blank" rel="noopener noreferrer">/Contacts</a> page which doesn&#39;t do any manual error handling:</p><div class="language-js"><pre><code><span class="token keyword">const</span> Edit <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token comment">/*html*/</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;SlideOver @done=&quot;close&quot; title=&quot;Edit Contact&quot;&gt;
    &lt;form @submit.prevent=&quot;submit&quot;&gt;
      &lt;input type=&quot;submit&quot; class=&quot;hidden&quot;&gt;
      &lt;fieldset&gt;
        &lt;ErrorSummary except=&quot;title,name,color,filmGenres,age,agree&quot; class=&quot;mb-4&quot; /&gt;
        &lt;div class=&quot;grid grid-cols-6 gap-6&quot;&gt;
          &lt;div class=&quot;col-span-6 sm:col-span-3&quot;&gt;
            &lt;SelectInput id=&quot;title&quot; v-model=&quot;request.title&quot; :options=&quot;enumOptions(&#39;Title&#39;)&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;col-span-6 sm:col-span-3&quot;&gt;
            &lt;TextInput id=&quot;name&quot; v-model=&quot;request.name&quot; required placeholder=&quot;Contact Name&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;col-span-6 sm:col-span-3&quot;&gt;
            &lt;SelectInput id=&quot;color&quot; v-model=&quot;request.color&quot; :options=&quot;colorOptions&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;col-span-6 sm:col-span-3&quot;&gt;
            &lt;SelectInput id=&quot;favoriteGenre&quot; v-model=&quot;request.favoriteGenre&quot; :options=&quot;enumOptions(&#39;FilmGenre&#39;)&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;col-span-6 sm:col-span-3&quot;&gt;
            &lt;TextInput type=&quot;number&quot; id=&quot;age&quot; v-model=&quot;request.age&quot; /&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/fieldset&gt;
    &lt;/form&gt;
    &lt;template #footer&gt;
      &lt;div class=&quot;flex justify-between space-x-3&quot;&gt;
        &lt;div&gt;&lt;ConfirmDelete @delete=&quot;onDelete&quot;&gt;Delete&lt;/ConfirmDelete&gt;&lt;/div&gt;
        &lt;div&gt;&lt;PrimaryButton @click=&quot;submit&quot;&gt;Update Contact&lt;/PrimaryButton&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/template&gt;
  &lt;/SlideOver&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;contact&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">emits</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> emit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpdateContact</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>contact<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> colorOptions <span class="token operator">=</span> <span class="token function">propertyOptions</span><span class="token punctuation">(</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&#39;UpdateContact&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">onDelete</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">apiVoid</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteContact</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span>props<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">const</span> <span class="token function-variable function">close</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token punctuation">{</span> request<span class="token punctuation">,</span> enumOptions<span class="token punctuation">,</span> colorOptions<span class="token punctuation">,</span> submit<span class="token punctuation">,</span> onDelete<span class="token punctuation">,</span> close <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Effectively making form validation binding a transparent detail where all <code>@servicestack/vue</code> Input Components are able to automatically apply contextual validation errors next to the fields they apply to:</p><p><a href="https://razor-tailwind.web-templates.io/Contacts"><div class="mx-auto max-w-screen-md block flex justify-center"><img class="p-4" src="`+V+`"></div></a></p><h3 id="autoform-components" tabindex="-1">AutoForm Components <a class="header-anchor" href="#autoform-components" aria-hidden="true">#</a></h3><p>We can elevate our productivity even further with <a href="/vue/gallery/autoform">Auto Form Components</a> that can automatically generate an instant API-enabled form with validation binding by just specifying the Request DTO you want to create the form of, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AutoCreateForm</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CreateBooking<span class="token punctuation">&quot;</span></span> <span class="token attr-name">formStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div>`,36),An={"data-id":"AutoCreateForm",class:"not-prose max-w-3xl"},Cn=p(`<p>The AutoForm components are powered by your <a href="/vue/use-metadata">App Metadata</a> which allows creating highly customized UIs from <a href="/locode/declarative">declarative C# attributes</a> whose customizations are reused across all ServiceStack Auto UIs, including:</p><ul><li><a href="/api-explorer">API Explorer</a></li><li><a href="/locode/">Locode</a></li><li><a href="/templates-blazor-components">Blazor Tailwind Components</a></li></ul><h3 id="form-input-components" tabindex="-1">Form Input Components <a class="header-anchor" href="#form-input-components" aria-hidden="true">#</a></h3><p>In addition to including Tailwind versions of the standard <a href="/vue/gallery/form-inputs">HTML Form Inputs</a> controls to create beautiful Tailwind Forms, it also contains a variety of integrated high-level components:</p><h3 id="fileinput" tabindex="-1">FileInput <a class="header-anchor" href="#fileinput" aria-hidden="true">#</a></h3><p><strong><a href="/vue/gallery/fileinput">FileInput component</a></strong> beautifies the browsers default HTML file Input, supporting both Single file uploads:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileInput</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>profileUrl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Single File Upload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contact.profileUrl<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p><a href="/vue/gallery/fileinput"><img class="max-w-[516px]" src="`+R+`"></a></p><p>and Multiple File Uploads:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileInput</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>profileUrls<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Multiple File Uploads<span class="token punctuation">&quot;</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">:files</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contact.files<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p><a href="/vue/gallery/fileinput"><img class="max-w-[374px]" src="`+D+`"></a></p><h4 id="invoking-apis-containing-uploaded-files" tabindex="-1">Invoking APIs containing uploaded files <a class="header-anchor" href="#invoking-apis-containing-uploaded-files" aria-hidden="true">#</a></h4><p>When uploading files, you&#39;ll need to submit API requests using the <code>apiForm</code> or <code>apiFormVoid</code> methods to send a populated <code>FormData</code> instead of a Request DTO, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileInput</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>profileUrls<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Multiple File Uploads<span class="token punctuation">&quot;</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">:files</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>files<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrimaryButton</span><span class="token punctuation">&gt;</span></span>Save<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PrimaryButton</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/vue&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CreateContact <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;/mjs/dtos.mjs&quot;</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span>Event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> form <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLFormElement
    <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">apiForm</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreateContact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h4 id="integrates-with-managed-file-uploads" tabindex="-1">Integrates with Managed File Uploads <a class="header-anchor" href="#integrates-with-managed-file-uploads" aria-hidden="true">#</a></h4><p>Using <a href="/locode/files">Managed File Uploads</a> is a productive solution for easily managing file uploads where you can declaratively specify which location uploaded files should be written to, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateContact</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPatchDb<span class="token punctuation">&lt;</span>Contact<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>Contact<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type <span class="token operator">=</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">UploadTo</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;profiles&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> ProfileUrl <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> SalaryExpectation <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> JobType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> AvailabilityWeeks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">EmploymentType<span class="token punctuation">?</span></span> PreferredWorkType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> PreferredLocation <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Phone <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type <span class="token operator">=</span> <span class="token string">&quot;tag&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">FieldCss</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Field <span class="token operator">=</span> <span class="token string">&quot;col-span-12&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> Skills <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type <span class="token operator">=</span> <span class="token string">&quot;textarea&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FieldCss</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Field <span class="token operator">=</span> <span class="token string">&quot;col-span-12 text-center&quot;</span><span class="token punctuation">,</span> Input <span class="token operator">=</span> <span class="token string">&quot;h-48&quot;</span><span class="token punctuation">,</span> Label<span class="token operator">=</span> <span class="token string">&quot;text-xl text-indigo-700&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> About <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This metadata information is also available to <a href="/vue/gallery/autoform">AutoForm components</a> which supports invoking APIs with uploaded files:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AutoEditForm</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UpdateContact<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contact<span class="token punctuation">&quot;</span></span> <span class="token attr-name">formStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p><a href="/vue/gallery/form-inputs#updatecontact"><img class="max-w-[778px]" src="`+J+`"></a></p><h3 id="taginput" tabindex="-1">TagInput <a class="header-anchor" href="#taginput" aria-hidden="true">#</a></h3><p><strong><a href="/vue/gallery/taginput">TagInput component</a></strong> provides a user friendly control for managing a free-form <code>List&lt;string&gt;</code> tags or symbols which is also supported in declarative Auto Forms using the <code>[Input(Type=&quot;tag&quot;)]</code> attribute as seen in the <strong>UpdateContact</strong> example above using the <a href="/vue/gallery/autoform">AutoForm components</a>.</p><p>Alternatively <code>&lt;TagInput&gt;</code> can be used in Custom Forms directly by binding to a <code>List&lt;string&gt;</code> or <code>string[]</code> model:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shadow sm:rounded-md bg-white dark:bg-black<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>relative px-4 py-5 sm:p-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-base font-medium text-gray-900 dark:text-gray-100 text-center mb-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                    TagInput Examples
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ErrorSummary</span> <span class="token attr-name">:except</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>visibleFields<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>grid grid-cols-12 gap-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-span-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>request.firstName<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-span-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>request.lastName<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-span-12<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TagInput</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>request.skills<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Technology Skills<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mt-4 px-4 py-3 bg-gray-50 dark:bg-gray-900 sm:px-6 flex flex-wrap justify-between<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex justify-end<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SecondaryButton</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mr-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Cancel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SecondaryButton</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrimaryButton</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PrimaryButton</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><a href="/vue/gallery/taginput"><img class="max-w-[778px]" src="`+E+'"></a></p><h3 id="autocomplete" tabindex="-1">Autocomplete <a class="header-anchor" href="#autocomplete" aria-hidden="true">#</a></h3><p><strong><a href="/vue/gallery/autocomplete">Autocomplete component</a></strong> provides a user friendly Input for being able to search and quickly select items with support for partial items view and infinite scrolling.</p><p><a href="/vue/gallery/autocomplete"><img class="max-w-[571px]" src="'+z+`"></a></p><h3 id="useauth" tabindex="-1">useAuth <a class="header-anchor" href="#useauth" aria-hidden="true">#</a></h3><p>Your Vue.js code can access Authenticated Users using <a href="/vue/use-auth">useAuth()</a> which can also be populated without the overhead of an Ajax request by embedding the response of the built-in <a href="https://vue-mjs.web-templates.io/ui/Authenticate?tab=details" target="_blank" rel="noopener noreferrer">Authenticate API</a> inside <code>_Layout.cshtml</code> with:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useAuth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@@servicestack/vue&quot;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> signIn <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">signIn</span><span class="token punctuation">(</span>@<span class="token keyword">await</span> Html<span class="token punctuation">.</span><span class="token function">ApiAsJsonAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Where it enables access to the below <a href="/vue/use-auth">useAuth()</a> utils for inspecting the current authenticated user:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> 
    signIn<span class="token punctuation">,</span>           <span class="token comment">// Sign In the currently Authenticated User</span>
    signOut<span class="token punctuation">,</span>          <span class="token comment">// Sign Out currently Authenticated User</span>
    user<span class="token punctuation">,</span>             <span class="token comment">// Access Authenticated User info in a reactive Ref&lt;AuthenticateResponse&gt;</span>
    isAuthenticated<span class="token punctuation">,</span>  <span class="token comment">// Check if the current user is Authenticated in a reactive Ref&lt;boolean&gt;</span>
    hasRole<span class="token punctuation">,</span>          <span class="token comment">// Check if the Authenticated User has a specific role</span>
    hasPermission<span class="token punctuation">,</span>    <span class="token comment">// Check if the Authenticated User has a specific permission</span>
    isAdmin           <span class="token comment">// Check if the Authenticated User has the Admin role</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>This is used in <a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/wwwroot/Pages/Bookings.mjs" target="_blank" rel="noopener noreferrer">Bookings.mjs</a> to control whether the <code>&lt;AutoEditForm&gt;</code> component should enable its delete functionality:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    template<span class="token comment">/*html*/</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;AutoEditForm type=&quot;UpdateBooking&quot; :deleteType=&quot;canDelete ? &#39;DeleteBooking&#39; : null&quot; /&gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> hasRole <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> canDelete <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">&#39;Manager&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> canDelete <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="jsdoc" tabindex="-1"><a href="https://jsdoc.app" target="_blank" rel="noopener noreferrer">JSDoc</a> <a class="header-anchor" href="#jsdoc" aria-hidden="true">#</a></h4><p>We get great value from using <a href="https://www.typescriptlang.org" target="_blank" rel="noopener noreferrer">TypeScript</a> to maintain our libraries typed code bases, however it does mandate using an external tool to convert it to valid JS before it can be run, something the new Razor Vue.js templates expressly avoids.</p><p>Instead it adds JSDoc type annotations to code where it adds value, which at the cost of slightly more verbose syntax enables much of the same static analysis and intelli-sense benefits of TypeScript, but without needing any tools to convert it to valid JavaScript, e.g:</p><div class="language-js"><pre><code><span class="token comment">/** @param {KeyboardEvent} e */</span>
<span class="token keyword">function</span> <span class="token function">validateSafeName</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\W]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="typescript-static-analysis-during-development" tabindex="-1">TypeScript static analysis during development <a class="header-anchor" href="#typescript-static-analysis-during-development" aria-hidden="true">#</a></h4><p>Whilst the code-base doesn&#39;t use TypeScript syntax in its code base directly, it still benefits from TypeScript&#39;s language services in IDEs for the included libraries from the TypeScript definitions included in <code>/lib/typings</code>, downloaded in <a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/postinstall.js" target="_blank" rel="noopener noreferrer">postinstall.js</a> after <strong>npm install</strong>.</p><h3 id="import-maps" tabindex="-1">Import Maps <a class="header-anchor" href="#import-maps" aria-hidden="true">#</a></h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap" target="_blank" rel="noopener noreferrer">Import Maps</a> is a useful browser feature that allows specifying optimal names for modules, that can be used to map package names to the implementation it should use, e.g:</p><div class="language-csharp"><pre><code>@Html<span class="token punctuation">.</span><span class="token function">StaticImportMap</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">]</span>                  <span class="token operator">=</span> <span class="token string">&quot;/lib/mjs/vue.mjs&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;@servicestack/client&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;/lib/mjs/servicestack-client.mjs&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;@servicestack/vue&quot;</span><span class="token punctuation">]</span>    <span class="token operator">=</span> <span class="token string">&quot;/lib/mjs/servicestack-vue.mjs&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Where they can be freely maintained in one place without needing to update any source code references. This allows source code to be able to import from the package name instead of its physical location:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/vue&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> JsonApiClient<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> on <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/client&quot;</span>
</code></pre></div><p>It&#39;s a great solution for specifying using local unminified debug builds during <strong>Development</strong>, and more optimal CDN hosted production builds when running in <strong>Production</strong>, alleviating the need to rely on complex build tools to perform this code transformation for us:</p><div class="language-csharp"><pre><code>@Html<span class="token punctuation">.</span><span class="token function">ImportMap</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">]</span>                  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;/lib/mjs/vue.mjs&quot;</span><span class="token punctuation">,</span>                 <span class="token string">&quot;https://unpkg.com/vue@3/dist/vue.esm-browser.prod.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;@servicestack/client&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;/lib/mjs/servicestack-client.mjs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://unpkg.com/@servicestack/client@2/dist/servicestack-client.min.mjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;@servicestack/vue&quot;</span><span class="token punctuation">]</span>    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;/lib/mjs/servicestack-vue.mjs&quot;</span><span class="token punctuation">,</span>    <span class="token string">&quot;https://unpkg.com/@servicestack/vue@3/dist/servicestack-vue.min.mjs&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><blockquote><p>Note: Specifying exact versions of each dependency improves initial load times by eliminating latency from redirects.</p></blockquote><p>Or if you don&#39;t want to reference any external dependencies, have the ImportMap reference local minified production builds instead:</p><div class="language-csharp"><pre><code>@Html<span class="token punctuation">.</span><span class="token function">ImportMap</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">]</span>                  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;/lib/mjs/vue.mjs&quot;</span><span class="token punctuation">,</span>                 <span class="token string">&quot;/lib/mjs/vue.min.mjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;@servicestack/client&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;/lib/mjs/servicestack-client.mjs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/lib/mjs/servicestack-client.min.mjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;@servicestack/vue&quot;</span><span class="token punctuation">]</span>    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;/lib/mjs/servicestack-vue.mjs&quot;</span><span class="token punctuation">,</span>    <span class="token string">&quot;/lib/mjs/servicestack-vue.min.mjs&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h4 id="polyfill-for-safari" tabindex="-1">Polyfill for Safari <a class="header-anchor" href="#polyfill-for-safari" aria-hidden="true">#</a></h4><p>Unfortunately Safari is the last modern browser to <a href="https://caniuse.com/import-maps" target="_blank" rel="noopener noreferrer">support import maps</a> which is only now in Technical Preview. Luckily this feature can be polyfilled with the pre-configured <a href="https://github.com/guybedford/es-module-shims" target="_blank" rel="noopener noreferrer">ES Module Shims</a>:</p><div class="language-html"><pre><code>@if (Context.Request.Headers.UserAgent.Any(x =&gt; x.Contains(&quot;Safari&quot;) &amp;&amp; !x.Contains(&quot;Chrome&quot;)))
{
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://ga.jspm.io/npm:es-module-shims@1.6.3/dist/es-module-shims.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
}
</code></pre></div><h3 id="fast-component-loading" tabindex="-1">Fast Component Loading <a class="header-anchor" href="#fast-component-loading" aria-hidden="true">#</a></h3><p>SPAs are notorious for being slow to load due to needing to download large blobs of JavaScript bundles that it needs to initialize with their JS framework to mount their App component before it starts fetching the data from the server it needs to render its components.</p><p>A complex solution to this problem is to server render the initial HTML content then re-render it again on the client after the page loads. A simpler solution is to avoid unnecessary ajax calls by embedding the JSON data the component needs in the page that loads it, which is what <a href="https://vue-mjs.web-templates.io/TodoMvc" target="_blank" rel="noopener noreferrer">/TodosMvc</a> does to load its initial list of todos using the <a href="/service-gateway">Service Gateway</a> to invoke APIs in process and embed its JSON response with:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">todos <span class="token operator">=</span> @<span class="token keyword">await</span> <span class="token function">ApiResultsAsJsonAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> TodoMvc <span class="token keyword">from</span> <span class="token string">&quot;/Pages/TodoMvc.mjs&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;/mjs/app.mjs&quot;</span>
<span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#todomvc&#39;</span><span class="token punctuation">,</span> TodoMvc<span class="token punctuation">,</span> <span class="token punctuation">{</span> todos <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Where <code>ApiResultsAsJsonAsync</code> is a simplified helper that uses the <a href="/service-gateway">Gateway</a> to call your API and returns its unencoded JSON response:</p><div class="language-csharp"><pre><code><span class="token punctuation">(</span><span class="token keyword">await</span> Gateway<span class="token punctuation">.</span><span class="token function">ApiAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Response<span class="token punctuation">?.</span>Results<span class="token punctuation">.</span><span class="token function">AsRawJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The result of which should render the List of Todos instantly when the page loads since it doesn&#39;t need to perform any additional Ajax requests after the component is loaded.</p><h3 id="fast-page-loading" tabindex="-1">Fast Page Loading <a class="header-anchor" href="#fast-page-loading" aria-hidden="true">#</a></h3><p>We can get SPA-like page loading performance using htmx&#39;s <a href="https://htmx.org/docs/#boosting" target="_blank" rel="noopener noreferrer">Boosting</a> feature which avoids full page reloads by converting all anchor tags to use Ajax to load page content into the page body, improving performance from avoiding needing to reload scripts and CSS in <code>&lt;head&gt;</code></p><p>This is used in <a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/Pages/Shared/Header.cshtml" target="_blank" rel="noopener noreferrer">Header.cshtml</a> to <strong>boost</strong> all main navigation links:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">hx-boost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/Blog<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>htmlx has lots of useful <a href="https://htmx.org/examples/" target="_blank" rel="noopener noreferrer">real world examples</a> that can be activated with declarative attributes, another feature the <strong>vue-mjs</strong> template uses is the <a href="https://htmx.org/extensions/class-tools/" target="_blank" rel="noopener noreferrer">class-tools</a> extension to hide elements from appearing until after the page is loaded:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>signin<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden mt-5 flex justify-center<span class="token punctuation">&quot;</span></span> <span class="token attr-name">classes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>remove hidden:load<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    @Html.SrcPage(&quot;SignIn.mjs&quot;)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Which reduces UI yank from not showing server rendered content before JS components have loaded.</p><h3 id="fast-pre-rendered-static-generated-razor-pages" tabindex="-1">Fast pre-rendered static generated Razor Pages <a class="header-anchor" href="#fast-pre-rendered-static-generated-razor-pages" aria-hidden="true">#</a></h3><p><a href="https://vue-mjs.web-templates.io/blog/prerendering" target="_blank" rel="noopener noreferrer"><img src="https://images.unsplash.com/photo-1522526886914-6e8d4fd91399?crop=entropy&amp;fit=crop&amp;h=500&amp;w=1000" alt=""></a></p><p>Whilst not required, the <strong>vue-mjs</strong> template also includes support for pre-rendering static content from Razor Pages.</p><p>Prerendering static content is a popular technique used by JAMStack Apps to improve the performance, reliability and scalability of Web Apps that&#39;s able to save unnecessary computation at runtime by generating static content at deployment which can be optionally hosted from a CDN for even greater performance.</p><p>As such we thought it a valuable technique to include the <strong>vue-mjs</strong> template to show how it can be easily achieved within a Razor Pages App. Since prerendered content is only updated at deployment, it&#39;s primarily only useful for static content like <a href="https://vue-mjs.web-templates.io/blog/prerendering" target="_blank" rel="noopener noreferrer">this Blog</a> which is powered by the static markdown content in <a href="https://github.com/NetCoreTemplates/vue-mjs/tree/main/MyApp/wwwroot/_blog/posts" target="_blank" rel="noopener noreferrer">_blog/posts</a> whose content is prerendered to <code>/wwwroot/blog</code>.</p><p>For those interested in utilizing this optimization we&#39;ve published details on how this works in the <strong><a href="https://vue-mjs.web-templates.io/blog/prerendering" target="_blank" rel="noopener noreferrer">Prerendering Razor Pages</a></strong> blog post.</p><h2 id="develop-using-jetbrains-rider" tabindex="-1">Develop using JetBrains Rider <a class="header-anchor" href="#develop-using-jetbrains-rider" aria-hidden="true">#</a></h2><a href="https://www.jetbrains.com/rider/"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/svg/rider.svg" class="sm:float-left mr-8 w-24 h-24" style="margin-top:0;"></a><p>Given it&#39;s best-of-class support for Web Development we recommend using JetBrains Rider for any kind of JS or TypeScript development. If you&#39;re using Rider checkout the <strong><a href="https://vue-mjs.web-templates.io/blog/rider" target="_blank" rel="noopener noreferrer">Develop using JetBrains Rider</a></strong> blog post for an optimal setup for Vue.js and Tailwind Web Apps.</p><h2 id="develop-using-visual-studio" tabindex="-1">Develop using Visual Studio <a class="header-anchor" href="#develop-using-visual-studio" aria-hidden="true">#</a></h2><a href="https://visualstudio.microsoft.com/" title="VS Code" class="sm:float-left mr-8"><svg class="w-24 h-24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 254"><defs><linearGradient id="logosVisualStudioCode0" x1="50%" x2="50%" y1="0%" y2="100%"><stop offset="0%" stop-color="#FFF"></stop><stop offset="100%" stop-color="#FFF" stop-opacity="0"></stop></linearGradient><path id="logosVisualStudioCode1" d="M180.828 252.605a15.872 15.872 0 0 0 12.65-.486l52.501-25.262a15.94 15.94 0 0 0 9.025-14.364V41.197a15.939 15.939 0 0 0-9.025-14.363l-52.5-25.263a15.877 15.877 0 0 0-18.115 3.084L74.857 96.35l-43.78-33.232a10.614 10.614 0 0 0-13.56.603L3.476 76.494c-4.63 4.211-4.635 11.495-.012 15.713l37.967 34.638l-37.967 34.637c-4.623 4.219-4.618 11.502.012 15.714l14.041 12.772a10.614 10.614 0 0 0 13.56.604l43.78-33.233l100.507 91.695a15.853 15.853 0 0 0 5.464 3.571Zm10.464-183.649l-76.262 57.889l76.262 57.888V68.956Z"></path></defs><mask id="logosVisualStudioCode2" fill="#fff"><use href="#logosVisualStudioCode1"></use></mask><path fill="#0065A9" d="M246.135 26.873L193.593 1.575a15.885 15.885 0 0 0-18.123 3.08L3.466 161.482c-4.626 4.219-4.62 11.502.012 15.714l14.05 12.772a10.625 10.625 0 0 0 13.569.604L238.229 33.436c6.949-5.271 16.93-.315 16.93 8.407v-.61a15.938 15.938 0 0 0-9.024-14.36Z" mask="url(#logosVisualStudioCode2)"></path><path fill="#007ACC" d="m246.135 226.816l-52.542 25.298a15.887 15.887 0 0 1-18.123-3.08L3.466 92.207c-4.626-4.218-4.62-11.502.012-15.713l14.05-12.773a10.625 10.625 0 0 1 13.569-.603l207.132 157.135c6.949 5.271 16.93.315 16.93-8.408v.611a15.939 15.939 0 0 1-9.024 14.36Z" mask="url(#logosVisualStudioCode2)"></path><path fill="#1F9CF0" d="M193.428 252.134a15.892 15.892 0 0 1-18.125-3.083c5.881 5.88 15.938 1.715 15.938-6.603V11.273c0-8.318-10.057-12.483-15.938-6.602a15.892 15.892 0 0 1 18.125-3.084l52.533 25.263a15.937 15.937 0 0 1 9.03 14.363V212.51c0 6.125-3.51 11.709-9.03 14.363l-52.533 25.262Z" mask="url(#logosVisualStudioCode2)"></path><path fill="url(#logosVisualStudioCode0)" fill-opacity=".25" d="M180.828 252.605a15.874 15.874 0 0 0 12.65-.486l52.5-25.263a15.938 15.938 0 0 0 9.026-14.363V41.197a15.939 15.939 0 0 0-9.025-14.363L193.477 1.57a15.877 15.877 0 0 0-18.114 3.084L74.857 96.35l-43.78-33.232a10.614 10.614 0 0 0-13.56.603L3.476 76.494c-4.63 4.211-4.635 11.495-.012 15.713l37.967 34.638l-37.967 34.637c-4.623 4.219-4.618 11.502.012 15.714l14.041 12.772a10.614 10.614 0 0 0 13.56.604l43.78-33.233l100.506 91.695a15.857 15.857 0 0 0 5.465 3.571Zm10.464-183.65l-76.262 57.89l76.262 57.888V68.956Z" mask="url(#logosVisualStudioCode2)"></path></svg></a><p>If you prefer using VS .NET we recommend using VS Code for all your Apps JS front-end development and optionally VS .NET for the back-end C#/.NET development of large .NET Projects. If using VS checkout <strong><a href="https://vue-mjs.web-templates.io/blog/vs" target="_blank" rel="noopener noreferrer">Develop using Visual Studio</a></strong> blog post for an optimal setup for utilizing Vue.js composition API and Tailwind.</p><div class="clear-both"></div><h2 id="feedback-welcome" tabindex="-1">Feedback Welcome! <a class="header-anchor" href="#feedback-welcome" aria-hidden="true">#</a></h2><p>We hope you enjoy these exciting new templates in this release, as always if you have any questions or feedback in this release please let us know in <a href="https://github.com/ServiceStack/Discuss/discussions" target="_blank" rel="noopener noreferrer">ServiceStack/Discuss</a> GitHub Discussions or the <a href="https://forums.servicestack.net/" target="_blank" rel="noopener noreferrer">Customer Forums</a>.</p><h2 id="servicestack-client-now-dependency-free" tabindex="-1">@servicestack/client now dependency-free <a class="header-anchor" href="#servicestack-client-now-dependency-free" aria-hidden="true">#</a></h2><p>Now that <a href="https://blog.logrocket.com/fetch-api-node-js/" target="_blank" rel="noopener noreferrer">fetch has finally landed</a> in Node.js v18+ LTS we&#39;ve gone ahead and removed all polyfills to make <strong>@servicestack/client</strong> dependency-free in its latest major <strong>v2.x</strong> version!</p><p>This should have no effect when using <a href="/javascript-client">JsonServiceClient</a> in Browsers which uses its native <code>fetch()</code> or from Node.js v18+ that now has native <code>fetch</code> support as well.</p><h3 id="servereventsclient-in-node-js" tabindex="-1">ServerEventsClient in Node.js <a class="header-anchor" href="#servereventsclient-in-node-js" aria-hidden="true">#</a></h3><p>But Node.js projects using <a href="/typescript-server-events-client">ServerEventsClient</a> (e.g. in tests) now require a polyfill:</p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> <span class="token function">install</span> eventsource
</code></pre></div><p>Then polyfill with:</p><div class="language-ts"><pre><code>globalThis<span class="token punctuation">.</span>EventSource <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;eventsource&quot;</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="jsonserviceclient-in-node-js-v18" tabindex="-1">JsonServiceClient in Node.js &lt; v18 <a class="header-anchor" href="#jsonserviceclient-in-node-js-v18" aria-hidden="true">#</a></h3><p>Older Node.js runtimes using <code>JsonServiceClient</code> can continue using the existing <strong>v1.x</strong> version or polyfill <code>fetch</code> with:</p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> <span class="token function">install</span> cross-fetch
</code></pre></div><p>Then polyfill with:</p><div class="language-js"><pre><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cross-fetch/polyfill&#39;</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="msvr-76883" tabindex="-1">MSVR 76883 <a class="header-anchor" href="#msvr-76883" aria-hidden="true">#</a></h2><p>We&#39;ve received a vulnerability report from the Microsoft Vulnerability Research team last week who found a potential vulnerability in ServiceStack.Redis (.NET Framework) if an attack is able to write a malicious string into a Redis Server and trick an Application into reading it back into a C# DTO with a nested complex type containing a late-bound <code>object</code> property, the report reads:</p><blockquote><p>This attack requires a malicious string to be written to the Redis cache and then read back as an object. The most likely attack pattern here is going to involve some sort of injection attack where an application can be tricked into writing untrusted data to a Redis cache that it will later read back.</p></blockquote><p>Unfortunately it&#39;s another example of exploiting the same issue that&#39;s plagued .NET Serializers for years where the existence of dangerous classes in .NET Framework where setting a public instance property can cause an App to load and execute code in an external .dll requires all .NET Serializers supporting dynamic payloads to maintain a <a href="/json-format#late-bound-object-and-interface-runtime-types">Runtime Type Whitelist</a> of Types that are allowed to be dynamically instantiated in <code>object</code> properties.</p><p>This vulnerability found a nested structure code path which skipped the whitelist checks which has since been resolved in this release.</p><p>As a result existing code deserializing non-whitelisted unverified types in late-bound <code>object</code> properties will start throwing <code>NotSupportedException</code>, to resolve, Types needs to be allowed in the <a href="/json-format#runtime-type-whitelist">Runtime Type Whitelist</a> which by default can be annotated with:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DataContract</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RuntimeSerializable</span></span><span class="token punctuation">]</span>
</code></pre></div><p>Or implement one of these interfaces:</p><div class="language-csharp"><pre><code>ISerializable
IConvertible
IRuntimeSerializable
IReturn<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>
IReturnVoid
IMeta
IVerb                 <span class="token comment">// IGet, IPost, IPut, IPatch, etc  </span>
ICrud                 <span class="token comment">// ICreateDb\`1, IUpdateDb\`1, etc</span>
IAuthTokens
IHasResponseStatus
IHasId<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>
</code></pre></div><p>Effectively it looks to allow any serializable models and DTOs it can find by looking at all available heuristics.</p>`,106),zn='{"title":"ServiceStack v6.6","description":"","frontmatter":{"title":"ServiceStack v6.6"},"headers":[{"level":3,"title":"JavaScript Modules","slug":"javascript-modules"},{"level":2,"title":"Modern Vue.js Tailwind .NET Apps","slug":"modern-vue-js-tailwind-net-apps"},{"level":2,"title":"Vue.js Tailwind Live Demos","slug":"vue-js-tailwind-live-demos"},{"level":3,"title":"Vue.js Bootstrap Razor Pages Template","slug":"vue-js-bootstrap-razor-pages-template"},{"level":2,"title":"JS Modules Quick Look","slug":"js-modules-quick-look"},{"level":3,"title":"Dynamically Loading Multiple JS Modules","slug":"dynamically-loading-multiple-js-modules"},{"level":3,"title":"Best mix of Productivity vs Simplicity","slug":"best-mix-of-productivity-vs-simplicity"},{"level":3,"title":"Various WebApp DTO Options","slug":"various-webapp-dto-options"},{"level":3,"title":"Common.js ES3 DTOs","slug":"common-js-es3-dtos"},{"level":3,"title":"TypeScript DTOs","slug":"typescript-dtos"},{"level":3,"title":"JS Module ES6 class DTOs","slug":"js-module-es6-class-dtos"},{"level":3,"title":".mjs Add ServiceStack Reference","slug":"mjs-add-servicestack-reference"},{"level":2,"title":"Multi Page Apps","slug":"multi-page-apps"},{"level":3,"title":"Bringing Simplicity Back","slug":"bringing-simplicity-back"},{"level":3,"title":"Best libraries for progressive Multi Page Apps","slug":"best-libraries-for-progressive-multi-page-apps"},{"level":3,"title":"Tailwind","slug":"tailwind"},{"level":3,"title":"Vue 3","slug":"vue-3"},{"level":3,"title":"@servicestack/client","slug":"servicestack-client"},{"level":3,"title":"useClient","slug":"useclient"},{"level":3,"title":"Form Validation","slug":"form-validation"},{"level":3,"title":"AutoForm Components","slug":"autoform-components"},{"level":3,"title":"Form Input Components","slug":"form-input-components"},{"level":3,"title":"FileInput","slug":"fileinput"},{"level":3,"title":"TagInput","slug":"taginput"},{"level":3,"title":"Autocomplete","slug":"autocomplete"},{"level":3,"title":"useAuth","slug":"useauth"},{"level":3,"title":"Import Maps","slug":"import-maps"},{"level":3,"title":"Fast Component Loading","slug":"fast-component-loading"},{"level":3,"title":"Fast Page Loading","slug":"fast-page-loading"},{"level":3,"title":"Fast pre-rendered static generated Razor Pages","slug":"fast-pre-rendered-static-generated-razor-pages"},{"level":2,"title":"Develop using JetBrains Rider","slug":"develop-using-jetbrains-rider"},{"level":2,"title":"Develop using Visual Studio","slug":"develop-using-visual-studio"},{"level":2,"title":"Feedback Welcome!","slug":"feedback-welcome"},{"level":2,"title":"@servicestack/client now dependency-free","slug":"servicestack-client-now-dependency-free"},{"level":3,"title":"ServerEventsClient in Node.js","slug":"servereventsclient-in-node-js"},{"level":3,"title":"JsonServiceClient in Node.js < v18","slug":"jsonserviceclient-in-node-js-v18"},{"level":2,"title":"MSVR 76883","slug":"msvr-76883"}],"relativePath":"releases/v6_6.md"}',In={},Fn=Object.assign(In,{__name:"v6_6",setup(u){const{setMetadata:t}=j();return t(T),(k,o)=>{const r=d("AutoCreateForm");return c(),l("div",null,[O,U,n("div",null,[s(a(e),{icon:"vscode-icons:file-type-js-official",class:"w-80 h-80 block mx-auto"})]),W,n("div",L,[n("div",null,[s(a(e),{icon:"vscode-icons:file-type-vue",class:"w-24 h-24 mr-8"}),s(a(e),{icon:"logos:tailwindcss-icon",class:"w-28 h-28"})])]),G,s(b),$,Q,Z,Y,n("div",K,[s(a(e),{icon:"logos:bootstrap",class:"my-8 w-24 h-24"})]),X,nn,sn,an,tn,en,n("div",pn,[on,n("div",cn,[s(a(e),{icon:"clarity:rack-server-line",class:"w-40 h-40 text-slate-500"}),s(a(e),{icon:"mdi:horizontal-line",class:"w-40 h-40 text-slate-500"}),s(a(e),{icon:"mdi:cloud-print-outline",class:"w-40 h-40 text-slate-500"}),s(a(e),{icon:"mdi:horizontal-line",class:"w-40 h-40 text-slate-500"}),s(a(e),{icon:"ps:browser",class:"mt-4 w-36 h-36 text-slate-500"})])]),n("p",null,[(c(),l("svg",ln,kn))]),dn,n("div",gn,[s(a(e),{icon:"logos:tailwindcss-icon",class:"mx-auto block w-20 h-20"})]),mn,hn,n("div",vn,[s(a(e),{icon:"vscode-icons:file-type-vue",class:"mx-auto block mt-8 w-20 h-20"})]),fn,n("div",yn,[s(F,{id:"hello",name:"Vue 3",class:"text-2xl py-4"})]),wn,n("div",bn,[s(B,{class:"text-2xl py-4 select-none cursor-pointer"})]),qn,n("div",xn,[s(N,{class:"text-center text-2xl py-4"})]),Sn,_n,s(q,{"data-id":"VueComponentGallery"}),jn,Tn,n("div",An,[s(r,{type:"CreateBooking",formStyle:"card"})]),Cn])}}});export{zn as __pageData,Fn as default};
