import{_ as s}from"./chunks/custom-bookingpage.68b9ec3b.js";import{_ as n,o as a,c as o,a as t}from"./app.2aea72c0.js";const w='{"title":"Custom AutoQueryGrid","description":"","frontmatter":{"title":"Custom AutoQueryGrid"},"headers":[{"level":3,"title":"{DataModel}Page","slug":"datamodel-page"}],"relativePath":"locode/custom-autoquerygrid.md"}',p={},e=t(`<p>Locode lets you easily replace entire Locode Pages with your own, thanks to the reusable <a href="/vue/gallery/autoquerygrid">AutoQueryGrid</a> component in the <a href="/vue/">Vue Component Library</a> which lets you reuse custom components in your Vue Project templates to replace functionality in Locode, e.g. we can copy the custom <a href="https://vue-mjs.web-templates.io/bookings-auto" target="_blank" rel="noopener noreferrer">Bookings AutoQueryGrid</a> Vue 3 component in the new <a href="https://vue-mjs.web-templates.io" target="_blank" rel="noopener noreferrer">vue-mjs</a> Project Template and use it to manage our Bookings in Locode by registering a Vue 3 component with the name:</p><h3 id="datamodel-page" tabindex="-1"><code>{DataModel}Page</code> <a class="header-anchor" href="#datamodel-page" aria-hidden="true">#</a></h3><p>That we can auto register with Locode by adding it in our <strong>/wwwroot</strong> folder at <code>/modules/locode/components/*.mjs</code>.</p><p>Which we&#39;ve added in our Blazor Gallery App, in <a href="https://github.com/NetCoreApps/BlazorGallery/blob/main/Gallery.Server/wwwroot/modules/locode/components/BookingPage.mjs" target="_blank" rel="noopener noreferrer">/modules/locode/components/BookingPage.mjs</a> containing our custom Bookings AutoQueryGrid component:</p><div class="language-csharp"><pre><code>import <span class="token punctuation">{</span> inject<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>
import <span class="token punctuation">{</span> QueryCoupons <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;/types/mjs&quot;</span>

export <span class="token keyword">const</span> BookingPage <span class="token operator">=</span> <span class="token punctuation">{</span>
    template<span class="token punctuation">:</span>\`
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>h1 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;py-8 text-center text-3xl text-indigo-700 font-semibold&quot;</span><span class="token operator">&gt;</span>Custom Bookings AutoQueryGrid<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token class-name">AutoQueryGrid</span> type<span class="token operator">=</span><span class="token string">&quot;Booking&quot;</span> selected<span class="token operator">-</span>columns<span class="token operator">=</span><span class="token string">&quot;id,name,cost,bookingStartDate,bookingEndDate,discount,notes&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>template #discount<span class="token operator">=</span><span class="token string">&quot;{ discount }&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>TextLink v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;discount&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;flex items-end&quot;</span> @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">&quot;showCoupon(discount.id)&quot;</span> <span class="token punctuation">:</span>title<span class="token operator">=</span><span class="token string">&quot;discount.id&quot;</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>Icon <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;w-5 h-5 mr-1&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;Coupon&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>PreviewFormat <span class="token punctuation">:</span><span class="token keyword">value</span><span class="token operator">=</span><span class="token string">&quot;discount.description&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>TextLink<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>AutoQueryGrid<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>AutoEditForm v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;coupon&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;UpdateCoupon&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;coupon&quot;</span> @done<span class="token operator">=</span><span class="token string">&quot;close&quot;</span> @save<span class="token operator">=</span><span class="token string">&quot;close&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    \`<span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">props</span><span class="token punctuation">:</span><span class="token punctuation">[</span>&#39;type&#39;<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>&#39;client&#39;<span class="token punctuation">)</span>
        <span class="token keyword">const</span> coupon <span class="token operator">=</span> <span class="token keyword">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">async</span> <span class="token return-type class-name">function</span> <span class="token function">showCoupon</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryCoupons</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                coupon<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">=</span> api<span class="token punctuation">.</span>response<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> close <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> coupon<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> coupon<span class="token punctuation">,</span> showCoupon<span class="token punctuation">,</span> close <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Where our custom version will open the related <strong>Coupon</strong> entry for the booking allowing both Bookings and their Coupons to be managed from the same page.</p><p>Now when <strong>Booking</strong> is selected in Locode it will load our custom version:</p><a href="https://blazor-gallery.servicestack.net/locode/QueryBookings" class="not-prose max-w-4xl"><div class="block flex justify-center shadow hover:shadow-lg rounded"><img class="" src="`+s+'"></div></a>',8),c=[e];function r(l,u,k,i,d,g){return a(),o("div",null,c)}var h=n(p,[["render",r]]);export{w as __pageData,h as default};
