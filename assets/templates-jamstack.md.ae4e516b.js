import{_ as n}from"./chunks/cdn-world-view.f979325b.js";import{_ as r,a as o,b as p,c as i,d as l,e as c}from"./chunks/JamstackBookingsCrud.d01920da.js";import{_ as d}from"./chunks/next-black.60b3e95b.js";import{_ as u}from"./chunks/JamstackTemplates.f5c84bd7.js";import{I as h}from"./chunks/iconify.2272db1b.js";import{o as g,c as m,e as a,d as e,u as k,a as t,b as s}from"./app.2aea72c0.js";const f=t('<p>ServiceStack&#39;s Jamstack templates encapsulates the latest technologies at the forefront of modern web development to deliver both a great <strong>developer experience</strong> and <strong>performant</strong> end-user UX.</p><p><a href="https://jamstack.org/what-is-jamstack" target="_blank" rel="noopener noreferrer">Jamstack</a> (<strong>J</strong>avaScript, <strong>A</strong>PIs, and <strong>M</strong>arkup) is a modern architecture pattern to build fast, secure and easy to scale web applications where pre-rendering content, enhancing with JavaScript and leveraging CDN static hosting results in a highly productive, flexible and performant system that takes advantage of CDN edge caches to deliver <strong>greater performance</strong> &amp; efficiency at <strong>lower cost</strong>.</p>',2),b=e("a",{href:"https://jamstacks.net",class:"my-8 py-8 flex justify-center text-gray-600 hover:no-underline",title:"jamstacks.net"},[e("div",{class:"flex justify-center items-end p-4 pt-0 border-2 border-solid border-transparent rounded hover:border-indigo-600"},[e("svg",{viewBox:"0 0 256 256",class:"w-20 h-20 mr-2",alt:"Jamstacks logo"},[e("path",{d:"M128 0C57.221 0 0 57.221 0 128c0 70.778 57.221 128 128 128c70.778 0 128-57.222 128-128V0H128z",fill:"#F0047F"}),e("path",{d:"M121.04 134.96v93.312c-49.663-2.837-89.64-42.345-93.215-91.81l-.097-1.502h93.312zm90.962 0c-2.6 49.664-38.816 89.64-84.159 93.215l-1.377.097V134.96h85.536zm.112-91.074v85.648h-85.648V43.886h85.648z",fill:"#FFF"})]),e("h1",{class:"text-8xl font-bold"},"Jamstacks"),e("div",{class:"ml-4 bg-purple-600 text-white py-1 pb-2 px-3 rounded-md text-7xl"},".NET")])],-1),v=t('<h3 id="jamstack-benefits" tabindex="-1">Jamstack Benefits <a class="header-anchor" href="#jamstack-benefits" aria-hidden="true">#</a></h3><p>It&#39;s become the preferred architecture for modern performant web apps with <a href="https://jamstack.org/why-jamstack/" target="_blank" rel="noopener noreferrer">benefits</a> extending beyond performance to improved:</p><ul><li><strong>Security</strong> from a reduced attack surface from hosting read-only static resources and requiring fewer App Servers</li><li><strong>Scale</strong> with non-essential load removed from App Servers to CDN&#39;s architecture capable of incredible scale &amp; load capacity</li><li><strong>Maintainability</strong> resulting from reduced hosting complexity and the clean decoupling of UI and server logic</li><li><strong>Portability</strong> with your static UI assets being easily capable from being deployed and generically hosted from any CDN or web server</li><li><strong>Developer Experience</strong> with major JavaScript Frameworks embracing Jamstack in their dev model, libraries &amp; tooling</li></ul><p>Ultimately, it&#39;s hosting your App&#39;s pre-rendered static UI assets on Content Delivery Network (CDN) edge caches close to users locations that&#39;s primarily responsible for its lightning performance.</p><p><img src="'+n+'" alt=""></p><h3 id="_0-40-month" tabindex="-1">$0.40 /month <a class="header-anchor" href="#_0-40-month" aria-hidden="true">#</a></h3><p>Other by-products of generating pre-computed CDN hostable assets, is interchangeable cost-effective hosting and great SEO - characteristics our Jamstack Demos take advantage of with free <strong>UI</strong> hosting on GitHub Pages CDN leaving their only cost to host its <strong>.NET 6 API</strong> back-ends, deployed with SSH in Docker compose containers to a vanilla <a href="https://www.digitalocean.com" target="_blank" rel="noopener noreferrer">Digital Ocean</a> droplet costing only <strong><a href="https://vue-ssg.jamstacks.net/hosting" target="_blank" rel="noopener noreferrer">$0.40 /month each</a></strong>.</p><h3 id="recommended-templates" tabindex="-1">Recommended Templates <a class="header-anchor" href="#recommended-templates" aria-hidden="true">#</a></h3><p>These templates represent the best-in class experiences for their respective <strong>React</strong>, <strong>Vue</strong> &amp; <strong>Blazor WASM</strong> ecosystems each, packed with features &amp; examples common in many websites including Integrated Auth, rich Markdown content as well as TODOs MVC and CRUD examples with built-in contextual validation binding. As such they&#39;re <strong>now recommended</strong> over our existing SPA and C# MVC Templates.</p><p>We&#39;ve put together a quick check list to help decide which templates we&#39;d recommend:</p><table><thead><tr><th>Project</th><th>Recommendation</th></tr></thead><tbody><tr><td><a href="https://github.com/NetCoreTemplates/nextjs" target="_blank" rel="noopener noreferrer">Next.js</a></td><td>If you prefer React</td></tr><tr><td><a href="https://github.com/NetCoreTemplates/vue-ssg" target="_blank" rel="noopener noreferrer">Vue SSG</a></td><td>If you prefer Vue and SEO is important</td></tr><tr><td><a href="/templates-blazor-tailwind">Blazor Tailwind</a></td><td>If you prefer a full C# Stack or are developing Line of Business (LOB) Apps</td></tr><tr><td><a href="https://github.com/NetCoreTemplates/vue-vite" target="_blank" rel="noopener noreferrer">Vue SPA</a></td><td>If you prefer Vue and happy to trade SEO benefits of SSG for a simpler template</td></tr><tr><td><a href="/templates-blazor">Blazor WASM</a></td><td>If you prefer using Blazor WASM with Bootstrap CSS</td></tr></tbody></table><p>Still not sure? familiarize yourself with their respective dev models by comparing their functionality equivalent TODOs MVC Examples:</p><h3 id="todos-mvc" tabindex="-1">TODOs MVC <a class="header-anchor" href="#todos-mvc" aria-hidden="true">#</a></h3>',13),w=t('<p>All projects utilize the same back-end ServiceStack Services with <strong>TODOs MVC</strong> implemented in <a href="https://github.com/NetCoreTemplates/blazor-wasm/blob/main/MyApp.ServiceInterface/TodosServices.cs" target="_blank" rel="noopener noreferrer">TodosServices.cs</a>.</p><p>As <strong>Bookings CRUD</strong> is an <a href="/autoquery-crud">AutoQuery CRUD</a> API, it defines <a href="/autoquery-crud-bookings">all its functionality</a> in its declarative <a href="https://github.com/NetCoreTemplates/blazor-wasm/blob/main/MyApp.ServiceModel/Bookings.cs" target="_blank" rel="noopener noreferrer">Bookings.cs</a> DTOs and serves as a good example for the minimal dev model effort required to implement a typical Authenticated CRUD UI in each framework:</p><h3 id="bookings-crud" tabindex="-1">Bookings CRUD <a class="header-anchor" href="#bookings-crud" aria-hidden="true">#</a></h3>',3),_=e("p",{class:"text-center"},[s("Once you know the framework you wish to use, create a new App using your preferred "),e("b",null,"Project Name"),s(" below:")],-1),y=e("h3",{class:"text-center"},"Download new C# Jamstack Project Template",-1),S=t('<div class="info custom-block"><p class="custom-block-title">INFO</p><p>An updated list of available Jamstack project templates will be maintained at <a href="https://jamstacks.net" target="_blank" rel="noopener noreferrer">https://jamstacks.net</a> (built with Vue SSG)</p></div><h3 id="pre-configured-jamstack-app-deployments" tabindex="-1">Pre-configured Jamstack App Deployments <a class="header-anchor" href="#pre-configured-jamstack-app-deployments" aria-hidden="true">#</a></h3><p>All project templates supports CDN hostable UI assets and include the <a href="https://vue-ssg.jamstacks.net/posts/deploy" target="_blank" rel="noopener noreferrer">necessary GitHub Actions</a> that takes care of building and SSH deploying a Docker compose production build of your App to any Linux Host with just a few GitHub Action Secrets in your GitHub repo.</p><p>The optional <code>DEPLOY_CDN</code> secret lets you control whether to deploy your App&#39;s static <code>/wwwroot</code> assets to your GitHub Pages CDN by specifying the custom domain to use and is what all JamStack Live demos used to deploy a copy of their UIs to GitHub Pages CDN:</p><table><thead><tr><th>Project Source</th><th>GitHub Pages CDN</th><th>Digital Ocean Docker .NET API</th></tr></thead><tbody><tr><td><a href="https://github.com/NetCoreTemplates/nextjs" target="_blank" rel="noopener noreferrer">nextjs</a></td><td><a href="http://nextjs.jamstacks.net" target="_blank" rel="noopener noreferrer">nextjs.jamstacks.net</a></td><td><a href="http://nextjs-api.jamstacks.net" target="_blank" rel="noopener noreferrer">nextjs-api.jamstacks.net</a></td></tr><tr><td><a href="https://github.com/NetCoreTemplates/vue-ssg" target="_blank" rel="noopener noreferrer">vue-ssg</a></td><td><a href="http://vue-ssg.jamstacks.net" target="_blank" rel="noopener noreferrer">vue-ssg.jamstacks.net</a></td><td><a href="http://vue-ssg-api.jamstacks.net" target="_blank" rel="noopener noreferrer">vue-ssg-api.jamstacks.net</a></td></tr><tr><td><a href="https://github.com/NetCoreTemplates/blazor-tailwind" target="_blank" rel="noopener noreferrer">blazor-tailwind</a></td><td><a href="http://blazor-tailwind.jamstacks.net" target="_blank" rel="noopener noreferrer">blazor-tailwind.jamstacks.net</a></td><td><a href="http://blazor-tailwind-api.jamstacks.net" target="_blank" rel="noopener noreferrer">blazor-tailwind-api.jamstacks.net</a></td></tr><tr><td><a href="https://github.com/NetCoreTemplates/vue-spa" target="_blank" rel="noopener noreferrer">vue-spa</a></td><td><a href="http://vue-spa.jamstacks.net" target="_blank" rel="noopener noreferrer">vue-spa.jamstacks.net</a></td><td><a href="http://vue-spa-api.jamstacks.net" target="_blank" rel="noopener noreferrer">vue-spa-api.jamstacks.net</a></td></tr><tr><td><a href="https://github.com/NetCoreTemplates/blazor-wasm" target="_blank" rel="noopener noreferrer">blazor-wasm</a></td><td><a href="http://blazor-wasm.jamstacks.net" target="_blank" rel="noopener noreferrer">blazor-wasm.jamstacks.net</a></td><td><a href="http://blazor-wasm-api.jamstacks.net" target="_blank" rel="noopener noreferrer">blazor-wasm-api.jamstacks.net</a></td></tr></tbody></table><h2 id="blazor-webassembly" tabindex="-1">Blazor WebAssembly <a class="header-anchor" href="#blazor-webassembly" aria-hidden="true">#</a></h2><p>The <a href="/templates-blazor">Blazor WebAssembly (WASM)</a> template offers a pure end-to-end integrated C# solution to building a high performance web application with <a href="https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor" target="_blank" rel="noopener noreferrer">Blazor</a> and ServiceStack. Due to the integrated dev model we&#39;ve been able to achieve in Blazor it&#39;s become <strong>our preferred technology</strong> to use to develop <strong>Line of Business Apps</strong> since it&#39;s the only C# Razor solution adopting our preferred <a href="/api-first-development">API First Development</a> model with Web UIs reusing the same well-defined APIs as Mobile and Desktop Apps.</p>',7),x=e("iframe",{width:"980",height:"551",src:"https://www.youtube.com/embed/TIgjMf_vtCI",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:""},null,-1),j=t('<h3 id="great-perceived-performance-and-seo" tabindex="-1">Great Perceived Performance and SEO <a class="header-anchor" href="#great-perceived-performance-and-seo" aria-hidden="true">#</a></h3><p>Typically the <strong>large download sizes</strong> &amp; slow initial load times of Blazor WASM Apps would make it a poor choice for Internet hosted sites. However, our Blazor WASM template has largely mitigated this with easily maintainable built-in pre-rendering techniques to make every page appear to load quickly, including <strong>instant loading</strong> of its Markdown Pages courtesy of the GitHub Actions publish task generating &amp; deploying pre-rendered content pages.</p><p class="pt-3 text-center">You can see the results of this in its live demo when loading the home page, which only has a slight delay:</p><a class="flex flex-col justify-center items-center hover:no-underline mb-8" href="https://blazor-wasm.jamstacks.net"><h3 class="mb-3">blazor-wasm.jamstacks.net</h3><img src="'+p+'" class="border border-solid border-gray-200 max-w-screen-sm"></a><p class="pt-3 text-center">Whilst the markdown page explaining how it&#39;s done <b>loads instantly</b></p><a class="flex flex-col justify-center items-center hover:no-underline mb-8" href="https://blazor-wasm.jamstacks.net/docs/prerender"><h3 class="mb-3">blazor-wasm.jamstacks.net/docs/prerender</h3><img src="'+i+'" class="border border-solid border-gray-200 max-w-screen-sm"></a><p>In both cases pages are rendered before Blazor WASM has loaded allowing users to familiarize themselves with each page whilst Blazor WASM loads itself in the background. The resulting <strong>SEO benefits</strong> are especially valuable for the pre-rendered Markdown pages and lets users start reading your content instantly.</p><h3 id="learn-more" tabindex="-1">Learn more <a class="header-anchor" href="#learn-more" aria-hidden="true">#</a></h3><p>To find out more watch its <a href="https://youtu.be/TIgjMf_vtCI" target="_blank" rel="noopener noreferrer">YouTube overview</a> and visit the <a href="/templates-blazor">Blazor WASM docs</a>.</p><h2 id="next-js" tabindex="-1">Next.js <a class="header-anchor" href="#next-js" aria-hidden="true">#</a></h2><p>For those preferring working with <strong>React</strong>, there&#39;s a clear choice in <a href="http://Nextjs.org" target="_blank" rel="noopener noreferrer">Nextjs.org</a> - currently the flagship &amp; <a href="https://jamstack.org/generators/" target="_blank" rel="noopener noreferrer">most popular Jamstack</a> framework backed by the folks over at <a href="https://vercel.com" target="_blank" rel="noopener noreferrer">Vercel</a>, where it enjoys deep engineering talent committed to maintaining and continually improving it, so you can be confident in the longevity of the technology and the React framework maintained by <a href="https://meta.com" target="_blank" rel="noopener noreferrer">Meta</a> (Facebook).</p><p><a href="https://nextjs.jamstacks.net" title="nextjs.jamstacks.net"><img src="'+d+'" class="mx-auto block"></a></p><p>Designed as an SSG framework from the start, its pre-defined patterns include static generation and UX focused functionality built-in.</p>',13),T=e("iframe",{width:"980",height:"551",src:"https://www.youtube.com/embed/3pPLRyPsO5A",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:""},null,-1),A=t(`<h3 id="stale-while-revalidate" tabindex="-1">Stale While Revalidate <a class="header-anchor" href="#stale-while-revalidate" aria-hidden="true">#</a></h3><p>Its <a href="https://swr.vercel.app" target="_blank" rel="noopener noreferrer">SWR</a> Data Fetching React Hooks library is one innovative example utilizing the popular <a href="https://web.dev/stale-while-revalidate/" target="_blank" rel="noopener noreferrer">stale-while-revalidate</a> UX pattern to help developers balance between <strong>immediacy</strong> \u2014 loading cached content right away \u2014 and <strong>freshness</strong> \u2014 ensuring updates to the cached content are used in the future.</p><p>To take advantage of this, the <a href="https://github.com/NetCoreTemplates/nextjs" target="_blank" rel="noopener noreferrer">nextjs</a> template includes a <code>swrClient</code> that provides a typed wrapper for making typed SWR API Requests with ServiceStack&#39;s generic <a href="https://docs.servicestack.net/typescript-add-servicestack-reference" target="_blank" rel="noopener noreferrer">JsonServiceClient</a>:</p><div class="language-tsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> swrClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../lib/gateway&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../lib/dtos&quot;</span>

<span class="token keyword">const</span> <span class="token function-variable function">HelloApi</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span> error<span class="token punctuation">}</span> <span class="token operator">=</span> swrClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
    <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>error<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>data<span class="token operator">?</span>data<span class="token punctuation">.</span>result<span class="token operator">:</span><span class="token string">&#39;loading...&#39;</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre></div><p>This reactively sets up the UI to handle multiple states:</p><ul><li><code>loading</code> - displays <strong>loading...</strong> message whilst API request is in transit</li><li><code>data</code> - when completed, populated with a <code>HelloResponse</code> and displayed</li><li><code>error</code> - when failed, populated with <code>ResponseStatus</code> and displayed</li></ul><p>The primary UX benefits are realized when re-making an existing request in which a locally-cached <em>stale</em> version is <strong>immediately</strong> returned and displayed whilst a new API Request is made behind the scenes, updating the UI if the fresh response was modified.</p><h2 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-hidden="true">#</a></h2>`,8),C={href:"https://vitejs.dev",class:"flex justify-center mt-8 py-8 hover:no-underline text-gray-700"},I={class:"flex flex-col align-center text-center"},P=e("h3",{class:"text-6xl mb-3 mt-0"},"Vite",-1),V=e("h4",{class:"text-2xl text-gray-400 font-normal"},"Next Generation Frontend Tooling",-1),D=t('<p>Despite Vercel&#39;s full-time resources, Next.js is still reliant on the Webpack ecosystem, who although have done a formidable job managing complex tooling requirements for npm projects over a number of years, has since lost the Developer Experience (DX) crown to <a href="https://vitejs.dev" target="_blank" rel="noopener noreferrer">vitejs.dev</a></p><p>Vite is being <a href="https://vitejs.dev/guide/why.html" target="_blank" rel="noopener noreferrer">built for speed</a> in the modern era and takes advantage of modern browser features like native ES modules support to remove bundling entirely during development and adopts performance leading technologies like <a href="https://github.com/evanw/esbuild" target="_blank" rel="noopener noreferrer">esbuild</a> to pre-bundle dependencies and <a href="https://vitejs.dev/guide/features.html#typescript" target="_blank" rel="noopener noreferrer">transpile TypeScript</a> which is able to do <strong>20-30x</strong> faster than TypeScript&#39;s own <code>tsc</code> compiler.</p><p>Ultimately its architectural choices allows Vite to deliver Lightning Fast <strong>Hot Module Reload</strong> (HMR) to remain at the developer-experience forefront of modern web development serving a <a href="https://vitejs.dev/guide/" target="_blank" rel="noopener noreferrer">growing ecosystem</a> of frameworks with a rich typed suite of <a href="https://vitejs.dev/plugins/" target="_blank" rel="noopener noreferrer">Universal Plugins</a>.</p>',3),N=e("iframe",{width:"980",height:"551",src:"https://www.youtube.com/embed/D-rU0lU_B4I",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:""},null,-1),z=t(`<h3 id="vue-ssg-or-spa" tabindex="-1">Vue SSG or SPA <a class="header-anchor" href="#vue-ssg-or-spa" aria-hidden="true">#</a></h3><p>Both Vue &amp; Vite being led by <a href="https://github.com/yyx990803" target="_blank" rel="noopener noreferrer">Evan You</a>, which ensures both have stellar integration and delivers a well-supported &amp; productive development experience making it the clear choice for any new Vue project.</p><p>Both <a href="http://vue-ssg.jamstacks.net" target="_blank" rel="noopener noreferrer">vue-ssg.jamstacks.net</a> and <a href="http://vue-vite.jamstacks.net" target="_blank" rel="noopener noreferrer">vue-vite.jamstacks.net</a> utilizing the same high-end Vue3, TypeScript and Tailwind components means their included pages like <strong>TODOs MVC</strong>, <strong>Bookings</strong> and <strong>Sign In</strong> contain <strong>identical source code</strong>, the choice on which to use effectively becomes if you need advanced features like <a href="https://www.cloudflare.com/en-au/learning/performance/static-site-generator/" target="_blank" rel="noopener noreferrer">Static Site Generation</a> <strong>(SSG)</strong> and <strong>Dark Mode</strong> or would otherwise prefer to start with a simpler template.</p><h4 id="features-list-comparison" tabindex="-1">Features list comparison <a class="header-anchor" href="#features-list-comparison" aria-hidden="true">#</a></h4><ul><li><a href="http://vue-ssg.jamstacks.net/features" target="_blank" rel="noopener noreferrer">vue-ssg.jamstacks.net/features</a></li><li><a href="http://vue-vite.jamstacks.net/features" target="_blank" rel="noopener noreferrer">vue-vite.jamstacks.net/features</a></li></ul><h3 id="stale-while-revalidate-in-vue3" tabindex="-1">Stale-while-revalidate in Vue3 <a class="header-anchor" href="#stale-while-revalidate-in-vue3" aria-hidden="true">#</a></h3><p>Just like <a href="#stale-while-revalidate">Next.js&#39;s Stale While Revalidate</a>, both Vue templates includes a <code>swrClient</code> providing a typed wrapper around <a href="https://github.com/Kong/swrv" target="_blank" rel="noopener noreferrer">SWVR</a> Vue3 composition library around making typed SWR API Requests using ServiceStack\u2019s typed <code>JsonServiceClient</code>, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ error.message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>{{data ? data.result :&#39;loading...&#39;}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/dtos&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> swrClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/api&quot;</span>

<span class="token keyword">const</span> props <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> swrClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
    <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> props<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Where it yields the same optimal UX with cached API responses rendered instantly before later updating itself if modified.</p><h2 id="vue-ssg" tabindex="-1">Vue SSG <a class="header-anchor" href="#vue-ssg" aria-hidden="true">#</a></h2><p>React &amp; Next.js are primarily corporate-led efforts whilst the Vue ecosystem is largely community led, with one of Vue&#39;s lieutenants <a href="https://github.com/antfu" target="_blank" rel="noopener noreferrer">Anthony Fu</a> being the primary developer behind many of the developer-experience focused features adopted in his <a href="https://github.com/antfu/vite-ssg" target="_blank" rel="noopener noreferrer">vite-ssg</a> project. Most of these features are designed to reduce developer effort by auto registering routes and components by convention which effectively gives it <a href="https://nuxtjs.org" target="_blank" rel="noopener noreferrer">Nuxt</a> like productivity by utilizing hand-picked quality dependencies without needing to be reliant on the slow development pace of a heavy framework like Nuxt.</p><p>Anthony&#39;s own opinionated Vite Starter Template - <a href="https://github.com/antfu/vitesse" target="_blank" rel="noopener noreferrer">Vitesse</a> serves as a great resource for an experienced insight into a curated list of Vue &amp; Vite packages offering the nicest developer experience, although Vue SSG will be more conservative and adopt more well-known technologies like <a href="https://tailwindcss.com/" target="_blank" rel="noopener noreferrer">tailwindcss</a> in favor of <a href="https://github.com/windicss/windicss" target="_blank" rel="noopener noreferrer">Windi CSS</a>.</p><p>Otherwise, it&#39;s still jam-packed full of features for modern Web Apps, including built-in <strong>Dark Mode</strong> support:</p><a class="flex flex-col justify-center items-center my-8" href="https://vue-ssg.jamstacks.net"><img src="`+l+'" class="max-w-screen-md"></a><h2 id="vue-vite" tabindex="-1">Vue Vite <a class="header-anchor" href="#vue-vite" aria-hidden="true">#</a></h2><p>Don&#39;t need SSG or Dark mode? Try the simpler <strong>SPA</strong> template instead:</p><a class="flex flex-col justify-center items-center my-8 pb-8" href="https://vue-vite.jamstacks.net"><img src="'+c+`" class="max-w-screen-md"></a><h2 id="api-route" tabindex="-1">/api route <a class="header-anchor" href="#api-route" aria-hidden="true">#</a></h2><p>Each Jamstack templates are configured to the <code>/api</code> predefined route for JSON APIs:</p><h3 class="text-4xl text-center text-indigo-800 pb-3">/api/{Request}</h3><p>This simple and popular convention makes it easy to remember the route new APIs are immediately available on &amp; also pairs nicely with:</p><h3 class="text-4xl text-center text-indigo-800 pb-3">/ui/{Request}</h3><p>i.e. An easy to remember route for API Explorer&#39;s Auto Form UI, together we expect both to yield greater utility <a href="https://en.wikipedia.org/wiki/Out_of_the_box_(feature)" target="_blank" rel="noopener noreferrer">out-of-the-box</a> in ServiceStack Apps.</p><h3 id="benefits-in-jamstack-apps" tabindex="-1">Benefits in Jamstack Apps <a class="header-anchor" href="#benefits-in-jamstack-apps" aria-hidden="true">#</a></h3><p>The <code>/api</code> route is particularly useful in Jamstack Apps as the 2 ways to call back-end APIs from decoupled UIs hosted on CDNs is to make CORS requests which doesn&#39;t send pre-flight CORS requests for <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests" target="_blank" rel="noopener noreferrer">Simple Browser requests</a>. As such, we can improve the latency of <strong>GET</strong> and <strong>POST</strong> API Requests by configuring our <code>JsonServiceClient</code> to use <code>/api</code> and to not send the <code>Content-Type: application/json</code> HTTP Header which isn&#39;t necessary for <code>/api</code> who always expects and returns JSON:</p><h3 id="configuring-in-typescript" tabindex="-1">Configuring in TypeScript <a class="header-anchor" href="#configuring-in-typescript" aria-hidden="true">#</a></h3><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token constant">API_URL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    c<span class="token punctuation">.</span>basePath <span class="token operator">=</span> <span class="token string">&quot;/api&quot;</span>
    c<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//avoid pre-flight CORS requests</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>It also benefits the <strong>alternative method</strong> to CORS in only needing to define a <strong>single reverse proxy rule</strong> on the CDN host to proxy all API requests to downstream back-end servers.</p>`,28),G='{"title":"C# Jamstack Project Templates","description":"","frontmatter":{"title":"C# Jamstack Project Templates"},"headers":[{"level":3,"title":"Jamstack Benefits","slug":"jamstack-benefits"},{"level":3,"title":"$0.40 /month","slug":"_0-40-month"},{"level":3,"title":"Recommended Templates","slug":"recommended-templates"},{"level":3,"title":"TODOs MVC","slug":"todos-mvc"},{"level":3,"title":"Bookings CRUD","slug":"bookings-crud"},{"level":3,"title":"Pre-configured Jamstack App Deployments","slug":"pre-configured-jamstack-app-deployments"},{"level":2,"title":"Blazor WebAssembly","slug":"blazor-webassembly"},{"level":3,"title":"Great Perceived Performance and SEO","slug":"great-perceived-performance-and-seo"},{"level":3,"title":"Learn more","slug":"learn-more"},{"level":2,"title":"Next.js","slug":"next-js"},{"level":3,"title":"Stale While Revalidate","slug":"stale-while-revalidate"},{"level":2,"title":"Vite","slug":"vite"},{"level":3,"title":"Vue SSG or SPA","slug":"vue-ssg-or-spa"},{"level":3,"title":"Stale-while-revalidate in Vue3","slug":"stale-while-revalidate-in-vue3"},{"level":2,"title":"Vue SSG","slug":"vue-ssg"},{"level":2,"title":"Vue Vite","slug":"vue-vite"},{"level":2,"title":"/api route","slug":"api-route"},{"level":3,"title":"Benefits in Jamstack Apps","slug":"benefits-in-jamstack-apps"},{"level":3,"title":"Configuring in TypeScript","slug":"configuring-in-typescript"}],"relativePath":"templates-jamstack.md"}',R={},F=Object.assign(R,{__name:"templates-jamstack",setup(q){return(O,B)=>(g(),m("div",null,[f,b,v,a(r,{class:"my-8 pb-8"}),w,a(o,{body:"max-w-screen-lg",class:"my-8 pb-8"}),_,y,a(u,{class:"pb-8"}),S,x,j,T,A,e("a",C,[e("div",I,[e("div",null,[a(k(h),{icon:"logos:vitejs",class:"w-60 h-60"})]),P,V])]),D,N,z]))}});export{G as __pageData,F as default};
