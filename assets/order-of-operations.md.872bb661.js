import{_ as e}from"./chunks/servicestack-overview-01.b4b55383.js";import{_ as t,o as s,c as r,a as n}from"./app.2aea72c0.js";var o="/assets/servicestack-overview-02.423c8b02.png";const v='{"title":"HTTP Custom hooks","description":"","frontmatter":{"slug":"order-of-operations"},"headers":[{"level":2,"title":"HTTP Custom hooks","slug":"http-custom-hooks"},{"level":2,"title":"Internal Service Gateway Requests","slug":"internal-service-gateway-requests"},{"level":2,"title":"MQ (non-HTTP) Custom hooks","slug":"mq-non-http-custom-hooks"},{"level":2,"title":"RpcGateway","slug":"rpcgateway"},{"level":2,"title":"Implementation architecture diagram","slug":"implementation-architecture-diagram"}],"relativePath":"order-of-operations.md"}',a={},i=n(`<h2 id="http-custom-hooks" tabindex="-1">HTTP Custom hooks <a class="header-anchor" href="#http-custom-hooks" aria-hidden="true">#</a></h2><p>This list shows the order in which any user-defined custom hooks are executed.</p><p>The first set of filters is used to return the matching <code>IHttpHandler</code> for the request:</p><ol><li><code>HostContext.RawHttpHandlers</code> are executed before anything else, i.e. returning any <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> <code>IHttpHandler</code> by-passes ServiceStack completely and processes your custom <code>IHttpHandler</code> instead.</li><li>Request is checked if matches any registered routes or static files and directories</li><li>If the Request doesn&#39;t match it will search <code>IAppHost.CatchAllHandlers</code> for a match</li><li><code>IAppHost.FallbackHandlers</code> is the last handler executed for finding a handler to handle the request</li></ol><p>Any unmatched requests will not be handled by ServiceStack and either returns a 404 NotFound Response in <strong><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a></strong> or <strong>HttpListener</strong> AppHosts or executes the next middleware in-line in <strong>.NET Core</strong> Apps.</p><p>Requests handled by ServiceStack execute the custom hooks and filters in the following order:</p><ol><li>The <code>IAppHost.PreRequestFilters</code> gets executed before the Request DTO is deserialized</li><li>Default Request DTO Binding or <a href="/serialization-deserialization#create-a-custom-request-dto-binder">Custom Request Binding</a> <em>(if registered)</em></li><li>Any <a href="/customize-http-responses#request-converters">Request Converters</a> are executed</li><li><a href="/filter-attributes">Request Filter Attributes</a> with <strong>Priority &lt; 0</strong> gets executed</li><li>Then any <a href="/request-and-response-filters">Global Request Filters</a> get executed</li><li>Followed by <a href="/filter-attributes">Request Filter Attributes</a> with <strong>Priority &gt;= 0</strong></li><li>Action Request Filters</li><li>Then your <strong>Service is executed</strong> with the configured <a href="/customize-http-responses#intercept-service-requests">Service Filters</a> and <a href="/customize-http-responses#using-a-custom-servicerunner">Service Runner</a> <strong>OnBeforeExecute</strong>, <strong>OnAfterExecute</strong> and <strong>HandleException</strong> custom hooks are fired</li><li>Action Response Filters</li><li>Any <a href="/customize-http-responses#response-converters">Response Converters</a> are executed</li><li>Followed by <a href="/filter-attributes">Response Filter Attributes</a> with <strong>Priority &lt; 0</strong></li><li>Then <a href="/request-and-response-filters">Global Response Filters</a></li><li>Followed by <a href="/filter-attributes">Response Filter Attributes</a> with <strong>Priority &gt;= 0</strong></li><li>Finally at the end of the Request <code>IAppHost.OnEndRequest</code> and any <code>IAppHost.OnEndRequestCallbacks</code> are fired</li></ol><p>Any time you close the Response in any of your filters, i.e. <code>httpRes.EndRequest()</code> the processing of the response is short-circuited and no further processing is done on that request.</p><h2 id="internal-service-gateway-requests" tabindex="-1">Internal Service Gateway Requests <a class="header-anchor" href="#internal-service-gateway-requests" aria-hidden="true">#</a></h2><p>Internal <a href="/service-gateway">Service Gateway</a> Requests are executed using <code>ServiceController.GatewayExecuteAsync</code> API for invoking <strong>internal/trusted</strong> Services:</p><ol><li>Any <code>Gateway</code> <a href="/request-and-response-filters#global-request-and-response-filters">Global Request Filters</a> get executed</li><li>Any Validation Filters</li><li>Action Request Filters</li><li>Then your <strong>Service is executed</strong> with the configured <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Web/IServiceRunner.cs" target="_blank" rel="noopener noreferrer">IServiceRunner</a> and its <strong>OnBeforeExecute</strong>, <strong>OnAfterExecute</strong> and <strong>HandleException</strong> custom hooks are fired</li><li>Action Response Filters</li><li>Then <code>Gateway</code> <a href="/request-and-response-filters#global-request-and-response-filters">Global Response Filters</a></li></ol><h2 id="mq-non-http-custom-hooks" tabindex="-1">MQ (non-HTTP) Custom hooks <a class="header-anchor" href="#mq-non-http-custom-hooks" aria-hidden="true">#</a></h2><p>MQ Requests are executed using <code>ServiceController.ExecuteMessage</code> for invoking <strong>internal/trusted</strong> Services such as <a href="/messaging">ServiceStack MQ</a>:</p><ol><li>Any <code>Message</code> <a href="/request-and-response-filters#message-queue-endpoints">Global Request Filters</a> get executed</li><li>Action Request Filters</li><li>Then your <strong>Service is executed</strong> with the configured <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Web/IServiceRunner.cs" target="_blank" rel="noopener noreferrer">IServiceRunner</a> and its <strong>OnBeforeExecute</strong>, <strong>OnAfterExecute</strong> and <strong>HandleException</strong> custom hooks are fired</li><li>Action Response Filters</li><li>Then <code>Message</code> <a href="/request-and-response-filters#message-queue-endpoints">Global Response Filters</a></li><li>Finally at the end of the Request <code>IAppHost.OnEndRequest</code> is fired</li></ol><h2 id="rpcgateway" tabindex="-1">RpcGateway <a class="header-anchor" href="#rpcgateway" aria-hidden="true">#</a></h2><p>The <code>RpcGateway</code> provides a pure object model API for executing requests through the full HTTP Request pipeline including converting all Errors inc. short-circuited Request Pipeline requests into an Error ResponseStatus that&#39;s populated into the Response DTO&#39;s <code>ResponseStatus</code>.</p><p>The <code>RpcGateway</code> is available via the single <code>AppHost.RpcGateway</code> API:</p><div class="language-csharp"><pre><code><span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ExecuteAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> requestDto<span class="token punctuation">,</span> <span class="token class-name">IRequest</span> req<span class="token punctuation">)</span>
</code></pre></div><p>Unlike MQ Requests which uses <code>ServiceController.ExecuteMessage</code> to execute <strong>internal/trusted</strong> Services, the <code>RpcGateway</code> executes the full <strong>HTTP Request Pipeline</strong> below:</p><ol><li>The <code>IAppHost.PreRequestFilters</code> gets executed before the Request DTO is deserialized</li><li>Any <a href="/customize-http-responses#request-converters">Request Converters</a> are executed</li><li><a href="/filter-attributes">Request Filter Attributes</a> with <strong>Priority &lt; 0</strong> gets executed</li><li>Then any <a href="/request-and-response-filters">Global Request Filters</a> get executed</li><li>Followed by <a href="/filter-attributes">Request Filter Attributes</a> with <strong>Priority &gt;= 0</strong></li><li>Action Request Filters</li><li>Then your <strong>Service is executed</strong> with the configured <a href="/customize-http-responses#intercept-service-requests">Service Filters</a> and <a href="/customize-http-responses#using-a-custom-servicerunner">Service Runner</a> <strong>OnBeforeExecute</strong>, <strong>OnAfterExecute</strong> and <strong>HandleException</strong> custom hooks are fired</li><li>Action Response Filters</li><li>Any <a href="/customize-http-responses#response-converters">Response Converters</a> are executed</li><li>Followed by <a href="/filter-attributes">Response Filter Attributes</a> with <strong>Priority &lt; 0</strong></li><li>Then <a href="/request-and-response-filters">Global Response Filters</a></li><li>Followed by <a href="/filter-attributes">Response Filter Attributes</a> with <strong>Priority &gt;= 0</strong></li><li>Finally at the end of the Request <code>IAppHost.OnEndRequest</code> and any <code>IAppHost.OnEndRequestCallbacks</code> are fired</li></ol><p>Where requests are executed through the same global Request/Response filters that normal HTTP ServiceStack Services execute making them suitable for executing external <strong>untrusted</strong> requests.</p><h2 id="implementation-architecture-diagram" tabindex="-1">Implementation architecture diagram <a class="header-anchor" href="#implementation-architecture-diagram" aria-hidden="true">#</a></h2><p>The <a href="/architecture-overview">Implementation architecture diagram</a> shows a visual cue of the internal order of operations that happens in ServiceStack:</p><p><img src="`+e+'" alt=""></p><p>After the IHttpHandler is returned, it gets executed with the current <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> or HttpListener request wrapped in a common <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/ServiceHost/IHttpRequest.cs" target="_blank" rel="noopener noreferrer">IHttpRequest</a> instance.</p><p>The implementation of <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/WebHost.Endpoints/RestHandler.cs" target="_blank" rel="noopener noreferrer">RestHandler</a> shows what happens during a typical ServiceStack request:</p><p><img src="'+o+'" alt=""></p>',27),l=[i];function c(u,d,p,h,g,f){return s(),r("div",null,l)}var q=t(a,[["render",c]]);export{v as __pageData,q as default};
