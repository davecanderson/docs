import{_ as a}from"./chunks/init-rider-ts-client.04b2ee7b.js";import{_ as e}from"./chunks/mjs-intellisense.7d2acf14.js";import{_ as t,o as p,c as o,a as s,d as n,b as c}from"./app.2aea72c0.js";const I='{"title":"ES6 Class Add ServiceStack Reference","description":"","frontmatter":{"title":"ES6 Class Add ServiceStack Reference"},"headers":[{"level":3,"title":"Reference directly in JavaScript Modules","slug":"reference-directly-in-javascript-modules"},{"level":3,"title":"Import Maps","slug":"import-maps"},{"level":3,"title":"ImportMap in Razor Pages or MVC","slug":"importmap-in-razor-pages-or-mvc"},{"level":3,"title":"Usage","slug":"usage"},{"level":3,"title":"Enable static analysis and intelli-sense","slug":"enable-static-analysis-and-intelli-sense"},{"level":3,"title":"Rich intelli-sense support","slug":"rich-intelli-sense-support"},{"level":2,"title":"Add ServiceStack Reference","slug":"add-servicestack-reference"},{"level":3,"title":"Update ServiceStack References","slug":"update-servicestack-references"},{"level":2,"title":"DTO Customization Options","slug":"dto-customization-options"},{"level":3,"title":"Change Default Server Configuration","slug":"change-default-server-configuration"},{"level":3,"title":"IncludeTypes","slug":"includetypes"},{"level":3,"title":"ExcludeTypes","slug":"excludetypes"},{"level":3,"title":"Cache","slug":"cache"}],"relativePath":"javascript-add-servicestack-reference.md"}',l={},i=s(`<p>In addition to <a href="/typescript-add-servicestack-reference">TypeScript</a> support for generating typed Data Transfer Objects (DTOs), JavaScript is now supported in the form of <a href="https://jsdoc.app" target="_blank" rel="noopener noreferrer">JSDoc</a> annotated typed ES6 classes that can be referenced natively from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer">JavaScript Modules</a>.</p><h3 id="reference-directly-in-javascript-modules" tabindex="-1">Reference directly in JavaScript Modules <a class="header-anchor" href="#reference-directly-in-javascript-modules" aria-hidden="true">#</a></h3><p>Unlike TypeScript, the JavaScript ES6 class DTOs can be referenced directly in a browser as-is, removing the need to keep your DTOs in sync with extra tooling by direct referencing them in a JavaScript Module:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;/types/mjs&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Then to make typed API Requests from web pages, you need only need to reference an ES Module (.mjs) build of the dependency-free <a href="https://github.com/ServiceStack/servicestack-client" target="_blank" rel="noopener noreferrer">@servicestack/client</a> library which can be sourced directly from a npm CDN:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> JsonApiClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;https://unpkg.com/@servicestack/client@2/dist/servicestack-client.min.mjs&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;/types/mjs&#39;</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> JsonApiClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> api <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;World&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="import-maps" tabindex="-1">Import Maps <a class="header-anchor" href="#import-maps" aria-hidden="true">#</a></h3><p>Although we recommend using an <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap" target="_blank" rel="noopener noreferrer">importmap</a> to specify where to load <strong>@servicestack/client</strong> from, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://ga.jspm.io/npm:es-module-shims@1.6.3/dist/es-module-shims.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--safari--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>importmap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token punctuation">{</span>
    <span class="token string-property property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;@servicestack/client&quot;</span><span class="token operator">:</span><span class="token string">&quot;https://unpkg.com/@servicestack/client@2/dist/servicestack-client.min.mjs&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="importmap-in-razor-pages-or-mvc" tabindex="-1">ImportMap in Razor Pages or MVC <a class="header-anchor" href="#importmap-in-razor-pages-or-mvc" aria-hidden="true">#</a></h3><p>Razor Pages or MVC projects can use <code>@Html.ImportMap()</code> in <strong>_Layout.cshtml</strong> to use different builds for development and production, e.g:</p><div class="language-csharp"><pre><code>@<span class="token keyword">if</span> <span class="token punctuation">(</span>Context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>UserAgent<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;Safari&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>x<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;Chrome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token operator">&lt;</span>script <span class="token keyword">async</span> src<span class="token operator">=</span><span class="token string">&quot;https://ga.jspm.io/npm:es-module-shims@1.6.3/dist/es-module-shims.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
@Html<span class="token punctuation">.</span><span class="token function">ImportMap</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;@servicestack/client&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;/js/servicestack-client.mjs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/js/servicestack-client.min.mjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h3><p>This lets us reference the <strong>@servicestack/client</strong> package name in our source code instead of its physical location:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txtName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>result<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> JsonApiClient<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> on <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@servicestack/client&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;/types/mjs&#39;</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> JsonApiClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;#txtName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">keyup</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span>el<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">$1</span><span class="token punctuation">(</span><span class="token string">&#39;#result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> api<span class="token punctuation">.</span>response<span class="token punctuation">.</span>result
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="enable-static-analysis-and-intelli-sense" tabindex="-1">Enable static analysis and intelli-sense <a class="header-anchor" href="#enable-static-analysis-and-intelli-sense" aria-hidden="true">#</a></h3><p>For better IDE intelli-sense during development, save the annotated Typed DTOs to disk with the <a href="https://docs.servicestack.net/dotnet-tool" target="_blank" rel="noopener noreferrer">x dotnet tool</a>:</p>`,18),r=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x mjs")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),u=s(`<p>Then reference it instead to enable IDE static analysis when calling Typed APIs from JavaScript:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;/js/dtos.mjs&#39;</span>
client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>To also enable static analysis for <strong>@servicestack/client</strong>, install the dependency-free library as a dev dependency:</p>`,3),d=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"npm install -D @servicestack/client")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),k=s('<p>Where only its TypeScript definitions are used by the IDE during development to enable its type-checking and intelli-sense.</p><h3 id="rich-intelli-sense-support" tabindex="-1">Rich intelli-sense support <a class="header-anchor" href="#rich-intelli-sense-support" aria-hidden="true">#</a></h3><p>Where you&#39;ll be able to benefit from rich intelli-sense support in smart IDEs like <a href="https://www.jetbrains.com/rider/" target="_blank" rel="noopener noreferrer">Rider</a> for both the client library:</p><p><img src="'+a+'" alt=""></p><p>As well as your App&#39;s server generated DTOs:</p><p><img src="'+e+'" alt=""></p><h2 id="add-servicestack-reference" tabindex="-1">Add ServiceStack Reference <a class="header-anchor" href="#add-servicestack-reference" aria-hidden="true">#</a></h2><p>A new ServiceStack reference containing the APIs typed DTOs can be added using the <strong>BaseUrl</strong> of the ServiceStack App, e.g:</p>',8),h=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,[n("code",null,"x mjs https://localhost:5001")])])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),g=n("h3",{id:"update-servicestack-references",tabindex:"-1"},[c("Update ServiceStack References "),n("a",{class:"header-anchor",href:"#update-servicestack-references","aria-hidden":"true"},"#")],-1),m=n("p",null,"All existing ServiceStack References can later be updated with:",-1),v=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x mjs")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),y=s(`<h2 id="dto-customization-options" tabindex="-1">DTO Customization Options <a class="header-anchor" href="#dto-customization-options" aria-hidden="true">#</a></h2><p>In most cases you&#39;ll just use the generated JavaScript DTO&#39;s as-is, however you can further customize how the DTOs are generated by overriding the default options.</p><p>The header in the generated DTOs show the different options JavaScript types support with their defaults. Default values are shown with the comment prefix of <code>//</code>. To override a value, remove the <code>//</code> and specify the value to the right of the <code>:</code>. Any uncommented value will be sent to the server to override any server defaults.</p><p>The DTO comments allows for customizations for how DTOs are generated. The default options that were used to generate the DTOs are repeated in the header comments of the generated DTOs, options that are preceded by a TypeScript comment <code>//</code> are defaults from the server, any uncommented value will be sent to the server to override any server defaults.</p><div class="language-js"><pre><code><span class="token comment">/* Options:
Date: 2023-02-08 13:13:28
Version: 6.60
Tip: To override a DTO option, remove &quot;//&quot; prefix before updating
BaseUrl: https://blazor-server.jamstacks.net

//AddServiceStackTypes: True
//AddDocAnnotations: True
//AddDescriptionAsComments: True
//IncludeTypes: 
//ExcludeTypes: 
//DefaultImports: 
*/</span>
</code></pre></div><p>We&#39;ll go through and cover each of the above options to see how they affect the generated DTO&#39;s:</p><h3 id="change-default-server-configuration" tabindex="-1">Change Default Server Configuration <a class="header-anchor" href="#change-default-server-configuration" aria-hidden="true">#</a></h3><p>The above defaults are also overridable on the ServiceStack Server by modifying the <code>NativeTypesFeature</code> Plugin, e.g:</p><div class="language-csharp"><pre><code><span class="token comment">//Server example in CSharp</span>
<span class="token class-name"><span class="token keyword">var</span></span> nativeTypes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetPlugin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NativeTypesFeature<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
nativeTypes<span class="token punctuation">.</span>MetadataTypesConfig<span class="token punctuation">.</span>AddDescriptionAsComments <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
</code></pre></div><p>We&#39;ll go through and cover each of the above options to see how they affect the generated DTO&#39;s:</p><h3 id="includetypes" tabindex="-1">IncludeTypes <a class="header-anchor" href="#includetypes" aria-hidden="true">#</a></h3><p>Is used as a Whitelist to specify only the types you would like to have code-generated:</p><div class="language-"><pre><code>/* Options:
IncludeTypes: Hello, HelloResponse
</code></pre></div><p>Will only generate <code>Hello</code> and <code>HelloResponse</code> DTOs:</p><div class="language-csharp"><pre><code>export <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token comment">/** @param {{name?:string}} [init] */</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span> <span class="token punctuation">{</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token comment">/** @type {string} */</span>
    name<span class="token punctuation">;</span>
    <span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> &#39;Hello&#39; <span class="token punctuation">}</span>
    <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> &#39;POST&#39; <span class="token punctuation">}</span>
    <span class="token function">createResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HelloResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

export <span class="token keyword">class</span> <span class="token class-name">HelloResponse</span> <span class="token punctuation">{</span>
    <span class="token comment">/** @param {{result?:string,responseStatus?:ResponseStatus}} [init] */</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span> <span class="token punctuation">{</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token comment">/** @type {string} */</span>
    result<span class="token punctuation">;</span>
    <span class="token comment">/** @type {ResponseStatus} */</span>
    responseStatus<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="include-generic-types" tabindex="-1">Include Generic Types <a class="header-anchor" href="#include-generic-types" aria-hidden="true">#</a></h4><p>Use .NET&#39;s Type Name to include Generic Types, i.e. the Type name separated by the backtick followed by the number of generic arguments, e.g:</p><div class="language-"><pre><code>IncludeTypes: IReturn\`1,MyPair\`2
</code></pre></div><h4 id="include-request-dto-and-its-dependent-types" tabindex="-1">Include Request DTO and its dependent types <a class="header-anchor" href="#include-request-dto-and-its-dependent-types" aria-hidden="true">#</a></h4><p>You can include a Request DTO and all its dependent types with a <code>.*</code> suffix on the Request DTO, e.g:</p><div class="language-"><pre><code>/* Options:
IncludeTypes: GetTechnology.*
</code></pre></div><p>Which will include the <code>GetTechnology</code> Request DTO, the <code>GetTechnologyResponse</code> Response DTO and all Types that they both reference.</p><h4 id="include-all-types-within-a-c-namespace" tabindex="-1">Include All Types within a C# namespace <a class="header-anchor" href="#include-all-types-within-a-c-namespace" aria-hidden="true">#</a></h4><p>If your DTOs are grouped into different namespaces they can be all included using the <code>/*</code> suffix, e.g:</p><div class="language-"><pre><code>/* Options:
IncludeTypes: MyApp.ServiceModel.Admin/*
</code></pre></div><p>This will include all DTOs within the <code>MyApp.ServiceModel.Admin</code> C# namespace.</p><h4 id="include-all-services-in-a-tag-group" tabindex="-1">Include All Services in a Tag Group <a class="header-anchor" href="#include-all-services-in-a-tag-group" aria-hidden="true">#</a></h4><p>Services <a href="/api-design#group-services-by-tag">grouped by Tag</a> can be used in the <code>IncludeTypes</code> where tags can be specified using braces in the format <code>{tag}</code> or <code>{tag1,tag2,tag3}</code>, e.g:</p><div class="language-"><pre><code>/* Options:
IncludeTypes: {web,mobile}
</code></pre></div><p>Or individually:</p><div class="language-"><pre><code>/* Options:
IncludeTypes: {web},{mobile}
</code></pre></div><h3 id="excludetypes" tabindex="-1">ExcludeTypes <a class="header-anchor" href="#excludetypes" aria-hidden="true">#</a></h3><p>Is used as a Blacklist to specify which types you would like excluded from being generated:</p><div class="language-"><pre><code>/* Options:
ExcludeTypes: GetTechnology,GetTechnologyResponse
</code></pre></div><p>Will exclude <code>GetTechnology</code> and <code>GetTechnologyResponse</code> DTOs from being generated.</p><h3 id="cache" tabindex="-1">Cache <a class="header-anchor" href="#cache" aria-hidden="true">#</a></h3><p>When using <code>/types/mjs</code> directly from a <code>script</code> tag, the server will cache the result by default when not running in <a href="/debugging#debugmode">DebugMode</a>.</p><p>This caching process can be disabled if required by using <strong>?cache=false</strong>.</p>`,38),f=[i,r,u,d,k,h,g,m,v,y];function w(b,T,_,x,S,q){return p(),o("div",null,f)}var M=t(l,[["render",w]]);export{I as __pageData,M as default};
