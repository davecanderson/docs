import{_ as n,o as s,c as a,a as t}from"./app.2aea72c0.js";const h='{"title":"Redis Distributed Locking","description":"","frontmatter":{"title":"Redis Distributed Locking"},"headers":[{"level":2,"title":"Achieving High Performance, Distributed Locking with Redis","slug":"achieving-high-performance-distributed-locking-with-redis"},{"level":2,"title":"Simple API Usage","slug":"simple-api-usage"},{"level":2,"title":"Example: Multiple clients acquiring the same lock","slug":"example-multiple-clients-acquiring-the-same-lock"},{"level":2,"title":"Example: Acquiring a lock with Time Out","slug":"example-acquiring-a-lock-with-time-out"}],"relativePath":"redis/distributed-locking.md"}',e={},o=t(`<p>This page shows how to take advantage of Redis&#39;s fast atomic server operations to enable high-performance <a href="https://redis.io/docs/reference/patterns/distributed-locks/" target="_blank" rel="noopener noreferrer">distributed locks</a> that can span across multiple app servers.</p><h2 id="achieving-high-performance-distributed-locking-with-redis" tabindex="-1">Achieving High Performance, Distributed Locking with Redis <a class="header-anchor" href="#achieving-high-performance-distributed-locking-with-redis" aria-hidden="true">#</a></h2><p>When you have a high-performance, scalable network data structure server like Redis accessible to your back end systems, a whole range of technical possibilities open up that were previously difficult to achieve. Something like multi-server-wide application-level locks were previously only achievable using dedicated, centralized infrastructure and the crafting of some carefully custom concurrent programming logic.</p><p>With Redis this becomes a trivial task as you get simplified access to rich atomic server operations that complete within a fraction of a millisecond. So the same normally CPU-intensive load generated by distributed locking when using a remote filesystem or RDBMS is barely noticeable on a Redis server.</p><p><a href="https://github.com/ServiceStack/ServiceStack.Redis" target="_blank" rel="noopener noreferrer">ServiceStack&#39;s C# Redis Client</a> takes advantage of the convenience and safety offered by .NET&#39;s IDisposable interface and Redis&#39;s <a href="https://redis.io/commands/setnx" target="_blank" rel="noopener noreferrer">SETNX operation</a> to provide a simple API to implement your own <strong>custom distributed locks</strong>, ensuring at all times that only 1 client at a time can execute the protected logic. While one of the Redis clients obtains the lock, the other clients enter into an &#39;exponential retry back-off multiplier state&#39; continually retrying to obtain the lock at random intervals until they are finally successful.</p><h2 id="simple-api-usage" tabindex="-1">Simple API Usage <a class="header-anchor" href="#simple-api-usage" aria-hidden="true">#</a></h2><p>The locking functionality is available on the <a href="/redis/client">IRedisClient</a> and <a href="/redis/typed-client">IRedisTypedClient</a> interfaces, the relevant portion of which is displayed below.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisClient</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token return-type class-name">IDisposable</span> <span class="token function">AcquireLock</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDisposable</span> <span class="token function">AcquireLock</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">TimeSpan</span> timeOut<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The above implementation does not include the ability to auto-recover from a crashed client, power or network failure, so under rare conditions it is possible for all clients to be deadlocked indefinitely waiting on a lock that is never released. In these cases it&#39;s wise to supply a <code>TimeOut</code> or manually recover from &#39;zombie locks&#39; by clearing them all on server restarts, etc.</p></div><p>To reiterate: if you specify a <code>TimeOut</code>, the client will treat the lock as invalid once the timeout expires, and thus grab the lock.</p><p>Below are a couple examples showing how to use the API in some typical usage scenarios. The full runnable source code of the following examples are <a href="https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Redis/tests/ServiceStack.Redis.Tests/Examples/SimpleLocks.cs" target="_blank" rel="noopener noreferrer">available here</a>.</p><h2 id="example-multiple-clients-acquiring-the-same-lock" tabindex="-1">Example: Multiple clients acquiring the same lock <a class="header-anchor" href="#example-multiple-clients-acquiring-the-same-lock" aria-hidden="true">#</a></h2><p>The example below shows the behaviour of running 5 concurrent clients trying to acquire the same lock at the same time. An artificial delay is added inside the lock to simulate a cpu-intensive workload.</p><div class="language-csharp"><pre><code><span class="token comment">//The number of concurrent clients to run</span>
<span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> noOfClients <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> asyncResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IAsyncResult<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>noOfClients<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> noOfClients<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> clientNo <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> actionFn <span class="token operator">=</span> <span class="token punctuation">(</span>Action<span class="token punctuation">)</span><span class="token keyword">delegate</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> redisClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisClient</span><span class="token punctuation">(</span>TestConfig<span class="token punctuation">.</span>SingleHost<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span>redisClient<span class="token punctuation">.</span><span class="token function">AcquireLock</span><span class="token punctuation">(</span><span class="token string">&quot;testlock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;client {0} acquired lock&quot;</span><span class="token punctuation">,</span> clientNo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> counter <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;atomic-counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//Add an artificial delay to demonstrate locking behaviour</span>
            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            redisClient<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;atomic-counter&quot;</span><span class="token punctuation">,</span> counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;client {0} released lock&quot;</span><span class="token punctuation">,</span> clientNo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//Asynchronously invoke the above delegate in a background thread</span>
    asyncResults<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>actionFn<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//Wait at most 1 second for all the threads to complete</span>
asyncResults<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Print out the &#39;atomic-counter&#39; result</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> redisClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisClient</span><span class="token punctuation">(</span>TestConfig<span class="token punctuation">.</span>SingleHost<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> counter <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;atomic-counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;atomic-counter after 1sec: {0}&quot;</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Output:
client 1 acquired lock
client 1 released lock
client 3 acquired lock
client 3 released lock
client 4 acquired lock
client 4 released lock
client 5 acquired lock
client 5 released lock
client 2 acquired lock
client 2 released lock
atomic-counter after 1sec: 5
*/</span>
</code></pre></div><p>When you acquire a lock without specifying a <code>TimeOut</code> as seen in the above example, each waiting client goes into an indefinite loop retrying to acquire the lock until its successful. If by some chance you had some rogue code not following convention and implementing logic within the disposable scope or worse short circuiting execution using <code>Thread.Abort</code>, you could potentially run into a deadlock situation. This is why it is generally a good idea to specify a <code>TimeOut</code> whenever you make a blocking call. So like all good blocking API&#39;s the client lets you specify an optional <code>TimeOut</code> parameter as seen in the following example:</p><h2 id="example-acquiring-a-lock-with-time-out" tabindex="-1">Example: Acquiring a lock with Time Out <a class="header-anchor" href="#example-acquiring-a-lock-with-time-out" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> redisClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisClient</span><span class="token punctuation">(</span>TestConfig<span class="token punctuation">.</span>SingleHost<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Initialize and set counter to &#39;1&#39;</span>
redisClient<span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token string">&quot;atomic-counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//Acquire lock and never release it</span>
redisClient<span class="token punctuation">.</span><span class="token function">AcquireLock</span><span class="token punctuation">(</span><span class="token string">&quot;testlock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> waitFor <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>

<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> newClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisClient</span><span class="token punctuation">(</span>TestConfig<span class="token punctuation">.</span>SingleHost<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//Attempt to acquire a lock with a 2 second timeout</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span>newClient<span class="token punctuation">.</span><span class="token function">AcquireLock</span><span class="token punctuation">(</span><span class="token string">&quot;testlock&quot;</span><span class="token punctuation">,</span> waitFor<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//If lock was acquired this would be incremented to &#39;2&#39;</span>
            redisClient<span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token string">&quot;atomic-counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> tex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> timeTaken <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now <span class="token operator">-</span> now<span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;After &#39;{0}&#39;, Received TimeoutException: &#39;{1}&#39;&quot;</span><span class="token punctuation">,</span> timeTaken<span class="token punctuation">,</span> tex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> counter <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;atomic-counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;atomic-counter remains at &#39;{0}&#39;&quot;</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*Output:
After &#39;00:00:02.3321334&#39;, Received TimeoutException: &#39;Exceeded timeout of 00:00:02&#39;
atomic-counter remains at &#39;1&#39;
*/</span>
</code></pre></div>`,17),p=[o];function c(i,l,u,r,k,d){return s(),a("div",null,p)}var g=n(e,[["render",c]]);export{h as __pageData,g as default};
