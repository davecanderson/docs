import{_ as t,o as e,c as o,a as s,d as n,b as a}from"./app.2aea72c0.js";const D='{"title":"gRPC protoc C# Client","description":"","frontmatter":{"slug":"grpc-csharp","title":"gRPC protoc C# Client"},"headers":[{"level":2,"title":"C# protoc generated GrpcServiceClient TodoWorld Example","slug":"c-protoc-generated-grpcserviceclient-todoworld-example"},{"level":3,"title":"C# smart gRPC GrpcServicesClient Example","slug":"c-smart-grpc-grpcservicesclient-example"},{"level":3,"title":"protoc-only generated Service Client","slug":"protoc-only-generated-service-client"},{"level":3,"title":"C# protoc gRPC insecure Example","slug":"c-protoc-grpc-insecure-example"},{"level":3,"title":"C# protoc gRPC SSL Example","slug":"c-protoc-grpc-ssl-example"},{"level":3,"title":"C# Local Development gRPC SSL CRUD Example","slug":"c-local-development-grpc-ssl-crud-example"},{"level":3,"title":"More Examples","slug":"more-examples"}],"relativePath":"grpc-csharp.md"}',p={},c=s('<p><a href="https://youtu.be/0TXk9y24NIw" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/grpc/csharp.png" alt=""></a></p><blockquote><p>YouTube: <a href="https://youtu.be/0TXk9y24NIw" target="_blank" rel="noopener noreferrer">youtu.be/0TXk9y24NIw</a></p></blockquote><h2 id="c-protoc-generated-grpcserviceclient-todoworld-example" tabindex="-1">C# protoc generated GrpcServiceClient TodoWorld Example <a class="header-anchor" href="#c-protoc-generated-grpcserviceclient-todoworld-example" aria-hidden="true">#</a></h2><p>Install <a href="https://docs.servicestack.net/dotnet-tool" target="_blank" rel="noopener noreferrer">x dotnet tool</a>:</p>',4),l=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"dotnet tool install --global x")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),i=n("p",null,"Create a new C# Console App:",-1),r=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"dotnet new console")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),u=n("p",null,"Add required NuGet Packages:",-1),k=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"dotnet add package Google.Protobuf ServiceStack.GrpcClient")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),d=n("p",null,"Download TodoWorld SSL Certificate used for its gRPC HTTP/2 Services:",-1),h=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,[a("$ x get "),n("a",{href:"https://todoworld.servicestack.net/grpc.crt",target:"_blank",rel:"noopener noreferrer"},"https://todoworld.servicestack.net/grpc.crt")]),n("div",{class:"language-"},[n("pre",null,[n("code",null,`
Add protoc generated TodoWorld DTOs and gRPC GrpcServiceClient:

:::sh
x proto-csharp https://todoworld.servicestack.net
`)])])])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),g=s(`<p>Use protoc generated DTOs and <code>GrpcServiceClient</code> to call TodoWorld gRPC Service:</p><h3 id="c-smart-grpc-grpcservicesclient-example" tabindex="-1">C# smart gRPC GrpcServicesClient Example <a class="header-anchor" href="#c-smart-grpc-grpcservicesclient-example" aria-hidden="true">#</a></h3><p>The smart client registers a ServiceStack Interceptor to enable the richer integration features in ServiceStack Services as found in ServiceStack&#39;s Generic <code>GrpcServiceClient</code> above, including detailed structured Exception handling, built-in JWT, Session, Credentials Auth support, <a href="https://docs.servicestack.net/jwt-authprovider#automatically-refreshing-access-tokens" target="_blank" rel="noopener noreferrer">Automatically refreshing Access Tokens</a>, etc.</p><p>This ServiceStack Interceptor can be registered using <code>GrpcServiceStack.Client()</code> when creating the protoc <code>GrpcServicesClient</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">.</span>X509Certificates</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">ServiceStack</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">TodoWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GrpcServices<span class="token punctuation">.</span>GrpcServicesClient</span><span class="token punctuation">(</span>
                GrpcServiceStack<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token string">&quot;https://todoworld.servicestack.net:50051&quot;</span><span class="token punctuation">,</span> 
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">X509Certificate2</span><span class="token punctuation">(</span><span class="token string">&quot;grpc.crt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    GrpcUtils<span class="token punctuation">.</span><span class="token function">AllowSelfSignedCertificatesFrom</span><span class="token punctuation">(</span><span class="token string">&quot;todoworld.servicestack.net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetHelloAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hello</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;gRPC C#&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Override <code>Program.cs</code> with the above C# Example:</p>`,6),w=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x mix todoworld-csharp-smart")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),v=n("p",null,"Run example:",-1),m=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"dotnet run")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),y=n("h3",{id:"protoc-only-generated-service-client",tabindex:"-1"},[a("protoc-only generated Service Client "),n("a",{class:"header-anchor",href:"#protoc-only-generated-service-client","aria-hidden":"true"},"#")],-1),x=n("p",null,[a("Alternatively clients can opt to use the vanilla protoc generated ServiceClient without any dependency to "),n("strong",null,"ServiceStack.GrpcClient"),a(" which will fallback to gRPC's default behavior of basic error handling with any auth headers needing to be populated manually.")],-1),f=n("p",null,"Add required core package dependencies:",-1),C=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"dotnet add package Grpc.Core Grpc.Net.Client")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),S=s(`<h3 id="c-protoc-grpc-insecure-example" tabindex="-1">C# protoc gRPC insecure Example <a class="header-anchor" href="#c-protoc-grpc-insecure-example" aria-hidden="true">#</a></h3><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Grpc<span class="token punctuation">.</span>Core</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Grpc<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Client</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">TodoWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            AppContext<span class="token punctuation">.</span><span class="token function">SetSwitch</span><span class="token punctuation">(</span><span class="token string">&quot;System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GrpcServices<span class="token punctuation">.</span>GrpcServicesClient</span><span class="token punctuation">(</span>
                GrpcChannel<span class="token punctuation">.</span><span class="token function">ForAddress</span><span class="token punctuation">(</span><span class="token string">&quot;http://todoworld.servicestack.net:5054&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetHelloAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hello</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;gRPC C#&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Override <code>Program.cs</code> with the above C# Example:</p>`,3),_=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x mix todoworld-csharp")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),b=n("p",null,"Run example:",-1),T=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"dotnet run")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),P=s(`<h3 id="c-protoc-grpc-ssl-example" tabindex="-1">C# protoc gRPC SSL Example <a class="header-anchor" href="#c-protoc-grpc-ssl-example" aria-hidden="true">#</a></h3><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Security</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">.</span>X509Certificates</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Grpc<span class="token punctuation">.</span>Core</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Grpc<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Client</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">TodoWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GrpcServices<span class="token punctuation">.</span>GrpcServicesClient</span><span class="token punctuation">(</span>
                GrpcChannel<span class="token punctuation">.</span><span class="token function">ForAddress</span><span class="token punctuation">(</span><span class="token string">&quot;https://todoworld.servicestack.net:50051&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GrpcChannelOptions</span> <span class="token punctuation">{</span>
                    HttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>HttpClient</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>HttpClientHandler</span> <span class="token punctuation">{</span>
                        ClientCertificates <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">X509Certificate2</span><span class="token punctuation">(</span><span class="token string">&quot;grpc.crt&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        ServerCertificateCustomValidationCallback <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> cert<span class="token punctuation">,</span> certChain<span class="token punctuation">,</span> sslErrors<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                            cert<span class="token punctuation">.</span>SubjectName<span class="token punctuation">.</span>RawData<span class="token punctuation">.</span><span class="token function">SequenceEqual</span><span class="token punctuation">(</span>cert<span class="token punctuation">.</span>IssuerName<span class="token punctuation">.</span>RawData<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// self-signed</span>
                            cert<span class="token punctuation">.</span><span class="token function">GetNameInfo</span><span class="token punctuation">(</span>X509NameType<span class="token punctuation">.</span>DnsName<span class="token punctuation">,</span> <span class="token named-parameter punctuation">forIssuer</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;todoworld.servicestack.net&quot;</span> <span class="token operator">&amp;&amp;</span>
                            <span class="token punctuation">(</span>sslErrors <span class="token operator">&amp;</span> <span class="token operator">~</span>sslErrors<span class="token punctuation">.</span>RemoteCertificateChainErrors<span class="token punctuation">)</span> <span class="token operator">==</span> sslErrors<span class="token punctuation">.</span>None <span class="token comment">// only this</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetHelloAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hello</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;gRPC C#&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Override <code>Program.cs</code> with the above C# Example:</p>`,3),G=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x mix todoworld-csharp-ssl")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),M=n("p",null,"Run example:",-1),q=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"dotnet run")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),A=s(`<h3 id="c-local-development-grpc-ssl-crud-example" tabindex="-1">C# Local Development gRPC SSL CRUD Example <a class="header-anchor" href="#c-local-development-grpc-ssl-crud-example" aria-hidden="true">#</a></h3><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Grpc<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Client</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">TodoWorld</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">CSharp</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Certificate registration not required when using trusted local development certificate  </span>
            <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GrpcServices<span class="token punctuation">.</span>GrpcServicesClient</span><span class="token punctuation">(</span>GrpcChannel<span class="token punctuation">.</span><span class="token function">ForAddress</span><span class="token punctuation">(</span><span class="token string">&quot;https://localhost:5001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">PostResetTodosAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResetTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//POST /todos</span>
            <span class="token class-name"><span class="token keyword">var</span></span> todo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">PostCreateTodoAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateTodo</span> <span class="token punctuation">{</span> Title <span class="token operator">=</span> <span class="token string">&quot;ServiceStack&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Result<span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;new todo Id: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">todo<span class="token punctuation">.</span>Id</span><span class="token punctuation">}</span></span><span class="token string">, Title: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">todo<span class="token punctuation">.</span>Title</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">//GET /todos</span>
            <span class="token class-name"><span class="token keyword">var</span></span> all <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">CallGetTodosAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;todos: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">all<span class="token punctuation">.</span>Results<span class="token punctuation">?.</span>Count <span class="token operator">??</span> <span class="token number">0</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//GET /todos/1</span>
            todo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">CallGetTodoAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetTodo</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> todo<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Result<span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;get todo Id: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">todo<span class="token punctuation">.</span>Id</span><span class="token punctuation">}</span></span><span class="token string">, Title: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">todo<span class="token punctuation">.</span>Title</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//GET /todos</span>
            all <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">CallGetTodosAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;todos: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">all<span class="token punctuation">.</span>Results<span class="token punctuation">?.</span>Count <span class="token operator">??</span> <span class="token number">0</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//PUT /todos/1</span>
            <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">PutUpdateTodoAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UpdateTodo</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> todo<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Title <span class="token operator">=</span> <span class="token string">&quot;gRPC&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//GET /todos/1</span>
            todo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">CallGetTodoAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetTodo</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> todo<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Result<span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;updated todo Title: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">todo<span class="token punctuation">.</span>Title</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//DELETE /todos/1</span>
            <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">CallDeleteTodoAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeleteTodo</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> todo<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//GET /todos</span>
            all <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">CallGetTodosAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;todos: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">all<span class="token punctuation">.</span>Results<span class="token punctuation">?.</span>Count <span class="token operator">??</span> <span class="token number">0</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Refer to <a href="https://github.com/NetCoreApps/todo-world/tree/master/src/clients/csharp" target="_blank" rel="noopener noreferrer">/src/clients/csharp</a> for a complete example project.</p><h3 id="more-examples" tabindex="-1">More Examples <a class="header-anchor" href="#more-examples" aria-hidden="true">#</a></h3><p>For more protoc generated <code>GrpcServices.GrpcServiceClient</code> examples check out the unit tests at:</p><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Extensions.Tests/Protoc/ProtocTests.cs" target="_blank" rel="noopener noreferrer">ProtocTests.cs</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Extensions.Tests/Protoc/ProtocTodoTests.cs" target="_blank" rel="noopener noreferrer">ProtocTodoTests.cs</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Extensions.Tests/Protoc/ProtocAuthTests.cs" target="_blank" rel="noopener noreferrer">ProtocAuthTests.cs</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Extensions.Tests/Protoc/ProtocServerEventsTests.cs" target="_blank" rel="noopener noreferrer">ProtocServerEventsTests.cs</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Extensions.Tests/Protoc/ProtocDynamicAutoQueryTests.cs" target="_blank" rel="noopener noreferrer">ProtocDynamicAutoQueryTests.cs</a></li></ul>`,6),E=[c,l,i,r,u,k,d,h,g,w,v,m,y,x,f,C,S,_,b,T,P,G,M,q,A];function R(V,I,N,L,H,j){return e(),o("div",null,E)}var W=t(p,[["render",R]]);export{D as __pageData,W as default};
