import"./chunks/iconify.2272db1b.js";import{_ as r}from"./chunks/ApiReference.8128d97b.js";import{m as i}from"./chunks/metadata.46b41fb9.js";import{Z as k,D as t,o as d,c as m,e as n,q as p,d as a,a as e,b as s}from"./app.2aea72c0.js";const g=a("link",{rel:"stylesheet",href:"/css/tailwind-components.css"},null,-1),y=e(`<p><a href="https://github.com/ServiceStack/servicestack-vue/blob/main/src/api.ts" target="_blank" rel="noopener noreferrer">useClient()</a> provides managed APIs around the <code>JsonServiceClient</code> instance registered in Vue App&#39;s with:</p><div class="language-js"><pre><code>app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;client&#39;</span><span class="token punctuation">,</span> client<span class="token punctuation">)</span>
</code></pre></div><p>Which maintains contextual information around your API calls like <strong>loading</strong> and <strong>error</strong> states, used by <code>@servicestack/vue</code> components to enable its auto validation binding. Other functionality in this provider include:</p><div class="language-js"><pre><code><span class="token keyword">let</span> <span class="token punctuation">{</span> 
    api<span class="token punctuation">,</span>            <span class="token comment">// Send a typed API request and return results in an ApiResult&lt;TResponse&gt;</span>
    apiVoid<span class="token punctuation">,</span>        <span class="token comment">// Send a typed API request and return empty response in a void ApiResult</span>
    apiForm<span class="token punctuation">,</span>        <span class="token comment">// Send a FormData API request and return results in an ApiResult&lt;TResponse&gt;</span>
    apiFormVoid<span class="token punctuation">,</span>    <span class="token comment">// Send a FormData API request and return empty response in a void ApiResult</span>
    loading<span class="token punctuation">,</span>        <span class="token comment">// Maintain loading state whilst API Request is in transit</span>
    error<span class="token punctuation">,</span>          <span class="token comment">// Maintain API Error response in reactive Ref&lt;ResponseStatus&gt;</span>
    setError<span class="token punctuation">,</span>       <span class="token comment">// Set API error state with summary or field validation error</span>
    addFieldError<span class="token punctuation">,</span>  <span class="token comment">// Add field error to API error state</span>
    unRefs          <span class="token comment">// Returns a dto with all Refs unwrapped</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>Typically you would need to unwrap <code>ref</code> values when calling APIs, i.e:</p><div class="language-js"><pre><code><span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span>name<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h3 class="my-4 text-lg font-semibold">api</h3><p>This is unnecessary in useClient <code>api*</code> methods which automatically unwraps ref values, allowing for the more pleasant API call:</p><div class="language-js"><pre><code><span class="token keyword">let</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h3 class="my-4 text-lg font-semibold">unRefs</h3><p>But as DTOs are typed, passing reference values will report a type annotation warning in IDEs with type-checking enabled, which can be avoided by explicitly unwrapping DTO ref values with <code>unRefs</code>:</p><div class="language-js"><pre><code><span class="token keyword">let</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token function">unRefs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h3 class="my-4 text-lg font-semibold">setError</h3><p><code>setError</code> can be used to populate client-side validation errors which the <a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/wwwroot/Pages/SignUp.mjs" target="_blank" rel="noopener noreferrer">SignUp.mjs</a> component uses to report an invalid submissions when passwords don&#39;t match:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> api<span class="token punctuation">,</span> setError <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">.</span>value <span class="token operator">!==</span> confirmPassword<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fieldName</span><span class="token operator">:</span><span class="token string">&#39;confirmPassword&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">&#39;Passwords do not match&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="form-validation" class="mt-8 mb-4 text-2xl font-semibold text-gray-900 dark:text-gray-100"> Form Validation </h2><p>All <code>@servicestack/vue</code> Input Components support contextual validation binding that&#39;s typically populated from API <a href="/error-handling">Error Response DTOs</a> but can also be populated from client-side validation as done above.</p><h3 class="my-4 text-lg font-semibold">Explicit Error Handling</h3><p>This populated <code>ResponseStatus</code> DTO can either be manually passed into each component&#39;s <strong>status</strong> property as done in <a href="https://vue-mjs.web-templates.io/TodoMvc" target="_blank" rel="noopener noreferrer">/Todos</a>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TodoMvc-template<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mb-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text-input</span> <span class="token attr-name">:status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>store.error<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>What needs to be done?<span class="token punctuation">&quot;</span></span>
                    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>store.newTodo<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>store.addTodo()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text-input</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- ... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Where if you try adding an empty Todo the <code>CreateTodo</code> API will fail and populate its <code>store.error</code> reactive property with the APIs Error Response DTO which the <code>&lt;TextInput /&gt;</code> component checks for to display any field validation errors matching the field in <code>id</code> adjacent to the HTML Input:</p><div class="language-js"><pre><code><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">/** @type {Todo[]} */</span>
    <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">newTodo</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">error</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">refreshTodos</span><span class="token punctuation">(</span><span class="token parameter">errorStatus</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> errorStatus
        <span class="token keyword">let</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>todos <span class="token operator">=</span> api<span class="token punctuation">.</span>response<span class="token punctuation">.</span>results
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>newTodo <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreateTodo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>newTodo <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>newTodo <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refreshTodos</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 class="my-4 text-lg font-semibold">Implicit Error Handling</h3><p>More often you&#39;ll want to take advantage of the implicit validation support in <code>useClient()</code> which makes its state available to child components, alleviating the need to explicitly pass it in each component as seen in razor-tailwind&#39;s <a href="https://github.com/NetCoreTemplates/razor-tailwind/blob/main/MyApp/wwwroot/Pages/Contacts.mjs" target="_blank" rel="noopener noreferrer">Contacts.mjs</a> <code>Edit</code> component for its <a href="https://vue-mjs.web-templates.io/Contacts" target="_blank" rel="noopener noreferrer">/Contacts</a> page which doesn&#39;t do any manual error handling:</p><div class="language-js"><pre><code><span class="token keyword">const</span> Edit <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token comment">/*html*/</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;SlideOver @done=&quot;close&quot; title=&quot;Edit Contact&quot;&gt;
    &lt;form @submit.prevent=&quot;submit&quot;&gt;
      &lt;input type=&quot;submit&quot; class=&quot;hidden&quot;&gt;
      &lt;fieldset&gt;
        &lt;ErrorSummary except=&quot;title,name,color,filmGenres,age,agree&quot; class=&quot;mb-4&quot; /&gt;
        &lt;div class=&quot;grid grid-cols-6 gap-6&quot;&gt;
          &lt;div class=&quot;col-span-6 sm:col-span-3&quot;&gt;
            &lt;SelectInput id=&quot;title&quot; v-model=&quot;request.title&quot; :options=&quot;enumOptions(&#39;Title&#39;)&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;col-span-6 sm:col-span-3&quot;&gt;
            &lt;TextInput id=&quot;name&quot; v-model=&quot;request.name&quot; required placeholder=&quot;Contact Name&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;col-span-6 sm:col-span-3&quot;&gt;
            &lt;SelectInput id=&quot;color&quot; v-model=&quot;request.color&quot; :options=&quot;colorOptions&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;col-span-6 sm:col-span-3&quot;&gt;
            &lt;SelectInput id=&quot;favoriteGenre&quot; v-model=&quot;request.favoriteGenre&quot; :options=&quot;enumOptions(&#39;FilmGenre&#39;)&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;col-span-6 sm:col-span-3&quot;&gt;
            &lt;TextInput type=&quot;number&quot; id=&quot;age&quot; v-model=&quot;request.age&quot; /&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/fieldset&gt;
    &lt;/form&gt;
    &lt;template #footer&gt;
      &lt;div class=&quot;flex justify-between space-x-3&quot;&gt;
        &lt;div&gt;&lt;ConfirmDelete @delete=&quot;onDelete&quot;&gt;Delete&lt;/ConfirmDelete&gt;&lt;/div&gt;
        &lt;div&gt;&lt;PrimaryButton @click=&quot;submit&quot;&gt;Update Contact&lt;/PrimaryButton&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/template&gt;
  &lt;/SlideOver&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;contact&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">emits</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> emit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpdateContact</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>contact<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> colorOptions <span class="token operator">=</span> <span class="token function">propertyOptions</span><span class="token punctuation">(</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&#39;UpdateContact&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">onDelete</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">apiVoid</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteContact</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span>props<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">const</span> <span class="token function-variable function">close</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
        
        <span class="token keyword">return</span> <span class="token punctuation">{</span> request<span class="token punctuation">,</span> enumOptions<span class="token punctuation">,</span> colorOptions<span class="token punctuation">,</span> submit<span class="token punctuation">,</span> onDelete<span class="token punctuation">,</span> close <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This effectively makes form validation binding a transparent detail where all <code>@servicestack/vue</code> Input Components are able to automatically apply contextual validation errors next to the fields they apply to:</p><div class="my-8"><img class="mx-auto max-w-2xl" src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/scripts/edit-contact-validation.png"></div><h2 id="form-validation" class="pt-8 mb-4 text-2xl font-semibold text-gray-900 dark:text-gray-100"> Example using apiForm </h2><p>An alternative method of invoking APIs is to submit a HTML Form Post which can be achieved with Ajax by sending a populated <code>FormData</code> with <code>client.apiForm()</code> as done in vue-mjs&#39;s <a href="https://github.com/NetCoreTemplates/vue-mjs/blob/main/MyApp/wwwroot/Pages/SignUp.mjs" target="_blank" rel="noopener noreferrer">SignUp.mjs</a> for its <a href="https://vue-mjs.web-templates.io/signup" target="_blank" rel="noopener noreferrer">/signup</a> page:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> leftPart<span class="token punctuation">,</span> rightPart<span class="token punctuation">,</span> toPascalCase <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/client&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/vue&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Register <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../mjs/dtos.mjs&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token comment">/*html*/</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">    
    &lt;form @submit.prevent=&quot;submit&quot;&gt;
      &lt;div class=&quot;shadow overflow-hidden sm:rounded-md&quot;&gt;
        &lt;ErrorSummary except=&quot;displayName,userName,password,confirmPassword,autoLogin&quot; /&gt;
        &lt;div class=&quot;px-4 py-5 bg-white dark:bg-black space-y-6 sm:p-6&quot;&gt;
          &lt;div class=&quot;flex flex-col gap-y-4&quot;&gt;
            &lt;TextInput id=&quot;displayName&quot; help=&quot;Your first and last name&quot; v-model=&quot;request.displayName&quot; /&gt;
            &lt;TextInput id=&quot;userName&quot; label=&quot;Email&quot; placeholder=&quot;Email&quot; help=&quot;&quot; v-model=&quot;request.userName&quot; /&gt;
            &lt;TextInput id=&quot;password&quot; type=&quot;password&quot; help=&quot;6 characters or more&quot; v-model=&quot;request.password&quot; /&gt;
            &lt;TextInput id=&quot;confirmPassword&quot; type=&quot;password&quot; v-model=&quot;request.confirmPassword&quot; /&gt;
            &lt;CheckboxInput id=&quot;autoLogin&quot; v-model=&quot;request.autoLogin&quot; /&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;pt-5 px-4 py-3 bg-gray-50 dark:bg-gray-900 text-right sm:px-6&quot;&gt;
          &lt;div class=&quot;flex justify-end&quot;&gt;
            &lt;FormLoading v-if=&quot;loading&quot; class=&quot;flex-1&quot; /&gt;
            &lt;PrimaryButton :disabled=&quot;loading&quot; class=&quot;ml-3&quot;&gt;Sign Up&lt;/PrimaryButton&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/form&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">returnUrl</span><span class="token operator">:</span>String <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> setError<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> client
        <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Register</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">autoLogin</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment">/** @param email {string} */</span>
        <span class="token keyword">function</span> <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token parameter">email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token function">leftPart</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token function">rightPart</span><span class="token punctuation">(</span><span class="token function">leftPart</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> dto <span class="token operator">=</span> request<span class="token punctuation">.</span>value
            dto<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token function">toPascalCase</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token function">toPascalCase</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span>
            dto<span class="token punctuation">.</span>userName <span class="token operator">=</span> email
            dto<span class="token punctuation">.</span>confirmPassword <span class="token operator">=</span> dto<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">&#39;p@55wOrd&#39;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">/** @param {Event} e */</span>
        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>value<span class="token punctuation">.</span>password <span class="token operator">!==</span> request<span class="token punctuation">.</span>value<span class="token punctuation">.</span>confirmPassword<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fieldName</span><span class="token operator">:</span> <span class="token string">&#39;confirmPassword&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Passwords do not match&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span>
            <span class="token punctuation">}</span>
            
            <span class="token comment">// Example using client.apiForm()</span>
            <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">apiForm</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                location<span class="token punctuation">.</span>href <span class="token operator">=</span> props<span class="token punctuation">.</span>returnUrl <span class="token operator">||</span> <span class="token string">&#39;/signin&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> request<span class="token punctuation">,</span> setUser<span class="token punctuation">,</span> submit <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which method to use is largely a matter of preference except if your form needs to upload a file in which case using <code>apiForm</code> is required.</p><h2 id="form-validation" class="mt-8 mb-4 text-2xl font-semibold text-gray-900 dark:text-gray-100"> AutoForm Components </h2><p>We can elevate our productivity even further with <a href="/vue/gallery/autoform">Auto Form Components</a> that can automatically generate an instant API-enabled form with validation binding by just specifying the Request DTO to create the form for, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AutoCreateForm</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CreateBooking<span class="token punctuation">&quot;</span></span> <span class="token attr-name">formStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div>`,34),f=a("p",null,[s("The AutoForm components are powered by your "),a("a",{href:"/vue/use-metadata"},"App Metadata"),s(" which allows creating highly customized UIs from "),a("a",{href:"/locode/declarative"},"declarative C# attributes"),s(" whose customizations are reused across all ServiceStack Auto UIs.")],-1),w=e(`<p>TypeScript definition of the API surface area and type information for correct usage of <code>useClient()</code></p><div class="language-ts"><pre><code><span class="token comment">/** Maintain loading state whilst API Request is in transit */</span>
<span class="token keyword">const</span> loading<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>

<span class="token comment">/** Maintain API Error in reactive Ref&lt;ResponseStatus&gt; */</span>
<span class="token keyword">const</span> error<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>ResponseStatus<span class="token operator">&gt;</span>

<span class="token comment">/** Set error state with summary or field validation error */</span>
<span class="token keyword">function</span> <span class="token function">setError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">,</span> errorCode<span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> errors <span class="token punctuation">}</span><span class="token operator">:</span> IResponseStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** Add field error to API error state */</span>
<span class="token keyword">function</span> <span class="token function">addFieldError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> fieldName<span class="token punctuation">,</span> message<span class="token punctuation">,</span> errorCode <span class="token punctuation">}</span><span class="token operator">:</span> IResponseError<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** Send a typed API request and return results in an ApiResult&lt;TResponse&gt; */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">api</span><span class="token generic class-name"><span class="token operator">&lt;</span>TResponse<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>request<span class="token operator">:</span>IReturn<span class="token operator">&lt;</span>TResponse<span class="token operator">&gt;</span> <span class="token operator">|</span> ApiRequest<span class="token punctuation">,</span> args<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span> method<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** Send a typed API request and return empty response in a void ApiResult */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">apiVoid</span><span class="token punctuation">(</span>request<span class="token operator">:</span>IReturnVoid <span class="token operator">|</span> ApiRequest<span class="token punctuation">,</span> args<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span> method<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** Send a FormData API request and return results in an ApiResult&lt;TResponse&gt; */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">apiForm</span><span class="token generic class-name"><span class="token operator">&lt;</span>TResponse<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>request<span class="token operator">:</span>IReturn<span class="token operator">&lt;</span>TResponse<span class="token operator">&gt;</span> <span class="token operator">|</span> ApiRequest<span class="token punctuation">,</span> body<span class="token operator">:</span>FormData<span class="token punctuation">,</span> args<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span> method<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** Send a FormData API request and return empty response in a void ApiResult */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">apiFormVoid</span><span class="token punctuation">(</span>request<span class="token operator">:</span> IReturnVoid <span class="token operator">|</span> ApiRequest<span class="token punctuation">,</span> body<span class="token operator">:</span> FormData<span class="token punctuation">,</span> args<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> method<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,2),P='{"title":"JSON API Client Features","description":"","frontmatter":{"title":"JSON API Client Features"},"headers":[],"relativePath":"vue/use-client.md"}',q={},I=Object.assign(q,{__name:"use-client",setup(v){const{setMetadata:c}=k();return c(i),(h,b)=>{const o=t("Breadcrumb"),l=t("Breadcrumbs"),u=t("AutoCreateForm");return d(),m("div",null,[g,n(l,{class:"not-prose my-4 mb-8","home-href":"/vue/"},{default:p(()=>[n(o,{href:"/vue/gallery/"},{default:p(()=>[s("gallery")]),_:1}),n(o,null,{default:p(()=>[s("useClient")]),_:1})]),_:1}),y,n(u,{type:"CreateBooking",formStyle:"card",class:"mb-4 not-prose"}),f,n(r,{component:"TypeScript Definition"}),w])}}});export{P as __pageData,I as default};
