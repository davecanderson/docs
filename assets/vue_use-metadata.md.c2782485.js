import"./chunks/iconify.2272db1b.js";import{_ as c}from"./chunks/ApiReference.8128d97b.js";import{m as y}from"./chunks/metadata.46b41fb9.js";import{Z as g,D as t,o as f,c as v,e as n,q as p,u as b,d as s,a as o,b as a}from"./app.2aea72c0.js";const w=s("link",{rel:"stylesheet",href:"/css/tailwind-components.css"},null,-1),T=o(`<p>The rich server metadata about your APIs that&#39;s used to generate your App&#39;s DTOs in <a href="/add-servicestack-reference">Multiple Programming Languages</a>, power ServiceStack&#39;s <a href="/locode/declarative">built-in Auto UIs</a> also power the Metadata driven components in the <strong>@servicestack/vue</strong> component library where it can be loaded in your <code>_Layout.cshtml</code> using an optimal configuration like:</p><div class="language-html"><pre><code>var dev = HostContext.AppHost.IsDevelopmentEnvironment();
@if (dev) {
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span>Server <span class="token operator">=</span> @<span class="token keyword">await</span> Html<span class="token punctuation">.</span><span class="token function">ApiAsJsonAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MetadataApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
}

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useMetadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@@servicestack/vue&quot;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> loadMetadata <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">loadMetadata</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">olderThan</span><span class="token operator">:</span> window<span class="token punctuation">.</span>Server <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;clear=metadata&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token comment">//1hr </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Where during development it always embeds the AppMetadata in each page but as this metadata can become quite large for systems with a lot of APIs, the above optimization clears and reloads the AppMetadata after <strong>1 hr</strong> or if the page was explicitly loaded with <code>?clear=metadata</code>, otherwise it will use a local copy cached in <code>localStorage</code> at <code>/metadata/app.json</code>, which Apps needing more fine-grained cache invalidation strategies can manage themselves.</p><p>Once loaded the AppMetadata features can be access with the helper functions in <a href="/vue/use-metadata">useMetadata</a>.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMetadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/vue&quot;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> 
    loadMetadata<span class="token punctuation">,</span>      <span class="token comment">// Load {AppMetadata} if needed </span>
    setMetadata<span class="token punctuation">,</span>       <span class="token comment">// Explicitly set AppMetadata and save to localStorage</span>
    clearMetadata<span class="token punctuation">,</span>     <span class="token comment">// Delete AppMetadata and remove from localStorage</span>
    metadataApi<span class="token punctuation">,</span>       <span class="token comment">// Reactive accessor to Ref&lt;MetadataTypes&gt;</span>
    typeOf<span class="token punctuation">,</span>            <span class="token comment">// Resolve {MetadataType} for DTO name</span>
    typeOfRef<span class="token punctuation">,</span>         <span class="token comment">// Resolve {MetadataType} by {MetadataTypeName}</span>
    apiOf<span class="token punctuation">,</span>             <span class="token comment">// Resolve Request DTO {MetadataOperationType} by name</span>
    property<span class="token punctuation">,</span>          <span class="token comment">// Resolve {MetadataPropertyType} by Type and Property name</span>
    enumOptions<span class="token punctuation">,</span>       <span class="token comment">// Resolve Enum entries for Enum Type by name</span>
    propertyOptions<span class="token punctuation">,</span>   <span class="token comment">// Resolve allowable entries for property by {MetadataPropertyType}</span>
    createFormLayout<span class="token punctuation">,</span>  <span class="token comment">// Create Form Layout&#39;s {InputInfo[]} from {MetadataType}</span>
    typeProperties<span class="token punctuation">,</span>    <span class="token comment">// Return all properties (inc. inherited) for {MetadataType}</span>
    supportsProp<span class="token punctuation">,</span>      <span class="token comment">// Check if a supported HTML Input exists for {MetadataPropertyType}</span>
    Crud<span class="token punctuation">,</span>              <span class="token comment">// Query metadata information about AutoQuery CRUD Types</span>
    getPrimaryKey<span class="token punctuation">,</span>     <span class="token comment">// Resolve PrimaryKey {MetadataPropertyType} for {MetadataType}</span>
    getId<span class="token punctuation">,</span>             <span class="token comment">// Resolve Primary Key value from {MetadataType} and row instance</span>
    createDto<span class="token punctuation">,</span>         <span class="token comment">// Create a Request DTO instance for Request DTO name</span>
    toFormValues<span class="token punctuation">,</span>      <span class="token comment">// Convert Request DTO values to supported HTML Input values</span>
    formValues<span class="token punctuation">,</span>        <span class="token comment">// Convert HTML Input values to supported DTO values</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>For example you can use this to view all C# property names and Type info for the <code>Contact</code> C# DTO with:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HtmlFormat</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>typeOf(&#39;Contact&#39;).properties.map(({ name, type, namespace }) =&gt; ({ name, type, namespace }))<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div>`,7),q=o(`<h2 class="pt-8 mb-4 text-2xl font-semibold text-gray-900 dark:text-gray-100"> Enum Values and Property Options </h2><p>More usefully this can avoid code maintenance and duplication efforts from maintaining enum values on both server and client forms.</p><p>An example of this is in the <a href="https://github.com/NetCoreTemplates/razor-tailwind/blob/main/MyApp/wwwroot/Pages/Contacts.mjs" target="_blank" rel="noopener noreferrer">Contacts.mjs</a> component which uses the server metadata to populate the <strong>Title</strong> and <strong>Favorite Genre</strong> select options from the <code>Title</code> and <code>FilmGenre</code> enums:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>grid grid-cols-6 gap-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-span-6 sm:col-span-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SelectInput</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>request.title<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>enumOptions(&#39;Title&#39;)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-span-6 sm:col-span-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>request.name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">required</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Contact Name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-span-6 sm:col-span-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SelectInput</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>color<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>request.color<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>colorOptions<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-span-6 sm:col-span-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SelectInput</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>favoriteGenre<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>request.favoriteGenre<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>enumOptions(&#39;FilmGenre&#39;)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-span-6 sm:col-span-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>request.age<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Whilst the <code>colorOptions</code> gets its values from the available options on the <code>CreateContact.Color</code> property:</p><div class="language-js"><pre><code><span class="token keyword">const</span> Edit <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> property<span class="token punctuation">,</span> propertyOptions<span class="token punctuation">,</span> enumOptions <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> colorOptions <span class="token operator">=</span> <span class="token function">propertyOptions</span><span class="token punctuation">(</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;CreateContact&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> enumOptions<span class="token punctuation">,</span> colorOptions <span class="token punctuation">}</span>
        <span class="token comment">//..</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which instead of an enum, references the C# Dictionary in:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateContact</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPost</span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>CreateContactResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;select&quot;</span><span class="token punctuation">,</span> EvalAllowableEntries <span class="token operator">=</span> <span class="token string">&quot;AppData.Colors&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Color <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>To return a C# Dictionary of custom colors defined in:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureUi</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostingStartup</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> builder
        <span class="token punctuation">.</span><span class="token function">ConfigureAppHost</span><span class="token punctuation">(</span>appHost <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//Enable referencing AppData.* in #Script expressions</span>
            appHost<span class="token punctuation">.</span>ScriptContext<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>AppData<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> AppData<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppData</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">AppData</span> Instance <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> Colors <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token string">&quot;#F0FDF4&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Green&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;#EFF6FF&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Blue&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;#FEF2F2&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Red&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;#ECFEFF&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Cyan&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;#FDF4FF&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Fuchsia&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,10),M=s("p",null,[a("See "),s("a",{href:"/vue/gallery/autoform"},"Auto Form Components"),a(" docs for examples of easy to use, high productivity "),s("code",null,"AppMetadata"),a(" powered components.")],-1),h=o(`<p>TypeScript definition of the API surface area and type information for correct usage of <code>useMetadata()</code></p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> 
    AppMetadata<span class="token punctuation">,</span> MetadataType<span class="token punctuation">,</span> MetadataPropertyType<span class="token punctuation">,</span> MetadataOperationType<span class="token punctuation">,</span> InputInfo<span class="token punctuation">,</span> KeyValuePair 
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./types&quot;</span>


<span class="token comment">/** Load {AppMetadata} if needed 
 * @param olderThan   - Reload metadata if age exceeds ms
 * @param resolvePath - Override \`/metadata/app.json\` path use to fetch metadata
 * @param resolve     - Use a custom fetch to resolve AppMetadata
*/</span>
<span class="token keyword">function</span> <span class="token function">loadMetadata</span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token punctuation">{</span>
    olderThan<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    resolvePath<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    resolve<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Response<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>AppMetadata<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">/** Check if AppMetadata is valid */</span>
<span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span>metadata<span class="token operator">:</span> AppMetadata <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token comment">/** Delete AppMetadata and remove from localStorage */</span>
<span class="token keyword">function</span> <span class="token function">setMetadata</span><span class="token punctuation">(</span>metadata<span class="token operator">:</span> AppMetadata <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

<span class="token comment">/** Delete AppMetadata and remove from localStorage */</span>
<span class="token keyword">function</span> <span class="token function">clearMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>


<span class="token comment">/** Query metadata information about AutoQuery CRUD Types */</span>
<span class="token keyword">const</span> Crud<span class="token operator">:</span> <span class="token punctuation">{</span>
    Create<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    Update<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    Patch<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    Delete<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    AnyRead<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    AnyWrite<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function-variable function">isQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span>op<span class="token operator">:</span> MetadataOperationType<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
    <span class="token function-variable function">isCrud</span><span class="token operator">:</span> <span class="token punctuation">(</span>op<span class="token operator">:</span> MetadataOperationType<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token function-variable function">isCreate</span><span class="token operator">:</span> <span class="token punctuation">(</span>op<span class="token operator">:</span> MetadataOperationType<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token function-variable function">isUpdate</span><span class="token operator">:</span> <span class="token punctuation">(</span>op<span class="token operator">:</span> MetadataOperationType<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token function-variable function">isPatch</span><span class="token operator">:</span> <span class="token punctuation">(</span>op<span class="token operator">:</span> MetadataOperationType<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token function-variable function">isDelete</span><span class="token operator">:</span> <span class="token punctuation">(</span>op<span class="token operator">:</span> MetadataOperationType<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token function-variable function">model</span><span class="token operator">:</span> <span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token operator">:</span> MetadataType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/** Resolve HTML Input type to use for {MetadataPropertyType}  */</span>
<span class="token keyword">function</span> <span class="token function">propInputType</span><span class="token punctuation">(</span>prop<span class="token operator">:</span> MetadataPropertyType<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token comment">/** Resolve HTML Input type to use for C# Type name */</span>
<span class="token keyword">function</span> <span class="token function">inputType</span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token comment">/** Check if C# Type name is numeric */</span>
<span class="token keyword">function</span> <span class="token function">isNumericType</span><span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

<span class="token comment">/** Check if C# Type is an Array or List */</span>
<span class="token keyword">function</span> <span class="token function">isArrayType</span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

<span class="token comment">/** Check if a supported HTML Input exists for {MetadataPropertyType} */</span>
<span class="token keyword">function</span> <span class="token function">supportsProp</span><span class="token punctuation">(</span>prop<span class="token operator">?</span><span class="token operator">:</span> MetadataPropertyType<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

<span class="token comment">/** Create a Request DTO instance for Request DTO name */</span>
<span class="token keyword">function</span> <span class="token function">createDto</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> obj<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token comment">/** Convert Request DTO values to supported HTML Input values */</span>
<span class="token keyword">function</span> <span class="token function">toFormValues</span><span class="token punctuation">(</span>dto<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> metaType<span class="token operator">?</span><span class="token operator">:</span> MetadataType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token comment">/** Convert HTML Input values to supported DTO values */</span>
<span class="token keyword">function</span> <span class="token function">formValues</span><span class="token punctuation">(</span>form<span class="token operator">:</span> HTMLFormElement<span class="token punctuation">,</span> props<span class="token operator">?</span><span class="token operator">:</span> MetadataPropertyType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Resolve {MetadataType} for DTO name
 * @param name        - Find MetadataType by name
 * @param [namespace] - Find MetadataType by name and namespace 
 */</span>
<span class="token keyword">function</span> <span class="token function">typeOf</span><span class="token punctuation">(</span>name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> namespace<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> MetadataType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">/** Resolve Request DTO {MetadataOperationType} by name */</span>
<span class="token keyword">function</span> <span class="token function">apiOf</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> MetadataOperationType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">/** Resolve {MetadataType} by {MetadataTypeName} */</span>
<span class="token keyword">function</span> <span class="token function">typeOfRef</span><span class="token punctuation">(</span>ref<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    namespace<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> MetadataType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">property</span><span class="token punctuation">(</span>typeName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> MetadataPropertyType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">/** Resolve Enum entries for Enum Type by name */</span>
<span class="token keyword">function</span> <span class="token function">enumOptions</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">enumOptionsByType</span><span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token operator">:</span> MetadataType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">/** Resolve Enum entries for Enum Type by MetadataType */</span>
<span class="token keyword">function</span> <span class="token function">propertyOptions</span><span class="token punctuation">(</span>prop<span class="token operator">:</span> MetadataPropertyType<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">/** Convert string dictionary to [{ key:string, value:string }] */</span>
<span class="token keyword">function</span> <span class="token function">asKvps</span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> KeyValuePair<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token comment">/** Create InputInfo from MetadataPropertyType and custom InputInfo */</span>
<span class="token keyword">function</span> <span class="token function">createInput</span><span class="token punctuation">(</span>prop<span class="token operator">:</span> MetadataPropertyType<span class="token punctuation">,</span> input<span class="token operator">?</span><span class="token operator">:</span> InputInfo<span class="token punctuation">)</span><span class="token operator">:</span> InputInfo<span class="token punctuation">;</span>

<span class="token comment">/** Create Form Layout&#39;s {InputInfo[]} from {MetadataType} */</span>
<span class="token keyword">function</span> <span class="token function">createFormLayout</span><span class="token punctuation">(</span>metaType<span class="token operator">?</span><span class="token operator">:</span> MetadataType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> InputInfo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">/** Return all properties (inc. inherited) for {MetadataType} */</span>
<span class="token keyword">function</span> <span class="token function">typeProperties</span><span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token operator">:</span> MetadataType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> MetadataPropertyType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">/** Check if MetadataOperationType implements interface by name */</span>
<span class="token keyword">function</span> <span class="token function">hasInterface</span><span class="token punctuation">(</span>op<span class="token operator">:</span> MetadataOperationType<span class="token punctuation">,</span> cls<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

<span class="token comment">/** Resolve PrimaryKey {MetadataPropertyType} for {MetadataType} */</span>
<span class="token keyword">function</span> <span class="token function">getPrimaryKey</span><span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token operator">:</span> MetadataType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> MetadataPropertyType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">/** Resolve Primary Key value from {MetadataType} and row instance  */</span>
<span class="token keyword">function</span> <span class="token function">getId</span><span class="token punctuation">(</span>type<span class="token operator">:</span> MetadataType<span class="token punctuation">,</span> row<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
</code></pre></div>`,2),F='{"title":"App Metadata","description":"","frontmatter":{"title":"App Metadata"},"headers":[],"relativePath":"vue/use-metadata.md"}',_={},S=Object.assign(_,{__name:"use-metadata",setup(C){const{setMetadata:l,typeOf:u}=g();return l(y),(A,O)=>{const e=t("Breadcrumb"),k=t("Breadcrumbs"),r=t("HtmlFormat");return f(),v("div",null,[w,n(k,{class:"not-prose my-4 mb-8","home-href":"/vue/"},{default:p(()=>[n(e,{href:"/vue/gallery/"},{default:p(()=>[a("gallery")]),_:1}),n(e,null,{default:p(()=>[a("useMetadata")]),_:1})]),_:1}),T,n(r,{value:b(u)("Contact").properties.map(({name:i,type:d,namespace:m})=>({name:i,type:d,namespace:m}))},null,8,["value"]),q,n(c,{component:"AutoForm Components"}),M,n(c,{component:"TypeScript Definition"}),h])}}});export{F as __pageData,S as default};
