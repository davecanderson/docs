import{_ as n}from"./chunks/welcome.1a943c36.js";import{_ as s,o as a,c as t,a as p}from"./app.2aea72c0.js";const w='{"title":"Custom HTML Components","description":"","frontmatter":{"title":"Custom HTML Components"},"headers":[],"relativePath":"locode/custom-components.md"}',o={},e=p(`<p>The Chinook Demo shows an example of overriding its existing <a href="https://github.com/NetCoreApps/Chinook/blob/main/Chinook/wwwroot/modules/locode/components/Welcome.mjs" target="_blank" rel="noopener noreferrer">/modules/locode/components/Welcome.mjs</a> component in order to render its <a href="https://chinook.locode.dev/locode" target="_blank" rel="noopener noreferrer">custom Home page</a>.</p><p>Which in addition to using built-in Locode functionality, also makes use of your Apps Typed DTOs directly from the <a href="/javascript-add-servicestack-reference">ES6 Module DTO endpoint</a> at <code>/types/mjs</code>, e.g:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> QueryInvoices <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;/types/mjs&quot;</span>
</code></pre></div><p>This results in providing an end-to-end typed dev UX for creating custom components that call our App&#39;s APIs as done in:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> inject<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> QueryInvoices <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;/types/mjs&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> Welcome <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token comment">/*html*/</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;div class=&quot;pl-4&quot;&gt;
        &lt;h1 class=&quot;text-3xl&quot;&gt;
            Welcome to Chinook Locode
        &lt;/h1&gt;
        &lt;div v-if=&quot;lastOrders.length&quot; class=&quot;mt-8&quot;&gt;
            &lt;h3 class=&quot;text-xl mb-4&quot;&gt;Here are your last {{lastOrders.length}} orders:&lt;/h3&gt;
            &lt;DataGrid class=&quot;max-w-screen-md&quot; type=&quot;Invoices&quot; :items=&quot;lastOrders&quot; tableStyle=&quot;uppercaseHeadings&quot; /&gt;
        &lt;/div&gt;
    &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;client&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> lastOrders <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> api<span class="token punctuation">.</span>value<span class="token operator">?.</span>response<span class="token operator">?.</span>results <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        
        <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            api<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryInvoices</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 
                <span class="token literal-property property">orderBy</span><span class="token operator">:</span><span class="token string">&#39;-InvoiceId&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">take</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span>
                <span class="token literal-property property">fields</span><span class="token operator">:</span><span class="token string">&#39;InvoiceId,CustomerId,InvoiceDate,Total,BillingCountry,BillingCity&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">jsconfig</span><span class="token operator">:</span> <span class="token string">&#39;edv&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        
        <span class="token keyword">return</span> <span class="token punctuation">{</span> lastOrders <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which uses the <a href="/vue/gallery/datagrid">DataGrid</a> component to render its <a href="https://chinook.locode.dev/locode" target="_blank" rel="noopener noreferrer">custom Home page</a>:</p><p><a href="https://chinook.locode.dev/locode" target="_blank" rel="noopener noreferrer"><img src="`+n+`" alt=""></a></p><p>That makes use of the <a href="/locode/declarative#ui-metadata-attributes">Declarative UI Attributes</a> in its <a href="https://github.com/NetCoreApps/Chinook/blob/main/Chinook.ServiceModel/Types/Models.cs" target="_blank" rel="noopener noreferrer">Invoices</a> data model to render a formatted currency <strong>Total</strong> and a direct link to the Customer that the invoice was for:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Icon</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Svg <span class="token operator">=</span> Icons<span class="token punctuation">.</span>Invoices<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Invoices</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> InvoiceId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Ref</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Model <span class="token operator">=</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>Customers<span class="token punctuation">)</span><span class="token punctuation">,</span> RefId <span class="token operator">=</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>CustomerId<span class="token punctuation">)</span><span class="token punctuation">,</span> RefLabel <span class="token operator">=</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>Customers<span class="token punctuation">.</span>DisplayName<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> CustomerId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> InvoiceDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Format</span><span class="token attribute-arguments"><span class="token punctuation">(</span>FormatMethods<span class="token punctuation">.</span>Currency<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Total <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> BillingAddress <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> BillingCity <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> BillingState <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> BillingCountry <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> BillingPostalCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,9),c=[e];function l(u,r,k,i,d,m){return a(),t("div",null,c)}var h=s(o,[["render",l]]);export{w as __pageData,h as default};
