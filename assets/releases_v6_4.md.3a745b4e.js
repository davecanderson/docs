import{_ as p}from"./chunks/gallery-splash.defebc1e.js";import{_ as o,a as c,b as l,c as u,d as r,e as i,f as k,g as d,h as g,i as m,j as h,k as y,l as b,m as w,n as f,o as v,p as q,q as x}from"./chunks/component-gallery.9f11605c.js";import{I as n}from"./chunks/iconify.2272db1b.js";import{o as _,c as A,d as a,e as s,u as t,a as e,b as T}from"./app.2aea72c0.js";var C="/assets/servicestack-reference.c0e75157.png";const B=a("link",{rel:"stylesheet",href:"/css/release.css"},null,-1),S={class:"my-8 ml-20 flex flex-col items-center"},z=a("h2",{class:"border-none text-4xl sm:text-5xl md:text-6xl tracking-tight font-extrabold"},[a("span",{class:"text-purple-600 mr-6"},"RAD Blazor")],-1),F=e('<p>Due to the popularity of our <a href="/templates-blazor-tailwind">Blazor Jamstack templates</a> we&#39;ve continued investing in Blazor and improving upon their already <a href="/templates-blazor-tailwind#optimal-development-workflow">optimal Development Workflow</a> in which we&#39;re excited to announce exciting new Blazor Components enabling a compelling a Rapid Application Development platform for Blazor Apps delivering many of the productivity benefits previously limited to <a href="https://www.locode.dev" target="_blank" rel="noopener noreferrer">locode.dev</a> UI&#39;s.</p><h3 id="seamless-upgrade-from-locode" tabindex="-1">Seamless Upgrade from Locode <a class="header-anchor" href="#seamless-upgrade-from-locode" aria-hidden="true">#</a></h3><p>Our new native Blazor Components allows for a beautiful progression story where you can start with a <a href="/locode/database-first">Database-First Locode</a> solution to instantly <a href="/locode/database-first#exporting-to-code-first-types">generate Data Models and CRUD APIs</a> around your existing databases that&#39;s able to utilize <a href="/locode/">Locode&#39;s built-in UI</a> for an instant modern UI for managing your App&#39;s databases whose <a href="/locode/declarative">declarative dev model</a> can be used to define API Authorization &amp; Validation rules or to customize the Behaviour &amp; Appearance of Locode&#39;s Auto UI.</p><p>But to provide a compelling UX you&#39;ll want to adopt a <a href="https://www.locode.dev/#reuse" target="_blank" rel="noopener noreferrer">Hybrid solution</a> where after the necessary RAD dev cycles to gather and solidify business requirements you can start implementing their important unique workflows with a bespoke Blazor App that can reuse existing typed AutoQuery APIs and Data Models to speed up development whilst other supporting back-office functionality can continue to be managed by Locode.</p><h4 id="rapid-application-with-blazor" tabindex="-1">Rapid Application with Blazor <a class="header-anchor" href="#rapid-application-with-blazor" aria-hidden="true">#</a></h4><p>Thanks to the new <code>AutoQueryGrid</code> Blazor component, being able to implement CRUD UIs is now trivial where you&#39;ll be able to quickly replace Locode and develop your <strong>entire App in Blazor!</strong> In addition the new Blazor components also support customization using existing <a href="/locode/declarative#ui-metadata-attributes">UI &amp; Metadata Attributes</a> - preserving any efforts spent customizing UI&#39;s Behavior and Appearance.</p>',6),I=a("div",{class:"my-8 flex justify-center"},[a("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/iKpQI2233nY",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})],-1),D=e('<h3 id="introducing-blazor-server" tabindex="-1">Introducing Blazor Server <a class="header-anchor" href="#introducing-blazor-server" aria-hidden="true">#</a></h3><p>We&#39;re also happy to report our Blazor Tailwind Components are no longer limited to just Blazor WASM and arguably work even better in <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models?view=aspnetcore-6.0#blazor-server" target="_blank" rel="noopener noreferrer">Blazor Server Apps</a> which benefits from fast startup and exceptional responsiveness in low latency environments thanks to its architecture of running your App in a server session that only needs to propagate thin UI Virtual DOM updates to clients.</p><p class="hide-h2"></p><h2 id="blazor-server-tailwind-template" tabindex="-1">Blazor Server Tailwind Template <a class="header-anchor" href="#blazor-server-tailwind-template" aria-hidden="true">#</a></h2>',4),R={id:"blazor-server",class:"mt-12 ml-20 flex flex-col items-center"},M=e('<div class="relative bg-white py-4"><div class="mx-auto max-w-md px-4 text-center sm:max-w-3xl sm:px-6 lg:max-w-7xl lg:px-8"><p class="mt-2 text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl">Blazor Server Tailwind Template</p><p class="mx-auto mt-5 max-w-prose text-xl text-gray-500"> Ultimate dev model &amp; UX ideal for low-latency Intranet environments </p></div></div><a href="https://blazor-server.jamstacks.net"><div class="block flex justify-center shadow hover:shadow-lg rounded py-1"><img class="p-4" src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/blazor-server.png"></div></a><p>We&#39;re happy to announce our new Blazor Server App template offering a number compelling advantages over Blazor WASM, including:</p><ul><li>A superior dev model and debugging experience</li><li>Improved live-reload and faster iterative dev cycles</li><li>Full access to .NET Server functionality</li><li>Better start times &amp; UI responsiveness</li><li>Less complexity from unnecessary client project or pre-rendering solutions</li></ul><p>Although <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models?view=aspnetcore-6.0#blazor-server" target="_blank" rel="noopener noreferrer">the limitations</a> of its highly-coupled stateful server rendering session architecture does make it a poor fit for most high latency Internet sites which we continue to recommend our Blazor WASM project template for.</p><h2 id="lightweight-blazor-tailwind-templates" tabindex="-1">Lightweight Blazor Tailwind Templates <a class="header-anchor" href="#lightweight-blazor-tailwind-templates" aria-hidden="true">#</a></h2><p>To improve the utility of our Blazor WASM templates we&#39;ve reduced their included functionality down to Simple CRUD and TODO MVC Examples pre-configured to use <a href="/ormlite/db-migrations">DB Migrations</a>, integrated Auth inc. Sign In and Sign Up pages, support for Markdown docs and Top &amp; Sidebar navigation which should reduce the effort to remove and replace functionality to make way for your new App.</p><p>To better showcase our growing Blazor functionality we&#39;ve moved all other functionality to the new Blazor Gallery websites showcasing usage of available rich Blazor Components for rapidly develop beautiful Tailwind Web Apps:</p><p class="hide-h2"></p><h2 id="blazor-gallery" tabindex="-1">Blazor Gallery <a class="header-anchor" href="#blazor-gallery" aria-hidden="true">#</a></h2><div id="blazor-component-gallery" class="relative bg-white py-4"><div class="mx-auto max-w-md px-4 text-center sm:max-w-3xl sm:px-6 lg:max-w-7xl lg:px-8"><p class="mt-2 text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl">Blazor Gallery</p><p class="mx-auto mt-5 max-w-prose text-xl text-gray-500"> Discover ServiceStack.Blazor Rich UI Components and Integrated Features </p></div></div><p><a href="https://blazor-gallery.servicestack.net" target="_blank" rel="noopener noreferrer"><img src="'+p+'" alt=""></a></p><p>As our components support both hosting models we&#39;re maintaining identical Gallery sites running on both <strong>Blazor Server</strong> and <strong>WASM</strong>:</p><div class="mb-16 mx-auto mt-5 max-w-md sm:flex sm:justify-center md:mt-8"><div class="rounded-md shadow"><a href="https://blazor-gallery.servicestack.net" class="flex w-full items-center justify-center rounded-md border border-transparent bg-indigo-600 px-8 py-3 text-base font-medium text-white hover:bg-indigo-700 md:py-4 md:px-10 md:text-lg hover:no-underline"> Blazor Server </a></div><div class="mt-3 rounded-md shadow sm:mt-0 sm:ml-3"><a href="https://blazor-gallery.jamstacks.net" class="flex w-full items-center justify-center rounded-md border border-transparent bg-white px-8 py-3 text-base font-medium text-indigo-600 hover:bg-gray-50 md:py-4 md:px-10 md:text-lg hover:no-underline"> Blazor WASM </a></div></div><p>For a closer look at ServiceStack.Blazor Components in action, download &amp; run them to see how good they&#39;ll run in your Environment:</p>',15),P={class:"flex flex-col"},U={href:"https://github.com/NetCoreApps/BlazorGallery",class:"text-xl text-gray-800"},L=a("span",null,"NetCoreApps/BlazorGallery",-1),G={href:"https://github.com/NetCoreApps/BlazorGalleryWasm",class:"mt-2 text-xl text-gray-800"},V=a("span",null,"NetCoreApps/BlazorGalleryWasm",-1),Q=a("p",{class:"hide-h2"},null,-1),H=a("h2",{id:"blazor-tailwind-components",tabindex:"-1"},[T("Blazor Tailwind Components "),a("a",{class:"header-anchor",href:"#blazor-tailwind-components","aria-hidden":"true"},"#")],-1),E={id:"blazor-components",class:"mt-16 mb-8 ml-20 flex flex-col items-center"},N=a("h2",{class:"border-none text-4xl sm:text-5xl md:text-6xl tracking-tight font-extrabold"},[a("span",{class:"text-purple-600 mr-6"},"Blazor"),a("span",{class:"mr-6",style:{color:"#44A8B3"}},"Tailwind"),a("span",{class:"text-gray-800"},"Components")],-1),W=e(`<p>We encourage you to explore to the Blazor Gallery websites for the full preview, but we&#39;ll look at some of the Components here to give you some idea of the functionality available.</p><h3 id="datagrid" tabindex="-1">DataGrid <a class="header-anchor" href="#datagrid" aria-hidden="true">#</a></h3><p><code>DataGrid</code> is a versatile Component we expect to be heavily used for rendering any typed collection:</p><div class="language-cshtml"><pre><code>&lt;DataGrid Model=&quot;Track&quot; Items=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Track<span class="token punctuation">.</span>Results</span></span> /&gt;
</code></pre></div><p>Which by default renders results in a striped Tailwind Table:</p><p><img src="`+o+`" alt=""></p><p>Whose appearance can be styled to support many of the <a href="https://tailwindui.com/components/application-ui/lists/tables" target="_blank" rel="noopener noreferrer">Tailwind Table Styles</a> with the <code>TableStyles</code> Flag enum, e.g:</p><div class="language-cshtml"><pre><code>&lt;DataGrid Model=&quot;Track&quot; Items=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Track<span class="token punctuation">.</span>Results</span></span> TableStyle=&quot;TableStyle.VerticalLines&quot; /&gt;

&lt;DataGrid Model=&quot;Track&quot; Items=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Track<span class="token punctuation">.</span>Results</span></span> TableStyle=&quot;TableStyle.WhiteBackground&quot; /&gt;

&lt;DataGrid Model=&quot;Track&quot; Items=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Track<span class="token punctuation">.</span>Results</span></span> TableStyle=&quot;TableStyle.FullWidth&quot; /&gt;

&lt;DataGrid Model=&quot;Track&quot; Items=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Track<span class="token punctuation">.</span>Results</span></span> 
          TableStyle=&quot;TableStyle.UppercaseHeadings | TableStyle.FullWidth | TableStyle.VerticalLines&quot; /&gt;
</code></pre></div><p><img src="`+c+`" alt=""></p><p>It&#39;s a highly versatile component where you&#39;ll be able to control which columns are displayed and how they&#39;re formatted using <code>&lt;Column&gt;</code> definitions, e.g. here&#39;s how we can customize the table to look like Blazor&#39;s <a href="https://github.com/SteveSanderson/Blazor/blob/master/samples/ClientServerApp/ClientServerApp.Client/FetchData.cshtml" target="_blank" rel="noopener noreferrer">FetchData.cshtml</a> tabular results:</p><div class="language-cshtml"><pre><code>&lt;DataGrid Items=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">forecasts</span></span> class=&quot;max-w-screen-md&quot; TableStyle=&quot;TableStyle.StripedRows | TableStyle.UppercaseHeadings&quot;&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(WeatherForecast x) =&gt; x.Date<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Format</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dd/MM/yyyy<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Temp. (C)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(WeatherForecast x) =&gt; x.TemperatureC<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Temp. (F)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(WeatherForecast x) =&gt; x.TemperatureF<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(WeatherForecast x) =&gt; x.Summary<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DataGrid</span><span class="token punctuation">&gt;</span></span>

<span class="token block"><span class="token keyword">@code</span> <span class="token csharp language-csharp"><span class="token punctuation">{</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>WeatherForecast<span class="token punctuation">&gt;</span></span> forecasts <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">OnInitializedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        forecasts <span class="token operator">=</span> <span class="token keyword">await</span> Http<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>WeatherForecast<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;data/weather.json&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></span></span>
</code></pre></div><p><a href="https://blazor-gallery.servicestack.net/fetchdata" target="_blank" rel="noopener noreferrer"><img src="`+l+`" alt=""></a></p><p>Here&#39;s a more advanced example showing how to implement a responsive DataGrid by utilizing custom Header and Table Cell templates to define what columns and Headers are visible at different responsive breakpoints and how to enable different features like <strong>Row Selection</strong> and <strong>Filtering</strong> and examples of handling the Row and Header selected events App&#39;s can use for executing custom logic:</p><div class="language-cshtml"><pre><code>&lt;DataGrid Model=&quot;Booking&quot; Items=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Items</span></span> AllowSelection=&quot;true&quot; AllowFiltering=&quot;true&quot;
          HeaderSelected=&quot;HandleSelectedHeader&quot; RowSelected=&quot;HandleSelectedRow&quot;&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.Id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-gray-900<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.Name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">VisibleFrom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Breakpoint.ExtraLarge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.RoomType<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden lg:inline<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Room <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>Type
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Column</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.RoomNumber<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden lg:inline<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Room <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>No
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Column</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.Cost<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Format</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>C<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.BookingStartDate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Formatter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FormatDate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">VisibleFrom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Breakpoint.Small<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">&gt;</span></span>
            Start<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden lg:inline<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> Date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Column</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.BookingEndDate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Formatter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FormatDate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">VisibleFrom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Breakpoint.ExtraLarge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">&gt;</span></span>
            End<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden lg:inline<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> Date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Template</span><span class="token punctuation">&gt;</span></span><span class="token block"><span class="token keyword">@</span><span class="token csharp language-csharp"><span class="token punctuation">{</span> <span class="token class-name"><span class="token keyword">var</span></span> booking <span class="token operator">=</span> context <span class="token keyword">as</span> <span class="token class-name">Booking</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span><span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">booking<span class="token punctuation">.</span>BookingEndDate<span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Column</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Employee<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.CreatedBy<span class="token punctuation">&quot;</span></span> <span class="token attr-name">VisibleFrom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Breakpoint.Medium<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DataGrid</span><span class="token punctuation">&gt;</span></span>

<span class="token block"><span class="token keyword">@code</span> <span class="token csharp language-csharp"><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Booking<span class="token punctuation">&gt;</span></span> Items <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Create<span class="token punctuation">.</span><span class="token function">Booking</span><span class="token punctuation">(</span><span class="token string">&quot;First Booking!&quot;</span><span class="token punctuation">,</span>  RoomType<span class="token punctuation">.</span>Queen<span class="token punctuation">,</span>  <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;employee@email.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BOOK10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Create<span class="token punctuation">.</span><span class="token function">Booking</span><span class="token punctuation">(</span><span class="token string">&quot;Booking 2&quot;</span><span class="token punctuation">,</span>       RoomType<span class="token punctuation">.</span>Double<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token string">&quot;manager@email.com&quot;</span><span class="token punctuation">,</span>  <span class="token string">&quot;BOOK25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Create<span class="token punctuation">.</span><span class="token function">Booking</span><span class="token punctuation">(</span><span class="token string">&quot;Booking the 3rd&quot;</span><span class="token punctuation">,</span> RoomType<span class="token punctuation">.</span>Suite<span class="token punctuation">,</span>  <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token string">&quot;employee@email.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BOOK50&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">FormatDate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> o<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> o <span class="token keyword">is</span> <span class="token class-name">DateTime</span> <span class="token return-type class-name">d <span class="token punctuation">?</span></span> d<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleSelectedHeader</span><span class="token punctuation">(</span><span class="token class-name">Column<span class="token punctuation">&lt;</span>Booking<span class="token punctuation">&gt;</span></span> item<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> JS<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleSelectedRow</span><span class="token punctuation">(</span><span class="token class-name">Booking</span> x<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> JS<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></span></span>
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Resize webpage to preview its responsive appearance and different resolution breakpoints</p></div><iframe class="w-full border-none" style="height:385px;" src="https://blazor-gallery.jamstacks.net/gallery/datagrid/responsive"></iframe><h3 id="autoquerygrid" tabindex="-1">AutoQueryGrid <a class="header-anchor" href="#autoquerygrid" aria-hidden="true">#</a></h3><p>The functionality and extensibility in <code>DataGrid</code> lays the foundation for higher-level components like <code>AutoQueryGrid</code> which makes use of it to enable its Auto UI around <a href="/autoquery-crud">AutoQuery CRUD</a> Services.</p><h3 id="autoquerygrid-read-only" tabindex="-1">AutoQueryGrid Read Only <a class="header-anchor" href="#autoquerygrid-read-only" aria-hidden="true">#</a></h3><p>At a minimum AutoQueryGrid requires the AutoQuery APIs it should call to implement its functionality, so you can implement a <strong>read-only</strong> grid by only specifying the AutoQuery API to query a data model, e.g:</p><div class="language-csharp"><pre><code><span class="token operator">&lt;</span><span class="token class-name">AutoQueryGrid</span> Model<span class="token operator">=</span><span class="token string">&quot;Booking&quot;</span> Apis<span class="token operator">=</span><span class="token string">&quot;Apis.AutoQuery&lt;QueryBookings&gt;()&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div><p>This one AutoQuery API is enough to power a functional read-only UI enabling multi flexible querying capabilities, paging, custom column selection and the ability to export the desired filtered resultset to .csv which can be open in Excel or copy the API URL Apps can use to consume the JSON API results:</p><iframe class="w-full border-none" style="height:430px;" src="https://blazor-gallery.jamstacks.net/gallery/autoquerygrid/readonly"></iframe><h3 id="autoquerygrid-crud" tabindex="-1">AutoQueryGrid CRUD <a class="header-anchor" href="#autoquerygrid-crud" aria-hidden="true">#</a></h3><p>Full CRUD functionality can be enabled by specifying the AutoQuery CRUD APIs for a specified data model, e.g:</p><div class="language-csharp"><pre><code><span class="token operator">&lt;</span><span class="token class-name">AutoQueryGrid</span> Model<span class="token operator">=</span><span class="token string">&quot;Booking&quot;</span> Apis<span class="token operator">=</span><span class="token string">&quot;Apis.AutoQuery&lt;QueryBookings,CreateBooking,UpdateBooking,DeleteBooking&gt;()&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div><p><a href="https://blazor-gallery.jamstacks.net/gallery/autoquerygrid/crud" target="_blank" rel="noopener noreferrer"><img src="`+u+`" alt=""></a></p><h3 id="customizable-columns" tabindex="-1">Customizable Columns <a class="header-anchor" href="#customizable-columns" aria-hidden="true">#</a></h3><p>As <code>AutoQueryGrid</code> builds on <code>DataGrid</code> it also inherits its customizable option allowing for <a href="https://blazor-gallery.servicestack.net/gallery/autoquerygrid" target="_blank" rel="noopener noreferrer">customizable responsive columns</a>, e.g:</p><div class="language-cshtml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AutoQueryGrid</span> <span class="token attr-name">Model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Booking<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Apis</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Apis.AutoQuery&lt;QueryBookings,CreateBooking,UpdateBooking,DeleteBooking&gt;()<span class="token punctuation">&quot;</span></span>
               <span class="token attr-name">AllowSelection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">AllowFiltering</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>
               <span class="token attr-name">HeaderSelected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OnSelectedHeader<span class="token punctuation">&quot;</span></span> <span class="token attr-name">RowSelected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OnSelectedRow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Columns</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- Custom class --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.Id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-gray-900<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- Only show from Tailwind&#39;s xl responsive Breakpoint --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.Name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">VisibleFrom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Breakpoint.ExtraLarge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- Custom Header collapsing &#39;Room&#39; below &#39;lg&#39; responsive breakpoint --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.RoomType<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden lg:inline<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Room <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>Type
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Column</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- Custom Header collapsing &#39;Room&#39; below &#39;lg&#39; responsive breakpoint --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.RoomNumber<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden lg:inline<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Room <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>No
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Column</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- Custom string Format --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.Cost<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Format</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>C<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- Custom C# Formatter --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.BookingStartDate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Formatter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FormatDate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">VisibleFrom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Breakpoint.Small<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">&gt;</span></span>
                Start<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden lg:inline<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> Date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Column</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- Custom Header and Cell Value --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.BookingEndDate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">VisibleFrom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Breakpoint.ExtraLarge2x<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">&gt;</span></span>
                End<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden lg:inline<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> Date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Template</span><span class="token punctuation">&gt;</span></span>
                <span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">context<span class="token punctuation">.</span>BookingEndDate<span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Template</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Column</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- Custom Title and Complex Type Cell with Reference Link --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Column</span> <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Voucher<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(Booking x) =&gt; x.Discount<span class="token punctuation">&quot;</span></span> <span class="token attr-name">VisibleFrom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Breakpoint.ExtraLarge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Template</span><span class="token punctuation">&gt;</span></span>
<span class="token block"><span class="token keyword">@if</span> <span class="token csharp language-csharp"><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Discount <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token operator">&lt;</span>TextLink <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;flex items-end&quot;</span> href<span class="token operator">=</span>@<span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;/gallery/autoquerygrid/coupons?Id=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Discount<span class="token punctuation">.</span>Id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token class-name">PreviewFormat</span> Value<span class="token operator">=</span>@context<span class="token punctuation">.</span>Discount <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>TextLink<span class="token operator">&gt;</span>
<span class="token punctuation">}</span></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Template</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Column</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Columns</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AutoQueryGrid</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Customizing how and when columns are rendered at different breakpoints using different formatting options and custom table header and cell templates:</p><p><a href="https://blazor-gallery.jamstacks.net/gallery/autoquerygrid/responsive" target="_blank" rel="noopener noreferrer"><img src="`+r+`" alt=""></a></p><h3 id="declarative-customizations" tabindex="-1">Declarative Customizations <a class="header-anchor" href="#declarative-customizations" aria-hidden="true">#</a></h3><p>The columns can also be customized declaratively using the <code>[Format]</code> Metadata Attribute on the Model type:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Contact</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuditBase</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Format</span><span class="token attribute-arguments"><span class="token punctuation">(</span>FormatMethods<span class="token punctuation">.</span>IconRounded<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ProfileUrl <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Format</span><span class="token attribute-arguments"><span class="token punctuation">(</span>FormatMethods<span class="token punctuation">.</span>Currency<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> SalaryExpectation <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token function">Format</span><span class="token punctuation">(</span>FormatMethods<span class="token punctuation">.</span>LinkEmail<span class="token punctuation">,</span> Options <span class="token operator">=</span> 
        <span class="token string">@&quot;{target:&#39;_self&#39;,subject:&#39;New Job Opportunity&#39;,
           body:&#39;We have an exciting new opportunity...&#39;, cls:&#39;text-green-600&#39;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Format</span><span class="token attribute-arguments"><span class="token punctuation">(</span>FormatMethods<span class="token punctuation">.</span>LinkPhone<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Phone <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which can change how results are formatted in the data grid results:</p><p><a href="https://blazor-gallery.jamstacks.net/grid/contacts-meta" target="_blank" rel="noopener noreferrer"><img src="`+i+`" alt=""></a></p><p>Whilst the <code>[Input]</code> and <code>[FieldCss]</code> attributes on the AutoQuery CRUD DTOs:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateContact</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPatchDb<span class="token punctuation">&lt;</span>Contact<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>Contact<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type <span class="token operator">=</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">UploadTo</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;profiles&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> ProfileUrl <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> SalaryExpectation <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> JobType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> AvailabilityWeeks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">EmploymentType<span class="token punctuation">?</span></span> PreferredWorkType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> PreferredLocation <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Phone <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
 
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token string">&quot;textarea&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FieldCss</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Field<span class="token operator">=</span><span class="token string">&quot;col-span-12 text-center&quot;</span><span class="token punctuation">,</span> Input<span class="token operator">=</span><span class="token string">&quot;h-48&quot;</span><span class="token punctuation">,</span> Label<span class="token operator">=</span><span class="token string">&quot;text-xl text-indigo-700&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> About <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Can customize how forms are rendered, e.g:</p><p><a href="https://blazor-gallery.jamstacks.net/grid/contacts-meta" target="_blank" rel="noopener noreferrer"><img src="`+k+`" alt=""></a></p><h3 id="changing-autoquerygrid-defaults" tabindex="-1">Changing AutoQueryGrid Defaults <a class="header-anchor" href="#changing-autoquerygrid-defaults" aria-hidden="true">#</a></h3><p>A lot of AutoQueryGrid&#39;s UI is customizable allowing you to easily toggle on/off UI features as needed, if you have a consistent style you wish to enforce you can change the defaults of every AutoQueryGrid component with <a href="#blazor-config">BlazorConfig</a>, e.g. you can remove <strong>Copy URL</strong> button and change the default Table style to use Uppercase Headings with:</p><div class="language-csharp"><pre><code>BlazorConfig<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    AutoQueryGridDefaults <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TableStyle <span class="token operator">=</span> TableStyle<span class="token punctuation">.</span>StripedRows <span class="token operator">|</span> TableStyle<span class="token punctuation">.</span>UppercaseHeadings<span class="token punctuation">,</span>
        ShowCopyApiUrl <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which will change the appearance of every <code>AutoQueryGrid</code> Component used in the App unless overridden.</p><h3 id="autoquerygrid-gallery" tabindex="-1">AutoQueryGrid Gallery <a class="header-anchor" href="#autoquerygrid-gallery" aria-hidden="true">#</a></h3><p>As AutoQueryGrid is a core component for the rapid development of Apps we&#39;re maintaining a dedicated section showcasing their different features at <a href="https://blazor-gallery.servicestack.net/grid" target="_blank" rel="noopener noreferrer">blazor-gallery.servicestack.net/grid</a>:</p><p><a href="https://blazor-gallery.servicestack.net/grid" target="_blank" rel="noopener noreferrer"><img src="`+d+`" alt=""></a></p><h2 id="modal-lookups" tabindex="-1">Modal Lookups <a class="header-anchor" href="#modal-lookups" aria-hidden="true">#</a></h2><p>To provide an optimal UX for relational fields <code>AutoQueryGrid</code> utilizes Modal Lookups for searching and selecting referential data that&#39;s automatically inferred from your OrmLite data model relationships, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JobApplication</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuditBase</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">References</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Job</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> JobId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">References</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Contact</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ContactId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Where it will display an enhanced <a href="https://reference.servicestack.net/api/ServiceStack.Blazor.Components.Tailwind/LookupInput" target="_blank" rel="noopener noreferrer">LookupInput</a> instead of a plain Text Input for the relational <code>JobId</code> and <code>ContactId</code> fields:</p><p><a href="https://blazor-gallery.servicestack.net/grid/job-applications?edit=1" target="_blank" rel="noopener noreferrer"><img src="`+g+'" alt=""></a></p><p>Which users can use to quickly search for the related record instead of manually inserting Foreign Key Ids:</p><p><a href="https://blazor-gallery.servicestack.net/grid/job-applications?edit=1" target="_blank" rel="noopener noreferrer"><img src="'+m+`" alt=""></a></p><h2 id="file-uploads" tabindex="-1">File Uploads <a class="header-anchor" href="#file-uploads" aria-hidden="true">#</a></h2><p>Another feature showcased in the above screenshots is support for <a href="/locode/files">Managed File Uploads</a> which can be declaratively added with the <code>[Input(Type=&quot;file&quot;)]</code> to render the <a href="https://reference.servicestack.net/api/ServiceStack.Blazor.Components.Tailwind/FileInput" target="_blank" rel="noopener noreferrer">FileInput</a> Component and <code>[UploadTo]</code> attribute to specify which File <a href="/locode/files#basic-file-upload-example">Upload location</a> it should use:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateJobApplication</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPatchDb<span class="token punctuation">&lt;</span>JobApplication<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>JobApplication<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> JobId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> ContactId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> AppliedDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">JobApplicationStatus<span class="token punctuation">?</span></span> ApplicationStatus <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type <span class="token operator">=</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">UploadTo</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;applications&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>JobApplicationAttachment<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> Attachments <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>For a quick primer on using Managed File Uploads to <a href="/locode/files-blazor">Upload files from Blazor</a> checkout:</p>`,59),j=a("div",{class:"my-16 px-4 sm:px-6"},[a("div",{class:"text-center"},[a("h1",{class:"text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl"},[a("a",{href:"/locode/files-blazor",class:"block xl:inline"},"File Blazor")])]),a("div",{class:"my-8"},[a("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/5sd00MzHpaU",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})])],-1),O=e(`<h2 id="auto-forms" tabindex="-1">Auto Forms <a class="header-anchor" href="#auto-forms" aria-hidden="true">#</a></h2><p>The Auto Form components are other high productivity components which can be used to create an automated form based from a Request DTO definition:</p><div class="language-csharp"><pre><code><span class="token operator">&lt;</span><span class="token class-name">AutoCreateForm</span> Model<span class="token operator">=</span><span class="token string">&quot;Booking&quot;</span> ApiType<span class="token operator">=</span><span class="token string">&quot;typeof(CreateBooking)&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div><p><a href="https://blazor-gallery.servicestack.net/gallery/autoform" target="_blank" rel="noopener noreferrer"><img src="`+h+`" alt=""></a></p><h3 id="autoeditform" tabindex="-1">AutoEditForm <a class="header-anchor" href="#autoeditform" aria-hidden="true">#</a></h3><p>Whilst <code>AutoEditForm</code> can be used to render an automated form based to update and delete an <a href="/autoquery-crud">AutoQuery CRUD</a> API:</p><div class="language-csharp"><pre><code><span class="token operator">&lt;</span><span class="token class-name">AutoEditForm</span> Model<span class="token operator">=</span><span class="token string">&quot;Booking&quot;</span> Edit<span class="token operator">=</span><span class="token string">&quot;Model&quot;</span> ApiType<span class="token operator">=</span><span class="token string">&quot;typeof(UpdateBooking)&quot;</span> DeleteApiType<span class="token operator">=</span><span class="token string">&quot;typeof(DeleteBooking)&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

@code <span class="token punctuation">{</span>
    <span class="token class-name">Booking</span> Model <span class="token operator">=</span> Create<span class="token punctuation">.</span><span class="token function">Booking</span><span class="token punctuation">(</span><span class="token string">&quot;First Booking!&quot;</span><span class="token punctuation">,</span> RoomType<span class="token punctuation">.</span>Queen<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;employee@email.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><a href="https://blazor-gallery.servicestack.net/gallery/autoform" target="_blank" rel="noopener noreferrer"><img src="`+y+`" alt=""></a></p><p>The forms behavior and appearance is further customizable with the <a href="/locode/declarative#annotate-apis">API annotation</a>, declarative <a href="/locode/declarative#type-validation-attributes">validation</a> and the custom <a href="/locode/declarative#custom-fields-and-inputs">Field and Input</a> attributes, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Update an existing Booking&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Notes</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Find out how to quickly create a &lt;a class=&#39;svg-external&#39; target=&#39;_blank&#39; href=&#39;https://youtu.be/rSFiikDjGos&#39;&gt;C# Bookings App from Scratch&lt;/a&gt;&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/booking/{Id}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PATCH&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateHasRole</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Employee&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoApply</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Behavior<span class="token punctuation">.</span>AuditModify<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateBooking</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPatchDb<span class="token punctuation">&lt;</span>Booking<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>IdResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">RoomType<span class="token punctuation">?</span></span> RoomType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateGreaterThan</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> RoomNumber <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateGreaterThan</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span><span class="token punctuation">?</span></span> Cost <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> BookingStartDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> BookingEndDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Input</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Type <span class="token operator">=</span> <span class="token string">&quot;textarea&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Notes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> Cancelled <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Both AutoForm components will render the Forms UI in a Slide Over dialog and includes built-in support for calling the API to update or edit the record with integrated contextual validation, reporting any field validation errors alongside their Input controls.</p><h3 id="autoformfields" tabindex="-1">AutoFormFields <a class="header-anchor" href="#autoformfields" aria-hidden="true">#</a></h3><p>If more advanced customization of a Forms appearance and behavior is required, you can use <code>AutoFormFields</code> to just render the Form&#39;s fields (including Validation binding) that can be used to populate a Request DTO that your App can handle sending, e.g:</p><p><a href="https://blazor-gallery.servicestack.net/gallery/autoform" target="_blank" rel="noopener noreferrer"><img src="`+b+`" alt=""></a></p><div class="language-csharp"><pre><code><span class="token operator">&lt;</span><span class="token class-name">form</span> @onsubmit<span class="token operator">=</span><span class="token string">&quot;submit&quot;</span> @onsubmit<span class="token punctuation">:</span>preventDefault<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;shadow sm:overflow-hidden sm:rounded-md max-w-screen-lg&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;space-y-6 bg-white py-6 px-4 sm:p-6&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>h3 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;text-lg font-medium leading-6 text-gray-900&quot;</span><span class="token operator">&gt;</span>@<span class="token punctuation">(</span>ApiType<span class="token punctuation">.</span><span class="token function">GetDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;notes mt-1 text-sm text-gray-500&quot;</span><span class="token operator">&gt;</span>
                    @<span class="token punctuation">(</span><span class="token punctuation">(</span>MarkupString<span class="token punctuation">)</span>ApiType<span class="token punctuation">.</span><span class="token function">GetNotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

            <span class="token operator">&lt;</span><span class="token class-name">AutoFormFields</span> Type<span class="token operator">=</span><span class="token string">&quot;typeof(Booking)&quot;</span> Api<span class="token operator">=</span><span class="token string">&quot;Api&quot;</span> FormLayout<span class="token operator">=</span><span class="token string">&quot;FormLayout&quot;</span> ModelDictionary<span class="token operator">=</span><span class="token string">&quot;ModelDictionary&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>

        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;bg-gray-50 px-4 py-3 text-right sm:px-12&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token class-name">PrimaryButton</span> type<span class="token operator">=</span><span class="token string">&quot;submit&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;submit&quot;</span><span class="token operator">&gt;</span>Save<span class="token operator">&lt;</span><span class="token operator">/</span>PrimaryButton<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>

@code <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Inject</span></span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token return-type class-name">JsonApiClient<span class="token punctuation">?</span></span> Client <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name">IHasErrorStatus<span class="token punctuation">?</span></span> Api <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token class-name">Type</span> ApiType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UpdateBooking</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>InputInfo<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> FormLayout <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> ModelDictionary <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">MetadataType</span> MetadataType <span class="token operator">=&gt;</span> ApiType<span class="token punctuation">.</span><span class="token function">ToMetadataType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Booking</span> Edit <span class="token operator">=</span> Create<span class="token punctuation">.</span><span class="token function">Booking</span><span class="token punctuation">(</span><span class="token string">&quot;First Booking!&quot;</span><span class="token punctuation">,</span> RoomType<span class="token punctuation">.</span>Queen<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;employee@email.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">OnParametersSetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnParametersSetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Api <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        ModelDictionary <span class="token operator">=</span> Edit<span class="token punctuation">.</span><span class="token function">ToModelDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        FormLayout <span class="token operator">??=</span> MetadataType<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateFormLayout</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Booking<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> ModelDictionary<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromModelDictionary</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UpdateBooking<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Api <span class="token operator">=</span> <span class="token keyword">await</span> Client<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">ApiAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="previewformat" tabindex="-1">PreviewFormat <a class="header-anchor" href="#previewformat" aria-hidden="true">#</a></h2><p>The <code>&lt;PreviewFormat&gt;</code> component is useful for rendering Table Cell data into different customizable formats, e.g:</p><div class="language-cshtml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PreviewFormat</span> <span class="token attr-name">Value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>50<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Format</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>Formats.Currency</span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PreviewFormat</span> <span class="token attr-name">Value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Format</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>Formats.Bytes</span> <span class="token punctuation">/&gt;</span></span>

&lt;PreviewFormat Value=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Url</span></span> Format=Formats.Icon IconClass=&quot;w-40 h-40&quot; /&gt;

&lt;PreviewFormat Value=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Url</span></span> Format=Formats.Icon IconClass=&quot;w-40 h-40 rounded-full&quot; /&gt;

&lt;PreviewFormat Value=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Url</span></span> Format=Formats.Attachment /&gt;

&lt;PreviewFormat Value=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Path</span></span> Format=Formats.Attachment /&gt;

&lt;PreviewFormat Value=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Url</span></span> Format=Formats.Link /&gt;

&lt;PreviewFormat Value=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Email</span></span> Format=Formats.LinkEmail /&gt;

&lt;PreviewFormat Value=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Phone</span></span> Format=Formats.LinkPhone /&gt;
</code></pre></div><p><a href="https://blazor-gallery.servicestack.net/gallery/formats" target="_blank" rel="noopener noreferrer"><img src="`+w+`" alt=""></a></p><h2 id="htmlformat" tabindex="-1">HtmlFormat <a class="header-anchor" href="#htmlformat" aria-hidden="true">#</a></h2><p>Whilst the versatile <code>&lt;HtmlFormat&gt;</code> component can be used to render any Serializable object into a human-friendly HTML Format, e.g:</p><h3 id="single-model" tabindex="-1">Single Model <a class="header-anchor" href="#single-model" aria-hidden="true">#</a></h3><div class="language-cshtml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>max-w-screen-sm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    &lt;HtmlFormat Value=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Track<span class="token punctuation">.</span>Results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span></span> /&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><a href="https://blazor-gallery.servicestack.net/gallery/formats" target="_blank" rel="noopener noreferrer"><img src="`+f+`" alt=""></a></p><h3 id="item-collections" tabindex="-1">Item Collections <a class="header-anchor" href="#item-collections" aria-hidden="true">#</a></h3><div class="language-cshtml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>max-w-screen-sm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    &lt;HtmlFormat Value=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Track<span class="token punctuation">.</span>Results</span></span> /&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><a href="https://blazor-gallery.servicestack.net/gallery/formats" target="_blank" rel="noopener noreferrer"><img src="`+v+`" alt=""></a></p><h3 id="nested-complex-types" tabindex="-1">Nested Complex Types <a class="header-anchor" href="#nested-complex-types" aria-hidden="true">#</a></h3><div class="language-cshtml"><pre><code>&lt;HtmlFormat Value=<span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Create<span class="token punctuation">.</span>Players</span></span> /&gt;
</code></pre></div><p><a href="https://blazor-gallery.servicestack.net/gallery/formats" target="_blank" rel="noopener noreferrer"><img src="`+q+'" alt=""></a></p><p>For more info about the Blazor Components available checkout the <a href="https://blazor-gallery.servicestack.net/gallery" target="_blank" rel="noopener noreferrer">Component Gallery</a>:</p><p><a href="https://blazor-gallery.servicestack.net/gallery" target="_blank" rel="noopener noreferrer"><img src="'+x+`" alt=""></a></p><h2 id="blazor-config" tabindex="-1">Blazor Config <a class="header-anchor" href="#blazor-config" aria-hidden="true">#</a></h2><p>A lot of the default conventions used by the Blazor Components are overridable with <a href="https://reference.servicestack.net/api/ServiceStack.Blazor/BlazorConfig" target="_blank" rel="noopener noreferrer">BlazorConfig</a> initialized in <code>Program.cs</code>, where Blazor WASM projects configured with something like:</p><div class="language-csharp"><pre><code>BlazorConfig<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">BlazorConfig</span>
<span class="token punctuation">{</span>
    IsWasm <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    Services <span class="token operator">=</span> app<span class="token punctuation">.</span>Services<span class="token punctuation">,</span>
    FallbackAssetsBasePath <span class="token operator">=</span> apiBaseUrl<span class="token punctuation">,</span>
    EnableLogging <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    EnableVerboseLogging <span class="token operator">=</span> builder<span class="token punctuation">.</span>HostEnvironment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="asset-and-fallback-paths" tabindex="-1">Asset and Fallback Paths <a class="header-anchor" href="#asset-and-fallback-paths" aria-hidden="true">#</a></h3><p>Where <code>FallbackAssetsBasePath</code> allows you to specify a fallback path for Images which is useful when there&#39;s a delay for syncing uploaded assets to the CDN that the Blazor WASM client is deployed to, as it can fallback to referencing the asset from the .NET App Server that handled the file upload.</p><p>Alternatively <code>AssetsBasePath</code> can be used for specifying a different primary CDN location that&#39;s different from the Blazor WASM App CDN or <code>AssetsPathResolver</code> and <code>FallbackPathResolver</code> can be used when more a advanced custom strategy is required.</p><h2 id="blazor-wasm-tailwind-upgrade" tabindex="-1">Blazor WASM Tailwind Upgrade <a class="header-anchor" href="#blazor-wasm-tailwind-upgrade" aria-hidden="true">#</a></h2><p>The advanced functionality in the new high-level components required making some breaking changes to move Auth and Components previously defined in the templates to be included in the <strong>ServiceStack.Blazor</strong> library. To simplify upgrading we&#39;ve wrapped most of these required changes in the mix scripts below which should be run from your <a href="https://github.com/NetCoreTemplates/blazor-tailwind" target="_blank" rel="noopener noreferrer">blazor-tailwind</a> WASM <strong>Client</strong> project:</p>`,40),J=a("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[a("div",{class:"flex-grow bg-gray-800"},[a("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[a("p",null,"x mix -delete blazor-upgrade-clean")])]),a("div",{class:"flex"},[a("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[a("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[a("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),a("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[a("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),K=a("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[a("div",{class:"flex-grow bg-gray-800"},[a("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[a("p",null,"x mix blazor-upgrade")])]),a("div",{class:"flex"},[a("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[a("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[a("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),a("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[a("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),X=e('<h2 id="blazor-feedback" tabindex="-1">Blazor Feedback <a class="header-anchor" href="#blazor-feedback" aria-hidden="true">#</a></h2><p>We&#39;ll be continuing to further develop and expand our Blazor Tailwind Component library in the coming releases that if you have any suggestions for new Components or new features on existing Components, please drop us a Feature Request at:</p><h3 class="text-4xl text-center text-indigo-800 pb-3"><a href="https://servicestack.net/ideas">servicestack.net/ideas</a></h3><h2 id="db-migrations" tabindex="-1">DB Migrations <a class="header-anchor" href="#db-migrations" aria-hidden="true">#</a></h2><p>We&#39;ve continued improving our story around <a href="/ormlite/db-migrations">Code-First DB Migrations</a> and have created a new video demonstrating how it can be used to maintain DB Schema migrations under a typical development workflow:</p>',5),$=a("div",{class:"my-8 flex justify-center"},[a("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/NIVFqute7JQ",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})],-1),Y=e(`<h3 id="jamstack-templates-upgraded" tabindex="-1">Jamstack Templates Upgraded <a class="header-anchor" href="#jamstack-templates-upgraded" aria-hidden="true">#</a></h3><p>As they encourage a structured workflow for incremental development of new App features we&#39;ve upgraded all modern <a href="https://jamstacks.net" target="_blank" rel="noopener noreferrer">jamstacks.net</a> templates to adopt DB Migrations for creating and populating their App DB.</p><h3 id="run-or-debug-migrations-from-your-ide" tabindex="-1">Run or Debug Migrations from your IDE <a class="header-anchor" href="#run-or-debug-migrations-from-your-ide" aria-hidden="true">#</a></h3><p>A benefit of DB Migrations being implemented in a library instead of wrapped up behind an external tool, is that it&#39;s better integrated and more versatile in supporting more executable options like being able to run from code, a feature all Jamstack templates now benefit from with the new <code>MigrationTasks</code> Explicit TestFixture enabling DB Migrations to be run or debugged directly from within your IDE, implemented as:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">TestFixture</span><span class="token punctuation">,</span> <span class="token class-name">Explicit</span><span class="token punctuation">,</span> <span class="token class-name">Category</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>MigrationTasks<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MigrationTasks</span>
<span class="token punctuation">{</span>
   <span class="token return-type class-name">IDbConnectionFactory</span> <span class="token function">ResolveDbFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigureDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ConfigureAndResolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token return-type class-name">Migrator</span> <span class="token function">CreateMigrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token function">ResolveDbFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Migration1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span> 
   
   <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       <span class="token class-name"><span class="token keyword">var</span></span> migrator <span class="token operator">=</span> <span class="token function">CreateMigrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> migrator<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Succeeded<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Revert_All</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       <span class="token class-name"><span class="token keyword">var</span></span> migrator <span class="token operator">=</span> <span class="token function">CreateMigrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> migrator<span class="token punctuation">.</span><span class="token function">Revert</span><span class="token punctuation">(</span>Migrator<span class="token punctuation">.</span>All<span class="token punctuation">)</span><span class="token punctuation">;</span>
       Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Succeeded<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Revert_Last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       <span class="token class-name"><span class="token keyword">var</span></span> migrator <span class="token operator">=</span> <span class="token function">CreateMigrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> migrator<span class="token punctuation">.</span><span class="token function">Revert</span><span class="token punctuation">(</span>Migrator<span class="token punctuation">.</span>Last<span class="token punctuation">)</span><span class="token punctuation">;</span>
       Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Succeeded<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Rerun_Last_Migration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       <span class="token function">Revert_Last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">Migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which uses your App&#39;s <code>ConfigureDb</code> <a href="/modular-startup">Modular Startup</a> configuration to resolve your App&#39;s configured <code>OrmLiteConnectionFactory</code> that the migrations are run against, that if needed can be run from Unit tests to debug through any schema migration issues.</p><h4 id="revert-and-rerun-last-migration" tabindex="-1">Revert and Rerun Last Migration <a class="header-anchor" href="#revert-and-rerun-last-migration" aria-hidden="true">#</a></h4><p>The <code>Rerun_Last_Migration</code> task is especially useful during development of new features to easily revert and rerun the last migration before checking in a completed feature, allowing you to re-iterate and check in a completed and tested DB migration along with the new feature requiring it instead of multiple &quot;micro migrations&quot; for each DB change run at different times.</p><h2 id="servicestack-reference" tabindex="-1">ServiceStack Reference <a class="header-anchor" href="#servicestack-reference" aria-hidden="true">#</a></h2><p>The pursuit of improving the discovery of Blazor Component features prompted us to generate library reference documentation for all core ServiceStack libraries which is being hosted at <a href="https://reference.servicestack.net" target="_blank" rel="noopener noreferrer">reference.servicestack.net</a> that&#39;s configured with <a href="https://servicestack.net/blog/typesense-realtime-search" target="_blank" rel="noopener noreferrer">Real-time search using TypeSense</a> that should let you quickly jump to the type or methods you&#39;re after with a few key strokes.</p><p>Along with the new Blazor Gallery websites it&#39;s a great resource to discover Blazor Component parameters and features which we&#39;ll continue improving over time at:</p><a href="https://reference.servicestack.net/api/ServiceStack.Blazor.Components.Tailwind/"><div class="block flex justify-center shadow hover:shadow-lg rounded py-1"><img class="p-4" src="`+C+`"></div></a><p>It covers most of <a href="https://www.nuget.org/profiles/servicestack" target="_blank" rel="noopener noreferrer">ServiceStack&#39;s 69 Packages</a> which given its size takes a couple hours to generate but has given us some insightful stats on the size and scale of ServiceStack libraries which have been in active development for over 10 years:</p><h4 id="lines-of-code" tabindex="-1">Lines of Code <a class="header-anchor" href="#lines-of-code" aria-hidden="true">#</a></h4><table><thead><tr><th>Package</th><th>Lines of Code</th></tr></thead><tbody><tr><td>ServiceStack</td><td>358802</td></tr><tr><td>ServiceStack.Aws</td><td>22169</td></tr><tr><td>ServiceStack.Azure</td><td>4135</td></tr><tr><td>ServiceStack.Blazor</td><td>9098</td></tr><tr><td>ServiceStack.Logging</td><td>2214</td></tr><tr><td>ServiceStack.OrmLite</td><td>95075</td></tr><tr><td>ServiceStack.Redis</td><td>44765</td></tr><tr><td>ServiceStack.Text</td><td>61850</td></tr></tbody></table><h4 id="total-namespaces-classes-interfaces" tabindex="-1">Total Namespaces / Classes / Interfaces <a class="header-anchor" href="#total-namespaces-classes-interfaces" aria-hidden="true">#</a></h4><table><thead><tr><th>Symbol</th><th>Count</th></tr></thead><tbody><tr><td>Namespaces</td><td>116</td></tr><tr><td>Classes</td><td>2538</td></tr><tr><td>Interfaces</td><td>498</td></tr></tbody></table><h2 id="api-queryparams" tabindex="-1">API QueryParams <a class="header-anchor" href="#api-queryparams" aria-hidden="true">#</a></h2><p>ServiceStack&#39;s message-based design is centered around sending a single message which is all that&#39;s required to invoke any Typed API, however there may be times when you need to send additional params where you can&#39;t change the API&#39;s Request DTO definition or in AutoQuery&#39;s case its <a href="/autoquery-rdbms#implicit-conventions">Implicit Conventions</a> would require too many permutations to be able to type the entire surface area on each Request DTO.</p><p>Previously this would inhibit being able to invoke these Services from a typed Service Client API that would instead need to either use the untyped <a href="https://reference.servicestack.net/api/ServiceStack/IRestClient/#-gettresponsestring" target="_blank" rel="noopener noreferrer"><code>Get&lt;T&gt;(relativeUrl)</code></a> ServiceClient APIs or <a href="/http-utils">HTTP Utils</a> to construct the API Request path manually.</p><p>Now Request DTOs can implement <code>IHasQueryParams</code> where any entries will be sent as additional query params along with the typed DTO:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHasQueryParams</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> QueryParams <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which is now available in all AutoQuery DTOs where it&#39;s added as a non-serializable property so it&#39;s only included in the QueryString:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DataContract</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">QueryBase</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IQuery</span><span class="token punctuation">,</span> <span class="token class-name">IHasQueryParams</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">IgnoreDataMember</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> QueryParams <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which now allows using existing ServiceClient typed APIs to send a combination of untyped queries in AutoQuery requests, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> api <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">ApiAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryContacts</span> <span class="token punctuation">{</span>
  IdsIn <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  QueryParams <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;LastNameStartsWith&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="api-route-supports-multiple-content-types" tabindex="-1">/api route supports multiple content types <a class="header-anchor" href="#api-route-supports-multiple-content-types" aria-hidden="true">#</a></h2><p>The <a href="/routing#json-api-pre-defined-route">JSON /api pre-defined route</a> was previously limited to calling JSON APIs with the pre-defined route:</p><h3 class="text-4xl text-center text-indigo-800 pb-3">/api/{Request}</h3><p>This now supports returning API responses in multiple <a href="/formats">registered content types</a> by using its format extension, e.g:</p><h3 class="text-4xl text-center text-indigo-800 pb-3">/api/{Request}.{ext}</h3><ul><li><code>/api/{Request}.csv</code></li><li><code>/api/{Request}.xml</code></li><li><code>/api/{Request}.jsv</code></li><li><code>/api/{Request}.html</code></li></ul>`,32),ca='{"title":"ServiceStack v6.4","description":"","frontmatter":{"title":"ServiceStack v6.4"},"headers":[{"level":3,"title":"Seamless Upgrade from Locode","slug":"seamless-upgrade-from-locode"},{"level":3,"title":"Introducing Blazor Server","slug":"introducing-blazor-server"},{"level":2,"title":"Blazor Server Tailwind Template","slug":"blazor-server-tailwind-template"},{"level":2,"title":"Lightweight Blazor Tailwind Templates","slug":"lightweight-blazor-tailwind-templates"},{"level":2,"title":"Blazor Gallery","slug":"blazor-gallery"},{"level":2,"title":"Blazor Tailwind Components","slug":"blazor-tailwind-components"},{"level":3,"title":"DataGrid","slug":"datagrid"},{"level":3,"title":"AutoQueryGrid","slug":"autoquerygrid"},{"level":3,"title":"AutoQueryGrid Read Only","slug":"autoquerygrid-read-only"},{"level":3,"title":"AutoQueryGrid CRUD","slug":"autoquerygrid-crud"},{"level":3,"title":"Customizable Columns","slug":"customizable-columns"},{"level":3,"title":"Declarative Customizations","slug":"declarative-customizations"},{"level":3,"title":"Changing AutoQueryGrid Defaults","slug":"changing-autoquerygrid-defaults"},{"level":3,"title":"AutoQueryGrid Gallery","slug":"autoquerygrid-gallery"},{"level":2,"title":"Modal Lookups","slug":"modal-lookups"},{"level":2,"title":"File Uploads","slug":"file-uploads"},{"level":2,"title":"Auto Forms","slug":"auto-forms"},{"level":3,"title":"AutoEditForm","slug":"autoeditform"},{"level":3,"title":"AutoFormFields","slug":"autoformfields"},{"level":2,"title":"PreviewFormat","slug":"previewformat"},{"level":2,"title":"HtmlFormat","slug":"htmlformat"},{"level":3,"title":"Single Model","slug":"single-model"},{"level":3,"title":"Item Collections","slug":"item-collections"},{"level":3,"title":"Nested Complex Types","slug":"nested-complex-types"},{"level":2,"title":"Blazor Config","slug":"blazor-config"},{"level":3,"title":"Asset and Fallback Paths","slug":"asset-and-fallback-paths"},{"level":2,"title":"Blazor WASM Tailwind Upgrade","slug":"blazor-wasm-tailwind-upgrade"},{"level":2,"title":"Blazor Feedback","slug":"blazor-feedback"},{"level":2,"title":"DB Migrations","slug":"db-migrations"},{"level":3,"title":"Jamstack Templates Upgraded","slug":"jamstack-templates-upgraded"},{"level":3,"title":"Run or Debug Migrations from your IDE","slug":"run-or-debug-migrations-from-your-ide"},{"level":2,"title":"ServiceStack Reference","slug":"servicestack-reference"},{"level":2,"title":"API QueryParams","slug":"api-queryparams"},{"level":2,"title":"/api route supports multiple content types","slug":"api-route-supports-multiple-content-types"}],"relativePath":"releases/v6_4.md"}',Z={},la=Object.assign(Z,{__name:"v6_4",setup(aa){return(na,sa)=>(_(),A("div",null,[B,a("div",S,[a("div",null,[s(t(n),{icon:"simple-icons:blazor",class:"w-40 h-40 text-purple-600 mr-8"})]),z]),F,I,D,a("div",R,[a("div",null,[s(t(n),{icon:"simple-icons:blazor",class:"w-24 h-24 text-purple-600 mr-8"}),s(t(n),{icon:"logos:tailwindcss-icon",class:"w-28 h-28"})])]),M,a("div",P,[a("a",U,[s(t(n),{icon:"simple-icons:github",class:"w-6 h-6 mr-2 align-text-bottom"}),L]),a("a",G,[s(t(n),{icon:"simple-icons:github",class:"w-6 h-6 mr-2 align-text-bottom"}),V])]),Q,H,a("div",E,[a("div",null,[s(t(n),{icon:"simple-icons:blazor",class:"w-40 h-40 text-purple-600 mr-8"}),s(t(n),{icon:"logos:tailwindcss-icon",class:"w-44 h-44"})]),N]),W,j,O,J,K,X,$,Y]))}});export{ca as __pageData,la as default};
